{
  if (getSessions() != null)   getSessions().close();
  try {
    setCfg(new Configuration());
    cfg.addProperties(getExtraProperties());
    if (recreateSchema()) {
      cfg.setProperty(Environment.HBM2DDL_AUTO,"create-drop");
    }
    for (int i=0; i < files.length; i++) {
      if (!files[i].startsWith("net/"))       files[i]=getBaseForMappings() + files[i];
      getCfg().addResource(files[i],TestCase.class.getClassLoader());
    }
    setDialect(Dialect.getDialect());
    configure(cfg);
    if (getCacheConcurrencyStrategy() != null) {
      Iterator iter=cfg.getClassMappings();
      while (iter.hasNext()) {
        PersistentClass clazz=(PersistentClass)iter.next();
        Iterator props=clazz.getPropertyClosureIterator();
        boolean hasLob=false;
        while (props.hasNext()) {
          Property prop=(Property)props.next();
          if (prop.getValue().isSimpleValue()) {
            String type=((SimpleValue)prop.getValue()).getTypeName();
            if ("blob".equals(type) || "clob".equals(type))             hasLob=true;
            if (Blob.class.getName().equals(type) || Clob.class.getName().equals(type)) {
              hasLob=true;
            }
          }
        }
        if (!hasLob && !clazz.isInherited()) {
          cfg.setCacheConcurrencyStrategy(clazz.getEntityName(),getCacheConcurrencyStrategy());
        }
      }
      iter=cfg.getCollectionMappings();
      while (iter.hasNext()) {
        Collection coll=(Collection)iter.next();
        cfg.setCollectionCacheConcurrencyStrategy(coll.getRole(),getCacheConcurrencyStrategy());
      }
    }
    setSessions(getCfg().buildSessionFactory());
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
}
