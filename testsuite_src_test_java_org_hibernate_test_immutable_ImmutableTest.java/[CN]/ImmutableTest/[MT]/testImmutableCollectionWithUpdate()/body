{
  Contract c=new Contract("gavin","phone");
  ContractVariation cv1=new ContractVariation(1,c);
  cv1.setText("expensive");
  ContractVariation cv2=new ContractVariation(2,c);
  cv2.setText("more expensive");
  Session s=openSession();
  Transaction t=s.beginTransaction();
  s.persist(c);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  c.getVariations().add(new ContractVariation(3,c));
  try {
    s.update(c);
    fail("should have failed because reassociated object has a dirty collection");
  }
 catch (  HibernateException ex) {
  }
 finally {
    t.rollback();
    s.close();
  }
  s=openSession();
  t=s.beginTransaction();
  c=(Contract)s.createCriteria(Contract.class).uniqueResult();
  assertEquals(c.getCustomerName(),"gavin");
  assertEquals(c.getVariations().size(),2);
  Iterator it=c.getVariations().iterator();
  cv1=(ContractVariation)it.next();
  assertEquals(cv1.getText(),"expensive");
  cv2=(ContractVariation)it.next();
  assertEquals(cv2.getText(),"more expensive");
  s.delete(c);
  assertEquals(s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult(),new Integer(0));
  assertEquals(s.createCriteria(ContractVariation.class).setProjection(Projections.rowCount()).uniqueResult(),new Integer(0));
  t.commit();
  s.close();
}
