{
  return new TypedQuery<X>(){
    public List<X> getResultList(){
      return jpaqlQuery.getResultList();
    }
    public X getSingleResult(){
      return jpaqlQuery.getSingleResult();
    }
    public int getMaxResults(){
      return jpaqlQuery.getMaxResults();
    }
    public TypedQuery<X> setMaxResults(    int i){
      return jpaqlQuery.setMaxResults(i);
    }
    public int getFirstResult(){
      return jpaqlQuery.getFirstResult();
    }
    public TypedQuery<X> setFirstResult(    int i){
      return jpaqlQuery.setFirstResult(i);
    }
    public Map<String,Object> getHints(){
      return jpaqlQuery.getHints();
    }
    public TypedQuery<X> setHint(    String name,    Object value){
      return jpaqlQuery.setHint(name,value);
    }
    public FlushModeType getFlushMode(){
      return jpaqlQuery.getFlushMode();
    }
    public TypedQuery<X> setFlushMode(    FlushModeType flushModeType){
      return jpaqlQuery.setFlushMode(flushModeType);
    }
    public LockModeType getLockMode(){
      return jpaqlQuery.getLockMode();
    }
    public TypedQuery<X> setLockMode(    LockModeType lockModeType){
      return jpaqlQuery.setLockMode(lockModeType);
    }
    @SuppressWarnings({"unchecked"}) public Set getParameters(){
      return explicitParameterMapping.keySet();
    }
    public boolean isBound(    Parameter<?> param){
      return jpaqlQuery.isBound(param);
    }
    @SuppressWarnings({"unchecked"}) public <T>T getParameterValue(    Parameter<T> param){
      return (T)jpaqlQuery.getParameterValue(mapToNamedParameter(param));
    }
    @SuppressWarnings({"unchecked"}) public <T>TypedQuery<X> setParameter(    Parameter<T> param,    T t){
      return jpaqlQuery.setParameter(mapToNamedParameter(param),t);
    }
    @SuppressWarnings({"RedundantCast"}) private Parameter mapToNamedParameter(    Parameter criteriaParameter){
      return jpaqlQuery.getParameter(explicitParameterMapping.get((ParameterExpression)criteriaParameter));
    }
    @SuppressWarnings({"unchecked"}) public TypedQuery<X> setParameter(    Parameter<Calendar> param,    Calendar calendar,    TemporalType temporalType){
      return jpaqlQuery.setParameter(mapToNamedParameter(param),calendar,temporalType);
    }
    @SuppressWarnings({"unchecked"}) public TypedQuery<X> setParameter(    Parameter<Date> param,    Date date,    TemporalType temporalType){
      return jpaqlQuery.setParameter(mapToNamedParameter(param),date,temporalType);
    }
    public <T>T unwrap(    Class<T> cls){
      return jpaqlQuery.unwrap(cls);
    }
    public int executeUpdate(){
      throw new IllegalArgumentException("Criteria queries do not support update queries");
    }
    public TypedQuery<X> setParameter(    String s,    Object o){
      throw new IllegalArgumentException("Criteria queries do not support named parameters");
    }
    public TypedQuery<X> setParameter(    String s,    Calendar calendar,    TemporalType temporalType){
      throw new IllegalArgumentException("Criteria queries do not support named parameters");
    }
    public TypedQuery<X> setParameter(    String s,    Date date,    TemporalType temporalType){
      throw new IllegalArgumentException("Criteria queries do not support named parameters");
    }
    public Object getParameterValue(    String name){
      throw new IllegalArgumentException("Criteria queries do not support named parameters");
    }
    public Parameter<?> getParameter(    String name){
      throw new IllegalArgumentException("Criteria queries do not support named parameters");
    }
    public <T>Parameter<T> getParameter(    String name,    Class<T> type){
      throw new IllegalArgumentException("Criteria queries do not support named parameters");
    }
    public TypedQuery<X> setParameter(    int i,    Object o){
      throw new IllegalArgumentException("Criteria queries do not support positioned parameters");
    }
    public TypedQuery<X> setParameter(    int i,    Calendar calendar,    TemporalType temporalType){
      throw new IllegalArgumentException("Criteria queries do not support positioned parameters");
    }
    public TypedQuery<X> setParameter(    int i,    Date date,    TemporalType temporalType){
      throw new IllegalArgumentException("Criteria queries do not support positioned parameters");
    }
    public Object getParameterValue(    int position){
      throw new IllegalArgumentException("Criteria queries do not support positioned parameters");
    }
    public Parameter<?> getParameter(    int position){
      throw new IllegalArgumentException("Criteria queries do not support positioned parameters");
    }
    public <T>Parameter<T> getParameter(    int position,    Class<T> type){
      throw new IllegalArgumentException("Criteria queries do not support positioned parameters");
    }
  }
;
}
