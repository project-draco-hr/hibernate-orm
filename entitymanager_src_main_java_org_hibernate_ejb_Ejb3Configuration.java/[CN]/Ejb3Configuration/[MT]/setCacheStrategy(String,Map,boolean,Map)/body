{
  String role=propertyKey.substring((isClass ? HibernatePersistence.CLASS_CACHE_PREFIX.length() : HibernatePersistence.COLLECTION_CACHE_PREFIX.length()) + 1);
  String value=(String)properties.get(propertyKey);
  StringTokenizer params=new StringTokenizer(value,";, ");
  if (!params.hasMoreTokens()) {
    StringBuilder error=new StringBuilder("Illegal usage of ");
    error.append(isClass ? HibernatePersistence.CLASS_CACHE_PREFIX : HibernatePersistence.COLLECTION_CACHE_PREFIX);
    error.append(": ").append(propertyKey).append(" ").append(value);
    throw new PersistenceException(getExceptionHeader() + error.toString());
  }
  String usage=params.nextToken();
  String region=null;
  if (params.hasMoreTokens()) {
    region=params.nextToken();
  }
  if (isClass) {
    boolean lazyProperty=true;
    if (params.hasMoreTokens()) {
      lazyProperty="all".equalsIgnoreCase(params.nextToken());
    }
    cfg.setCacheConcurrencyStrategy(role,usage,region,lazyProperty);
  }
 else {
    cfg.setCollectionCacheConcurrencyStrategy(role,usage,region);
  }
}
