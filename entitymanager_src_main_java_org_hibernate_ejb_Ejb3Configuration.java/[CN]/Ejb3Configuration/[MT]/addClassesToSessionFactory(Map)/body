{
  if (workingVars.containsKey(AvailableSettings.CLASS_NAMES)) {
    Collection<String> classNames=(Collection<String>)workingVars.get(AvailableSettings.CLASS_NAMES);
    addNamedAnnotatedClasses(this,classNames,workingVars);
  }
  if (workingVars.containsKey(AvailableSettings.LOADED_CLASSES)) {
    Collection<Class> classes=(Collection<Class>)workingVars.get(AvailableSettings.LOADED_CLASSES);
    for (    Class clazz : classes) {
      cfg.addAnnotatedClass(clazz);
    }
  }
  if (workingVars.containsKey(AvailableSettings.PACKAGE_NAMES)) {
    Collection<String> packages=(Collection<String>)workingVars.get(AvailableSettings.PACKAGE_NAMES);
    for (    String pkg : packages) {
      cfg.addPackage(pkg);
    }
  }
  if (workingVars.containsKey(AvailableSettings.XML_FILE_NAMES)) {
    Collection<String> xmlFiles=(Collection<String>)workingVars.get(AvailableSettings.XML_FILE_NAMES);
    for (    String xmlFile : xmlFiles) {
      Boolean useMetaInf=null;
      try {
        if (xmlFile.endsWith(META_INF_ORM_XML))         useMetaInf=true;
        cfg.addResource(xmlFile);
      }
 catch (      MappingNotFoundException e) {
        if (!xmlFile.endsWith(META_INF_ORM_XML)) {
          throw new PersistenceException(getExceptionHeader() + "Unable to find XML mapping file in classpath: " + xmlFile);
        }
 else {
          useMetaInf=false;
        }
      }
catch (      MappingException me) {
        throw new PersistenceException(getExceptionHeader() + "Error while reading JPA XML file: " + xmlFile,me);
      }
      if (log.isInfoEnabled()) {
        if (Boolean.TRUE.equals(useMetaInf)) {
          log.info("{} {} found",getExceptionHeader(),META_INF_ORM_XML);
        }
 else         if (Boolean.FALSE.equals(useMetaInf)) {
          log.info("{} No {} found",getExceptionHeader(),META_INF_ORM_XML);
        }
      }
    }
  }
  if (workingVars.containsKey(AvailableSettings.HBXML_FILES)) {
    Collection<NamedInputStream> hbmXmlFiles=(Collection<NamedInputStream>)workingVars.get(AvailableSettings.HBXML_FILES);
    for (    NamedInputStream is : hbmXmlFiles) {
      try {
        cfg.addInputStream(new BufferedInputStream(is.getStream()));
      }
 catch (      MappingException me) {
        if (StringHelper.isEmpty(is.getName())) {
          throw me;
        }
 else {
          throw new MappingException("Error while parsing file: " + is.getName(),me);
        }
      }
    }
  }
}
