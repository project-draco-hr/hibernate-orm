{
  final boolean tracing=LOG.isTraceEnabled();
  if (tracing)   LOG.trace("Serializing persistent-context");
  oos.writeBoolean(defaultReadOnly);
  oos.writeBoolean(hasNonReadOnlyEntities);
  oos.writeInt(entitiesByKey.size());
  if (tracing)   LOG.trace("Starting serialization of [" + entitiesByKey.size() + "] entitiesByKey entries");
  Iterator itr=entitiesByKey.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry entry=(Map.Entry)itr.next();
    ((EntityKey)entry.getKey()).serialize(oos);
    oos.writeObject(entry.getValue());
  }
  oos.writeInt(entitiesByUniqueKey.size());
  if (tracing)   LOG.trace("Starting serialization of [" + entitiesByUniqueKey.size() + "] entitiesByUniqueKey entries");
  itr=entitiesByUniqueKey.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry entry=(Map.Entry)itr.next();
    ((EntityUniqueKey)entry.getKey()).serialize(oos);
    oos.writeObject(entry.getValue());
  }
  oos.writeInt(proxiesByKey.size());
  if (tracing)   LOG.trace("Starting serialization of [" + proxiesByKey.size() + "] proxiesByKey entries");
  itr=proxiesByKey.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry entry=(Map.Entry)itr.next();
    ((EntityKey)entry.getKey()).serialize(oos);
    oos.writeObject(entry.getValue());
  }
  oos.writeInt(entitySnapshotsByKey.size());
  if (tracing)   LOG.trace("Starting serialization of [" + entitySnapshotsByKey.size() + "] entitySnapshotsByKey entries");
  itr=entitySnapshotsByKey.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry entry=(Map.Entry)itr.next();
    ((EntityKey)entry.getKey()).serialize(oos);
    oos.writeObject(entry.getValue());
  }
  oos.writeInt(entityEntries.size());
  if (tracing)   LOG.trace("Starting serialization of [" + entityEntries.size() + "] entityEntries entries");
  itr=entityEntries.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry entry=(Map.Entry)itr.next();
    oos.writeObject(entry.getKey());
    ((EntityEntry)entry.getValue()).serialize(oos);
  }
  oos.writeInt(collectionsByKey.size());
  if (tracing)   LOG.trace("Starting serialization of [" + collectionsByKey.size() + "] collectionsByKey entries");
  itr=collectionsByKey.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry entry=(Map.Entry)itr.next();
    ((CollectionKey)entry.getKey()).serialize(oos);
    oos.writeObject(entry.getValue());
  }
  oos.writeInt(collectionEntries.size());
  if (tracing)   LOG.trace("Starting serialization of [" + collectionEntries.size() + "] collectionEntries entries");
  itr=collectionEntries.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry entry=(Map.Entry)itr.next();
    oos.writeObject(entry.getKey());
    ((CollectionEntry)entry.getValue()).serialize(oos);
  }
  oos.writeInt(arrayHolders.size());
  if (tracing)   LOG.trace("Starting serialization of [" + arrayHolders.size() + "] arrayHolders entries");
  itr=arrayHolders.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry entry=(Map.Entry)itr.next();
    oos.writeObject(entry.getKey());
    oos.writeObject(entry.getValue());
  }
  oos.writeInt(nullifiableEntityKeys.size());
  if (tracing)   LOG.trace("Starting serialization of [" + nullifiableEntityKeys.size() + "] nullifiableEntityKey entries");
  itr=nullifiableEntityKeys.iterator();
  while (itr.hasNext()) {
    EntityKey entry=(EntityKey)itr.next();
    entry.serialize(oos);
  }
}
