{
  final EntityPersister persister=session.getFactory().getEntityPersister(entity);
  final CollectionPersister cp=session.getFactory().getCollectionPersister(entity + '.' + property);
  final Object parent=parentsByChild.get(childEntity);
  if (parent != null) {
    final EntityEntry entityEntry=entityEntryContext.getEntityEntry(parent);
    if (persister.isSubclassEntityName(entityEntry.getEntityName())) {
      Object index=getIndexInParent(property,childEntity,persister,cp,parent);
      if (index == null && mergeMap != null) {
        final Object unMergedInstance=mergeMap.get(parent);
        final Object unMergedChild=mergeMap.get(childEntity);
        if (unMergedInstance != null && unMergedChild != null) {
          index=getIndexInParent(property,unMergedChild,persister,cp,unMergedInstance);
          LOG.debugf("A detached object being merged (corresponding to a parent in parentsByChild) has an indexed collection that [%s] the detached child being merged. ",(index != null ? "contains" : "does not contain"));
        }
      }
      if (index != null) {
        return index;
      }
    }
 else {
      parentsByChild.remove(childEntity);
    }
  }
  for (  Entry<Object,EntityEntry> me : reentrantSafeEntityEntries()) {
    final EntityEntry ee=me.getValue();
    if (persister.isSubclassEntityName(ee.getEntityName())) {
      final Object instance=me.getKey();
      Object index=getIndexInParent(property,childEntity,persister,cp,instance);
      if (index == null && mergeMap != null) {
        final Object unMergedInstance=mergeMap.get(instance);
        final Object unMergedChild=mergeMap.get(childEntity);
        if (unMergedInstance != null && unMergedChild != null) {
          index=getIndexInParent(property,unMergedChild,persister,cp,unMergedInstance);
          LOG.debugf("A detached object being merged (corresponding to a managed entity) has an indexed collection that [%s] the detached child being merged. ",(index != null ? "contains" : "does not contain"));
        }
      }
      if (index != null) {
        return index;
      }
    }
  }
  return null;
}
