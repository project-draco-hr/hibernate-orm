{
  final boolean tracing=LOG.isTraceEnabled();
  if (tracing) {
    LOG.trace("Serializing persistent-context");
  }
  final StatefulPersistenceContext rtn=new StatefulPersistenceContext(session);
  SessionFactoryImplementor sfi=session.getFactory();
  try {
    rtn.defaultReadOnly=ois.readBoolean();
    rtn.hasNonReadOnlyEntities=ois.readBoolean();
    int count=ois.readInt();
    if (tracing) {
      LOG.trace("Starting deserialization of [" + count + "] entitiesByKey entries");
    }
    rtn.entitiesByKey=new HashMap<EntityKey,Object>(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      rtn.entitiesByKey.put(EntityKey.deserialize(ois,sfi),ois.readObject());
    }
    count=ois.readInt();
    if (tracing) {
      LOG.trace("Starting deserialization of [" + count + "] entitiesByUniqueKey entries");
    }
    rtn.entitiesByUniqueKey=new HashMap<EntityUniqueKey,Object>(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      rtn.entitiesByUniqueKey.put(EntityUniqueKey.deserialize(ois,session),ois.readObject());
    }
    count=ois.readInt();
    if (tracing) {
      LOG.trace("Starting deserialization of [" + count + "] proxiesByKey entries");
    }
    rtn.proxiesByKey=new ConcurrentReferenceHashMap<EntityKey,Object>(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count,.75f,1,ConcurrentReferenceHashMap.ReferenceType.STRONG,ConcurrentReferenceHashMap.ReferenceType.WEAK,null);
    for (int i=0; i < count; i++) {
      final EntityKey ek=EntityKey.deserialize(ois,sfi);
      final Object proxy=ois.readObject();
      if (proxy instanceof HibernateProxy) {
        ((HibernateProxy)proxy).getHibernateLazyInitializer().setSession(session);
        rtn.proxiesByKey.put(ek,proxy);
      }
 else {
        if (tracing) {
          LOG.trace("Encountered pruned proxy");
        }
      }
    }
    count=ois.readInt();
    if (tracing) {
      LOG.trace("Starting deserialization of [" + count + "] entitySnapshotsByKey entries");
    }
    rtn.entitySnapshotsByKey=new HashMap<EntityKey,Object>(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      rtn.entitySnapshotsByKey.put(EntityKey.deserialize(ois,sfi),ois.readObject());
    }
    rtn.entityEntryContext=EntityEntryContext.deserialize(ois,rtn);
    count=ois.readInt();
    if (tracing) {
      LOG.trace("Starting deserialization of [" + count + "] collectionsByKey entries");
    }
    rtn.collectionsByKey=new HashMap<CollectionKey,PersistentCollection>(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      rtn.collectionsByKey.put(CollectionKey.deserialize(ois,session),(PersistentCollection)ois.readObject());
    }
    count=ois.readInt();
    if (tracing) {
      LOG.trace("Starting deserialization of [" + count + "] collectionEntries entries");
    }
    rtn.collectionEntries=IdentityMap.instantiateSequenced(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      final PersistentCollection pc=(PersistentCollection)ois.readObject();
      final CollectionEntry ce=CollectionEntry.deserialize(ois,session);
      pc.setCurrentSession(session);
      rtn.collectionEntries.put(pc,ce);
    }
    count=ois.readInt();
    if (tracing) {
      LOG.trace("Starting deserialization of [" + count + "] arrayHolders entries");
    }
    rtn.arrayHolders=new IdentityHashMap<Object,PersistentCollection>(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      rtn.arrayHolders.put(ois.readObject(),(PersistentCollection)ois.readObject());
    }
    count=ois.readInt();
    if (tracing) {
      LOG.trace("Starting deserialization of [" + count + "] nullifiableEntityKey entries");
    }
    rtn.nullifiableEntityKeys=new HashSet<EntityKey>();
    for (int i=0; i < count; i++) {
      rtn.nullifiableEntityKeys.add(EntityKey.deserialize(ois,sfi));
    }
  }
 catch (  HibernateException he) {
    throw new InvalidObjectException(he.getMessage());
  }
  return rtn;
}
