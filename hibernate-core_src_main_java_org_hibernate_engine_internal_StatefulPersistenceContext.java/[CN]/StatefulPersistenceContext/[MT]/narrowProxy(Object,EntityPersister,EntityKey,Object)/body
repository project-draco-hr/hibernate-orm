{
  final Class concreteProxyClass=persister.getConcreteProxyClass();
  final boolean alreadyNarrow=concreteProxyClass.isInstance(proxy);
  if (!alreadyNarrow) {
    LOG.narrowingProxy(concreteProxyClass);
    if (object != null) {
      proxiesByKey.remove(key);
      return object;
    }
    final HibernateProxy originalHibernateProxy=(HibernateProxy)proxy;
    if (!originalHibernateProxy.getHibernateLazyInitializer().isUninitialized()) {
      final Object impl=originalHibernateProxy.getHibernateLazyInitializer().getImplementation();
      if (concreteProxyClass.isInstance(impl)) {
        proxiesByKey.remove(key);
        return impl;
      }
    }
    final HibernateProxy narrowedProxy=(HibernateProxy)persister.createProxy(key.getIdentifier(),session);
    final boolean readOnlyOrig=originalHibernateProxy.getHibernateLazyInitializer().isReadOnly();
    narrowedProxy.getHibernateLazyInitializer().setReadOnly(readOnlyOrig);
    return narrowedProxy;
  }
 else {
    if (object != null) {
      final LazyInitializer li=((HibernateProxy)proxy).getHibernateLazyInitializer();
      li.setImplementation(object);
    }
    return proxy;
  }
}
