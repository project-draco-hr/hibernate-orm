{
  final Class concreteProxyClass=persister.getConcreteProxyClass();
  final boolean alreadyNarrow=concreteProxyClass.isAssignableFrom(proxy.getClass());
  if (!alreadyNarrow) {
    LOG.narrowingProxy(concreteProxyClass);
    if (object != null) {
      proxiesByKey.remove(key);
      return object;
    }
 else {
      proxy=persister.createProxy(key.getIdentifier(),session);
      final Object proxyOrig=proxiesByKey.put(key,proxy);
      if (proxyOrig != null) {
        if (!(proxyOrig instanceof HibernateProxy)) {
          throw new AssertionFailure("proxy not of type HibernateProxy; it is " + proxyOrig.getClass());
        }
        final boolean readOnlyOrig=((HibernateProxy)proxyOrig).getHibernateLazyInitializer().isReadOnly();
        ((HibernateProxy)proxy).getHibernateLazyInitializer().setReadOnly(readOnlyOrig);
      }
      return proxy;
    }
  }
 else {
    if (object != null) {
      final LazyInitializer li=((HibernateProxy)proxy).getHibernateLazyInitializer();
      li.setImplementation(object);
    }
    return proxy;
  }
}
