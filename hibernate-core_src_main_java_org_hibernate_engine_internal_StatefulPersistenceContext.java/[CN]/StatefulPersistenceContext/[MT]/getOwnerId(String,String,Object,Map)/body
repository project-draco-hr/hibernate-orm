{
  final String collectionRole=entityName + '.' + propertyName;
  final EntityPersister persister=session.getFactory().getEntityPersister(entityName);
  final CollectionPersister collectionPersister=session.getFactory().getCollectionPersister(collectionRole);
  final Object parent=parentsByChild.get(childEntity);
  if (parent != null) {
    final EntityEntry entityEntry=entityEntryContext.getEntityEntry(parent);
    if (persister.isSubclassEntityName(entityEntry.getEntityName()) && isFoundInParent(propertyName,childEntity,persister,collectionPersister,parent)) {
      return getEntry(parent).getId();
    }
 else {
      parentsByChild.remove(childEntity);
    }
  }
  for (  Entry<Object,EntityEntry> me : reentrantSafeEntityEntries()) {
    final EntityEntry entityEntry=me.getValue();
    if (persister.isSubclassEntityName(entityEntry.getEntityName())) {
      final Object entityEntryInstance=me.getKey();
      boolean found=isFoundInParent(propertyName,childEntity,persister,collectionPersister,entityEntryInstance);
      if (!found && mergeMap != null) {
        final Object unmergedInstance=mergeMap.get(entityEntryInstance);
        final Object unmergedChild=mergeMap.get(childEntity);
        if (unmergedInstance != null && unmergedChild != null) {
          found=isFoundInParent(propertyName,unmergedChild,persister,collectionPersister,unmergedInstance);
        }
      }
      if (found) {
        return entityEntry.getId();
      }
    }
  }
  if (mergeMap != null) {
    for (    Object o : mergeMap.entrySet()) {
      final Entry mergeMapEntry=(Entry)o;
      if (mergeMapEntry.getKey() instanceof HibernateProxy) {
        final HibernateProxy proxy=(HibernateProxy)mergeMapEntry.getKey();
        if (persister.isSubclassEntityName(proxy.getHibernateLazyInitializer().getEntityName())) {
          boolean found=isFoundInParent(propertyName,childEntity,persister,collectionPersister,mergeMap.get(proxy));
          if (!found) {
            found=isFoundInParent(propertyName,mergeMap.get(childEntity),persister,collectionPersister,mergeMap.get(proxy));
          }
          if (found) {
            return proxy.getHibernateLazyInitializer().getIdentifier();
          }
        }
      }
    }
  }
  return null;
}
