{
  AuditEntityNameRegister auditEntityNameRegister=new AuditEntityNameRegister();
  DOMWriter writer=new DOMWriter();
  Iterator<PersistentClass> classes=GraphTopologicalSort.sort(new PersistentClassGraphDefiner(cfg)).iterator();
  ClassesAuditingData classesAuditingData=new ClassesAuditingData();
  Map<PersistentClass,EntityXmlMappingData> xmlMappings=new HashMap<PersistentClass,EntityXmlMappingData>();
  while (classes.hasNext()) {
    PersistentClass pc=classes.next();
    AnnotationsMetadataReader annotationsMetadataReader=new AnnotationsMetadataReader(globalCfg,reflectionManager,pc);
    ClassAuditingData auditData=annotationsMetadataReader.getAuditData();
    classesAuditingData.addClassAuditingData(pc,auditData);
  }
  classesAuditingData.updateCalculatedFields();
  AuditMetadataGenerator auditMetaGen=new AuditMetadataGenerator(cfg,globalCfg,verEntCfg,revisionInfoRelationMapping,auditEntityNameRegister);
  for (  Map.Entry<PersistentClass,ClassAuditingData> pcDatasEntry : classesAuditingData.getAllClassAuditedData()) {
    PersistentClass pc=pcDatasEntry.getKey();
    ClassAuditingData auditData=pcDatasEntry.getValue();
    EntityXmlMappingData xmlMappingData=new EntityXmlMappingData();
    if (auditData.isAudited()) {
      if (!StringTools.isEmpty(auditData.getAuditTable().value())) {
        verEntCfg.addCustomAuditTableName(pc.getEntityName(),auditData.getAuditTable().value());
      }
      auditMetaGen.generateFirstPass(pc,auditData,xmlMappingData,true);
    }
 else {
      auditMetaGen.generateFirstPass(pc,auditData,xmlMappingData,false);
    }
    xmlMappings.put(pc,xmlMappingData);
  }
  for (  Map.Entry<PersistentClass,ClassAuditingData> pcDatasEntry : classesAuditingData.getAllClassAuditedData()) {
    EntityXmlMappingData xmlMappingData=xmlMappings.get(pcDatasEntry.getKey());
    if (pcDatasEntry.getValue().isAudited()) {
      auditMetaGen.generateSecondPass(pcDatasEntry.getKey(),pcDatasEntry.getValue(),xmlMappingData);
      try {
        cfg.addDocument(writer.write(xmlMappingData.getMainXmlMapping()));
        for (        Document additionalMapping : xmlMappingData.getAdditionalXmlMappings()) {
          cfg.addDocument(writer.write(additionalMapping));
        }
      }
 catch (      DocumentException e) {
        throw new MappingException(e);
      }
    }
  }
  if (classesAuditingData.getAllClassAuditedData().size() > 0) {
    try {
      if (revisionInfoXmlMapping != null) {
        cfg.addDocument(writer.write(revisionInfoXmlMapping));
      }
    }
 catch (    DocumentException e) {
      throw new MappingException(e);
    }
  }
  return new EntitiesConfigurations(auditMetaGen.getEntitiesConfigurations(),auditMetaGen.getNotAuditedEntitiesConfigurations());
}
