{
  MCoordinate mc0NaN=MCoordinate.create2d(1.0,0.0);
  MCoordinate mc0=MCoordinate.create2dWithMeasure(0.0,0.0,0.0);
  MCoordinate mc1NaN=MCoordinate.create2d(1.0,0.0);
  MCoordinate mc1=MCoordinate.create2dWithMeasure(1.0,0.0,1.0);
  MCoordinate mc2NaN=MCoordinate.create2d(2.0,0.0);
  MCoordinate mc2=MCoordinate.create2dWithMeasure(2.0,0.0,2.0);
  MCoordinate mc3NaN=MCoordinate.create2d(3.0,0.0);
  MCoordinate mc3=MCoordinate.create2dWithMeasure(3.0,0.0,3.0);
  MLineString emptyLine=mgeomFactory.createMLineString(new MCoordinate[]{});
  MLineString orderedLine=mgeomFactory.createMLineString(new MCoordinate[]{mc0,mc1,mc2,mc3});
  MLineString unorderedLine=mgeomFactory.createMLineString(new MCoordinate[]{mc0,mc2,mc1,mc3});
  MLineString constantLine=mgeomFactory.createMLineString(new MCoordinate[]{mc2,mc2,mc2,mc2});
  MLineString reverseOrderedLine=mgeomFactory.createMLineString(new MCoordinate[]{mc3,mc2,mc1,mc0});
  MLineString reverseUnOrderedLine=mgeomFactory.createMLineString(new MCoordinate[]{mc3,mc1,mc2,mc0});
  MLineString dupCoordLine=mgeomFactory.createMLineString(new MCoordinate[]{mc0,mc1,mc1,mc2});
  MLineString reverseDupCoordLine=mgeomFactory.createMLineString(new MCoordinate[]{mc2,mc1,mc1,mc0});
  assertTrue(emptyLine.isMonotone(false));
  assertTrue(emptyLine.isMonotone(true));
  assertTrue(orderedLine.isMonotone(false));
  assertTrue(orderedLine.isMonotone(true));
  orderedLine.reverseMeasures();
  assertTrue(orderedLine.isMonotone(false));
  assertTrue(orderedLine.isMonotone(true));
  orderedLine.shiftMeasure(1.0);
  assertTrue(orderedLine.isMonotone(false));
  assertTrue(orderedLine.isMonotone(true));
  orderedLine.shiftMeasure(-1.0);
  assertTrue(orderedLine.isMonotone(false));
  assertTrue(orderedLine.isMonotone(true));
  assertFalse(unorderedLine.isMonotone(false));
  assertFalse(unorderedLine.isMonotone(true));
  assertTrue(constantLine.isMonotone(false));
  assertFalse(constantLine.isMonotone(true));
  constantLine.shiftMeasure(1.0);
  assertTrue(constantLine.isMonotone(false));
  assertFalse(constantLine.isMonotone(true));
  constantLine.shiftMeasure(-1.0);
  assertTrue(constantLine.isMonotone(false));
  assertFalse(constantLine.isMonotone(true));
  assertTrue(reverseOrderedLine.isMonotone(false));
  assertTrue(reverseOrderedLine.isMonotone(true));
  reverseOrderedLine.reverseMeasures();
  assertTrue(reverseOrderedLine.isMonotone(false));
  assertTrue(reverseOrderedLine.isMonotone(true));
  reverseOrderedLine.shiftMeasure(1.0);
  assertTrue(reverseOrderedLine.isMonotone(false));
  assertTrue(reverseOrderedLine.isMonotone(true));
  reverseOrderedLine.shiftMeasure(-1.0);
  assertTrue(reverseOrderedLine.isMonotone(false));
  assertTrue(reverseOrderedLine.isMonotone(true));
  assertFalse(reverseUnOrderedLine.isMonotone(false));
  assertFalse(reverseUnOrderedLine.isMonotone(true));
  assertTrue(dupCoordLine.isMonotone(false));
  assertFalse(dupCoordLine.isMonotone(true));
  dupCoordLine.shiftMeasure(1.0);
  assertTrue(dupCoordLine.isMonotone(false));
  assertFalse(dupCoordLine.isMonotone(true));
  dupCoordLine.shiftMeasure(-1.0);
  assertTrue(dupCoordLine.isMonotone(false));
  assertFalse(dupCoordLine.isMonotone(true));
  assertTrue(reverseDupCoordLine.isMonotone(false));
  assertFalse(reverseDupCoordLine.isMonotone(true));
  reverseDupCoordLine.shiftMeasure(1.0);
  assertTrue(reverseDupCoordLine.isMonotone(false));
  assertFalse(reverseDupCoordLine.isMonotone(true));
  reverseDupCoordLine.shiftMeasure(-1.0);
  assertTrue(reverseDupCoordLine.isMonotone(false));
  assertFalse(reverseDupCoordLine.isMonotone(true));
  assertEquals(orderedLine.getMeasureDirection(),MGeometry.INCREASING);
  assertEquals(unorderedLine.getMeasureDirection(),MGeometry.NON_MONOTONE);
  assertEquals(reverseOrderedLine.getMeasureDirection(),MGeometry.DECREASING);
  assertEquals(dupCoordLine.getMeasureDirection(),MGeometry.INCREASING);
  assertEquals(reverseDupCoordLine.getMeasureDirection(),MGeometry.DECREASING);
  MLineString internalNaNLine=mgeomFactory.createMLineString(new MCoordinate[]{mc0,mc1NaN,mc2NaN,mc3});
  MLineString beginNaNLine=mgeomFactory.createMLineString(new MCoordinate[]{mc0NaN,mc2,mc3});
  MLineString endNaNLine=mgeomFactory.createMLineString(new MCoordinate[]{mc0,mc2,mc3NaN});
  MLineString beginEndNaNLine=mgeomFactory.createMLineString(new MCoordinate[]{mc0NaN,mc2,mc3NaN});
  assertFalse(internalNaNLine.isMonotone(false));
  assertFalse(internalNaNLine.isMonotone(true));
  internalNaNLine.measureOnLength(false);
  assertTrue(internalNaNLine.isMonotone(false));
  assertTrue(internalNaNLine.isMonotone(true));
  assertFalse(beginNaNLine.isMonotone(false));
  assertFalse(beginNaNLine.isMonotone(true));
  beginNaNLine.measureOnLength(false);
  assertTrue(beginNaNLine.isMonotone(false));
  assertTrue(beginNaNLine.isMonotone(true));
  assertFalse(endNaNLine.isMonotone(false));
  assertFalse(endNaNLine.isMonotone(true));
  endNaNLine.measureOnLength(false);
  assertTrue(endNaNLine.isMonotone(false));
  assertTrue(endNaNLine.isMonotone(true));
  assertFalse(beginEndNaNLine.isMonotone(false));
  assertFalse(beginEndNaNLine.isMonotone(true));
  beginEndNaNLine.measureOnLength(false);
  assertTrue(beginEndNaNLine.isMonotone(false));
  assertTrue(beginEndNaNLine.isMonotone(true));
}
