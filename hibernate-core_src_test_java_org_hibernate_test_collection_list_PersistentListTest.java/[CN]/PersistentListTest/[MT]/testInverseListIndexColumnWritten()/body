{
  final CollectionPersister collectionPersister=sessionFactory().getCollectionPersister(ListOwner.class.getName() + ".children");
  assertTrue(collectionPersister.isInverse());
  Session session=openSession();
  session.beginTransaction();
  ListOwner root=new ListOwner("root");
  ListOwner child1=new ListOwner("c1");
  root.getChildren().add(child1);
  child1.setParent(root);
  ListOwner child2=new ListOwner("c2");
  root.getChildren().add(child2);
  child2.setParent(root);
  session.save(root);
  session.getTransaction().commit();
  session.close();
  final Session session2=openSession();
  session2.beginTransaction();
  session2.doWork(new Work(){
    @Override public void execute(    Connection connection) throws SQLException {
      final QueryableCollection queryableCollection=(QueryableCollection)collectionPersister;
      SimpleSelect select=new SimpleSelect(getDialect()).setTableName(queryableCollection.getTableName()).addColumn("NAME").addColumn("LIST_INDEX").addCondition("NAME","<>","?");
      PreparedStatement preparedStatement=((SessionImplementor)session2).getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().prepareStatement(select.toStatementString());
      preparedStatement.setString(1,"root");
      ResultSet resultSet=((SessionImplementor)session2).getTransactionCoordinator().getJdbcCoordinator().getResultSetReturn().extract(preparedStatement);
      Map<String,Integer> valueMap=new HashMap<String,Integer>();
      while (resultSet.next()) {
        final String name=resultSet.getString(1);
        assertFalse("NAME column was null",resultSet.wasNull());
        final int position=resultSet.getInt(2);
        assertFalse("LIST_INDEX column was null",resultSet.wasNull());
        valueMap.put(name,position);
      }
      assertEquals(2,valueMap.size());
      assertEquals(Integer.valueOf(0),valueMap.get("c1"));
      assertEquals(Integer.valueOf(1),valueMap.get("c2"));
    }
  }
);
  session2.delete(root);
  session2.getTransaction().commit();
  session2.close();
}
