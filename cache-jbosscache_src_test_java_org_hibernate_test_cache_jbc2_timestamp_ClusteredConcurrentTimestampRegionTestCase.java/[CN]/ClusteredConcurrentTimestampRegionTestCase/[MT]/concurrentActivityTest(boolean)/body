{
  region=getTimestampRegion(cache);
  ClusteredConcurrentTimestampsRegionImpl region2=region;
  if (clustered) {
    Cache cache2=createCache();
    registerCache(cache2);
    avoidConcurrentFlush();
    region2=getTimestampRegion(cache2);
  }
  Tester[] testers=new Tester[20];
  for (int i=0; i < testers.length; i++) {
    testers[i]=new Tester((i % 2 == 0) ? region : region2);
    testers[i].start();
  }
  for (int j=0; j < 10; j++) {
    sleep(2000);
    log.info("Running for " + ((j + 1) * 2) + " seconds");
    for (int i=0; i < testers.length; i++) {
      if (testers[i].assertionFailure != null)       throw testers[i].assertionFailure;
    }
    for (int i=0; i < testers.length; i++) {
      if (testers[i].exception != null)       throw testers[i].exception;
    }
  }
  for (int i=0; i < testers.length; i++) {
    testers[i].stop();
  }
  for (int i=0; i < testers.length; i++) {
    if (testers[i].assertionFailure != null)     throw testers[i].assertionFailure;
  }
  for (int i=0; i < testers.length; i++) {
    if (testers[i].exception != null)     throw testers[i].exception;
  }
}
