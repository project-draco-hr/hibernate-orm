{
  DataPoint dpOrig=createDataPoint(CacheMode.IGNORE);
  Session s=openSession();
  s.setCacheMode(CacheMode.IGNORE);
  s.beginTransaction();
  DataPoint dp=(DataPoint)s.load(DataPoint.class,new Long(dpOrig.getId()));
  assertTrue(dp instanceof HibernateProxy);
  LazyInitializer dpLI=((HibernateProxy)dp).getHibernateLazyInitializer();
  checkReadOnly(s,dp,false);
  assertTrue(dpLI.isUninitialized());
  Hibernate.initialize(dp);
  assertFalse(dpLI.isUninitialized());
  checkReadOnly(s,dp,false);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.setCacheMode(CacheMode.IGNORE);
  s.beginTransaction();
  dp=(DataPoint)s.load(DataPoint.class,new Long(dpOrig.getId()));
  assertTrue(dp instanceof HibernateProxy);
  dpLI=((HibernateProxy)dp).getHibernateLazyInitializer();
  dpLI.setReadOnly(true);
  checkReadOnly(s,dp,true);
  assertTrue(dpLI.isUninitialized());
  Hibernate.initialize(dp);
  assertFalse(dpLI.isUninitialized());
  checkReadOnly(s,dp,true);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.setCacheMode(CacheMode.IGNORE);
  s.beginTransaction();
  dp=(DataPoint)s.load(DataPoint.class,new Long(dpOrig.getId()));
  assertTrue(dp instanceof HibernateProxy);
  dpLI=((HibernateProxy)dp).getHibernateLazyInitializer();
  dpLI.setReadOnly(true);
  checkReadOnly(s,dp,true);
  assertTrue(dpLI.isUninitialized());
  dpLI.setReadOnly(false);
  checkReadOnly(s,dp,false);
  assertTrue(dpLI.isUninitialized());
  Hibernate.initialize(dp);
  assertFalse(dpLI.isUninitialized());
  checkReadOnly(s,dp,false);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  dp=(DataPoint)s.get(DataPoint.class,dpOrig.getId());
  assertEquals(dpOrig.getId(),dp.getId());
  assertEquals(dpOrig.getDescription(),dp.getDescription());
  assertEquals(dpOrig.getX(),dp.getX());
  assertEquals(dpOrig.getY(),dp.getY());
  s.delete(dp);
  s.getTransaction().commit();
  s.close();
}
