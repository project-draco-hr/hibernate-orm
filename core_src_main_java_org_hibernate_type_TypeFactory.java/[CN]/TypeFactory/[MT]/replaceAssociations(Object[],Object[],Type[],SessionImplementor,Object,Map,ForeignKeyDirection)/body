{
  Object[] copied=new Object[original.length];
  for (int i=0; i < types.length; i++) {
    if (original[i] == LazyPropertyInitializer.UNFETCHED_PROPERTY || original[i] == BackrefPropertyAccessor.UNKNOWN) {
      copied[i]=target[i];
    }
 else     if (types[i].isComponentType()) {
      AbstractComponentType componentType=(AbstractComponentType)types[i];
      Type[] subtypes=componentType.getSubtypes();
      Object[] origComponentValues=original[i] == null ? new Object[subtypes.length] : componentType.getPropertyValues(original[i],session);
      Object[] targetComponentValues=target[i] == null ? new Object[subtypes.length] : componentType.getPropertyValues(target[i],session);
      replaceAssociations(origComponentValues,targetComponentValues,subtypes,session,null,copyCache,foreignKeyDirection);
      copied[i]=target[i];
    }
 else     if (!types[i].isAssociationType()) {
      copied[i]=target[i];
    }
 else {
      copied[i]=types[i].replace(original[i],target[i],session,owner,copyCache,foreignKeyDirection);
    }
  }
  return copied;
}
