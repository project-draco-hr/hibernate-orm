{
  TestingJtaBootstrap.INSTANCE.getTransactionManager().begin();
  Session s=openSession();
  NumberedNode dupe=new NumberedNode("dupe");
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  s.persist(dupe);
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  dupe=(NumberedNode)getOldToNewEntityRefMap().get(dupe);
  s.persist(dupe);
  applyNonFlushedChangesToNewSessionCloseOldSession(s);
  TestingJtaBootstrap.INSTANCE.getTransactionManager().commit();
  TestingJtaBootstrap.INSTANCE.getTransactionManager().begin();
  s=openSession();
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  try {
    s.persist(dupe);
    assertFalse(true);
  }
 catch (  PersistentObjectException poe) {
  }
  TestingJtaBootstrap.INSTANCE.getTransactionManager().rollback();
  NumberedNode nondupe=new NumberedNode("nondupe");
  nondupe.addChild(dupe);
  TestingJtaBootstrap.INSTANCE.getTransactionManager().begin();
  s=openSession();
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  try {
    s.persist(nondupe);
    assertFalse(true);
  }
 catch (  PersistentObjectException poe) {
  }
  TestingJtaBootstrap.INSTANCE.getTransactionManager().rollback();
}
