{
  org.hibernate.mapping.OneToOne value=new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(),propertyHolder.getTable(),propertyHolder.getPersistentClass());
  final String propertyName=inferredData.getPropertyName();
  value.setPropertyName(propertyName);
  String referencedEntityName=ToOneBinder.getReferenceEntityName(inferredData,targetEntity,buildingContext);
  value.setReferencedEntityName(referencedEntityName);
  AnnotationBinder.defineFetchingStrategy(value,inferredData.getProperty());
  value.setCascadeDeleteEnabled(cascadeOnDelete);
  if (!optional)   value.setConstrained(true);
  value.setForeignKeyType(value.isConstrained() ? ForeignKeyDirection.FROM_PARENT : ForeignKeyDirection.TO_PARENT);
  PropertyBinder binder=new PropertyBinder();
  binder.setName(propertyName);
  binder.setValue(value);
  binder.setCascade(cascadeStrategy);
  binder.setAccessType(inferredData.getDefaultAccess());
  Property prop=binder.makeProperty();
  if (BinderHelper.isEmptyAnnotationValue(mappedBy)) {
    boolean rightOrder=true;
    if (rightOrder) {
      String path=StringHelper.qualify(propertyHolder.getPath(),propertyName);
      final ToOneFkSecondPass secondPass=new ToOneFkSecondPass(value,joinColumns,!optional,propertyHolder.getEntityOwnerClassName(),path,buildingContext);
      secondPass.doSecondPass(persistentClasses);
      propertyHolder.addProperty(prop,inferredData.getDeclaringClass());
    }
 else {
    }
  }
 else {
    PersistentClass otherSide=(PersistentClass)persistentClasses.get(value.getReferencedEntityName());
    Property otherSideProperty;
    try {
      if (otherSide == null) {
        throw new MappingException("Unable to find entity: " + value.getReferencedEntityName());
      }
      otherSideProperty=BinderHelper.findPropertyByName(otherSide,mappedBy);
    }
 catch (    MappingException e) {
      throw new AnnotationException("Unknown mappedBy in: " + StringHelper.qualify(ownerEntity,ownerProperty) + ", referenced property unknown: "+ StringHelper.qualify(value.getReferencedEntityName(),mappedBy));
    }
    if (otherSideProperty == null) {
      throw new AnnotationException("Unknown mappedBy in: " + StringHelper.qualify(ownerEntity,ownerProperty) + ", referenced property unknown: "+ StringHelper.qualify(value.getReferencedEntityName(),mappedBy));
    }
    if (otherSideProperty.getValue() instanceof OneToOne) {
      propertyHolder.addProperty(prop,inferredData.getDeclaringClass());
    }
 else     if (otherSideProperty.getValue() instanceof ManyToOne) {
      Iterator it=otherSide.getJoinIterator();
      Join otherSideJoin=null;
      while (it.hasNext()) {
        Join otherSideJoinValue=(Join)it.next();
        if (otherSideJoinValue.containsProperty(otherSideProperty)) {
          otherSideJoin=otherSideJoinValue;
          break;
        }
      }
      if (otherSideJoin != null) {
        Join mappedByJoin=buildJoinFromMappedBySide((PersistentClass)persistentClasses.get(ownerEntity),otherSideProperty,otherSideJoin);
        ManyToOne manyToOne=new ManyToOne(buildingContext.getMetadataCollector(),mappedByJoin.getTable());
        manyToOne.setIgnoreNotFound(ignoreNotFound);
        manyToOne.setCascadeDeleteEnabled(value.isCascadeDeleteEnabled());
        manyToOne.setFetchMode(value.getFetchMode());
        manyToOne.setLazy(value.isLazy());
        manyToOne.setReferencedEntityName(value.getReferencedEntityName());
        manyToOne.setUnwrapProxy(value.isUnwrapProxy());
        prop.setValue(manyToOne);
        Iterator otherSideJoinKeyColumns=otherSideJoin.getKey().getColumnIterator();
        while (otherSideJoinKeyColumns.hasNext()) {
          Column column=(Column)otherSideJoinKeyColumns.next();
          Column copy=new Column();
          copy.setLength(column.getLength());
          copy.setScale(column.getScale());
          copy.setValue(manyToOne);
          copy.setName(column.getQuotedName());
          copy.setNullable(column.isNullable());
          copy.setPrecision(column.getPrecision());
          copy.setUnique(column.isUnique());
          copy.setSqlType(column.getSqlType());
          copy.setCheckConstraint(column.getCheckConstraint());
          copy.setComment(column.getComment());
          copy.setDefaultValue(column.getDefaultValue());
          manyToOne.addColumn(copy);
        }
        mappedByJoin.addProperty(prop);
      }
 else {
        propertyHolder.addProperty(prop,inferredData.getDeclaringClass());
      }
      value.setReferencedPropertyName(mappedBy);
      boolean referencesDerivedId=false;
      try {
        referencesDerivedId=otherSide.getIdentifier() instanceof Component && ((Component)otherSide.getIdentifier()).getProperty(mappedBy) != null;
      }
 catch (      MappingException e) {
      }
      boolean referenceToPrimaryKey=referencesDerivedId || mappedBy == null;
      value.setReferenceToPrimaryKey(referenceToPrimaryKey);
      if (referencesDerivedId) {
        ((ManyToOne)otherSideProperty.getValue()).setReferenceToPrimaryKey(false);
      }
      String propertyRef=value.getReferencedPropertyName();
      if (propertyRef != null) {
        buildingContext.getMetadataCollector().addUniquePropertyReference(value.getReferencedEntityName(),propertyRef);
      }
    }
 else {
      throw new AnnotationException("Referenced property not a (One|Many)ToOne: " + StringHelper.qualify(otherSide.getEntityName(),mappedBy) + " in mappedBy of "+ StringHelper.qualify(ownerEntity,ownerProperty));
    }
  }
  final ForeignKey fk=inferredData.getProperty().getAnnotation(ForeignKey.class);
  if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) {
    value.setForeignKeyName(fk.name());
  }
 else {
    final javax.persistence.ForeignKey jpaFk=inferredData.getProperty().getAnnotation(javax.persistence.ForeignKey.class);
    if (jpaFk != null) {
      if (jpaFk.value() == ConstraintMode.NO_CONSTRAINT) {
        value.setForeignKeyName("none");
      }
 else {
        value.setForeignKeyName(StringHelper.nullIfEmpty(jpaFk.name()));
      }
    }
  }
}
