{
  final Type type=propertyValue.getType();
  final boolean embeddableElementType=isEmbeddableElementType();
  if (type instanceof SortedSetType) {
    currentMapper.addComposite(propertyAuditingData.getPropertyData(),new SortedSetCollectionMapper(commonCollectionMapperData,TreeSet.class,SortedSetProxy.class,elementComponentData,propertyValue.getComparator(),embeddableElementType,embeddableElementType));
  }
 else   if (type instanceof SetType) {
    currentMapper.addComposite(propertyAuditingData.getPropertyData(),new BasicCollectionMapper<Set>(commonCollectionMapperData,HashSet.class,SetProxy.class,elementComponentData,embeddableElementType,embeddableElementType));
  }
 else   if (type instanceof SortedMapType) {
    currentMapper.addComposite(propertyAuditingData.getPropertyData(),new SortedMapCollectionMapper(commonCollectionMapperData,TreeMap.class,SortedMapProxy.class,elementComponentData,indexComponentData,propertyValue.getComparator(),embeddableElementType));
  }
 else   if (type instanceof MapType) {
    currentMapper.addComposite(propertyAuditingData.getPropertyData(),new MapCollectionMapper<Map>(commonCollectionMapperData,HashMap.class,MapProxy.class,elementComponentData,indexComponentData,embeddableElementType));
  }
 else   if (type instanceof BagType) {
    currentMapper.addComposite(propertyAuditingData.getPropertyData(),new BasicCollectionMapper<List>(commonCollectionMapperData,ArrayList.class,ListProxy.class,elementComponentData,embeddableElementType,embeddableElementType));
  }
 else   if (type instanceof ListType) {
    currentMapper.addComposite(propertyAuditingData.getPropertyData(),new ListCollectionMapper(commonCollectionMapperData,elementComponentData,indexComponentData,embeddableElementType));
  }
 else {
    mainGenerator.throwUnsupportedTypeException(type,referencingEntityName,propertyName);
  }
}
