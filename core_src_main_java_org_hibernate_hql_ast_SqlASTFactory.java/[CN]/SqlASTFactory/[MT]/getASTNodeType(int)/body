{
switch (tokenType) {
case SELECT:
case QUERY:
    return QueryNode.class;
case UPDATE:
  return UpdateStatement.class;
case DELETE:
return DeleteStatement.class;
case INSERT:
return InsertStatement.class;
case INTO:
return IntoClause.class;
case FROM:
return FromClause.class;
case FROM_FRAGMENT:
return FromElement.class;
case IMPLIED_FROM:
return ImpliedFromElement.class;
case DOT:
return DotNode.class;
case INDEX_OP:
return IndexNode.class;
case ALIAS_REF:
case IDENT:
return IdentNode.class;
case SQL_TOKEN:
return SqlFragment.class;
case METHOD_CALL:
return MethodNode.class;
case ELEMENTS:
case INDICES:
return CollectionFunction.class;
case SELECT_CLAUSE:
return SelectClause.class;
case SELECT_EXPR:
return SelectExpressionImpl.class;
case AGGREGATE:
return AggregateNode.class;
case COUNT:
return CountNode.class;
case CONSTRUCTOR:
return ConstructorNode.class;
case NUM_INT:
case NUM_FLOAT:
case NUM_LONG:
case NUM_DOUBLE:
case NUM_BIG_INTEGER:
case NUM_BIG_DECIMAL:
case QUOTED_STRING:
return LiteralNode.class;
case TRUE:
case FALSE:
return BooleanLiteralNode.class;
case JAVA_CONSTANT:
return JavaConstantNode.class;
case ORDER:
return OrderByClause.class;
case PLUS:
case MINUS:
case STAR:
case DIV:
case MOD:
return BinaryArithmeticOperatorNode.class;
case UNARY_MINUS:
case UNARY_PLUS:
return UnaryArithmeticNode.class;
case CASE2:
return Case2Node.class;
case CASE:
return CaseNode.class;
case PARAM:
case NAMED_PARAM:
return ParameterNode.class;
case EQ:
case NE:
case LT:
case GT:
case LE:
case GE:
case LIKE:
case NOT_LIKE:
return BinaryLogicOperatorNode.class;
case IN:
case NOT_IN:
return InLogicOperatorNode.class;
case BETWEEN:
case NOT_BETWEEN:
return BetweenOperatorNode.class;
case IS_NULL:
return IsNullLogicOperatorNode.class;
case IS_NOT_NULL:
return IsNotNullLogicOperatorNode.class;
case EXISTS:
return UnaryLogicOperatorNode.class;
case KEY:
{
return MapKeyNode.class;
}
case VALUE:
{
return MapValueNode.class;
}
case ENTRY:
{
return MapEntryNode.class;
}
default :
return SqlNode.class;
}
}
