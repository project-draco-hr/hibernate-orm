{
  String driverClass=props.getProperty(Environment.DRIVER);
  poolSize=ConfigurationHelper.getInt(Environment.POOL_SIZE,props,20);
  LOG.usingHibernateConnectionPool();
  LOG.hibernateConnectionPoolSize(poolSize);
  autocommit=ConfigurationHelper.getBoolean(Environment.AUTOCOMMIT,props);
  LOG.autocommmitMode(autocommit);
  isolation=ConfigurationHelper.getInteger(Environment.ISOLATION,props);
  if (isolation != null)   LOG.jdbcIsolationLevel(Environment.isolationLevelToString(isolation.intValue()));
  if (driverClass == null)   LOG.unspecifiedJdbcDriver(Environment.DRIVER);
 else {
    try {
      Class.forName(driverClass);
    }
 catch (    ClassNotFoundException cnfe) {
      try {
        ReflectHelper.classForName(driverClass);
      }
 catch (      ClassNotFoundException e) {
        String msg="JDBC Driver class not found: " + driverClass;
        LOG.jdbcDriverClassNotFound(msg,e.getMessage());
        throw new HibernateException(msg,e);
      }
    }
  }
  url=props.getProperty(Environment.URL);
  if (url == null) {
    String msg="JDBC URL was not specified by property " + Environment.URL;
    LOG.unspecifiedJdbcUrl(msg);
    throw new HibernateException(msg);
  }
  connectionProps=ConnectionProviderFactory.getConnectionProperties(props);
  LOG.usingDriver(driverClass,url);
  if (LOG.isDebugEnabled())   LOG.connectionProperties(connectionProps);
 else   LOG.connectionProperties(ConfigurationHelper.maskOut(connectionProps,"password"));
}
