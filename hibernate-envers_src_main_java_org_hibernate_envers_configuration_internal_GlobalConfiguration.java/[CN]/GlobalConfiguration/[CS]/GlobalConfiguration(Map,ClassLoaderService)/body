{
  generateRevisionsForCollections=ConfigurationHelper.getBoolean(EnversSettings.REVISION_ON_COLLECTION_CHANGE,properties,true);
  doNotAuditOptimisticLockingField=ConfigurationHelper.getBoolean(EnversSettings.DO_NOT_AUDIT_OPTIMISTIC_LOCKING_FIELD,properties,true);
  storeDataAtDelete=ConfigurationHelper.getBoolean(EnversSettings.STORE_DATA_AT_DELETE,properties,false);
  defaultSchemaName=(String)properties.get(EnversSettings.DEFAULT_SCHEMA);
  defaultCatalogName=(String)properties.get(EnversSettings.DEFAULT_CATALOG);
  correlatedSubqueryOperator=HSQLDialect.class.getName().equals(properties.get(Environment.DIALECT)) ? "in" : "=";
  trackEntitiesChangedInRevision=ConfigurationHelper.getBoolean(EnversSettings.TRACK_ENTITIES_CHANGED_IN_REVISION,properties,false);
  cascadeDeleteRevision=ConfigurationHelper.getBoolean("org.hibernate.envers.cascade_delete_revision",properties,false);
  useRevisionEntityWithNativeId=ConfigurationHelper.getBoolean(EnversSettings.USE_REVISION_ENTITY_WITH_NATIVE_ID,properties,true);
  hasGlobalSettingForWithModifiedFlag=properties.get(EnversSettings.GLOBAL_WITH_MODIFIED_FLAG) != null;
  globalWithModifiedFlag=ConfigurationHelper.getBoolean(EnversSettings.GLOBAL_WITH_MODIFIED_FLAG,properties,false);
  modifiedFlagSuffix=ConfigurationHelper.getString(EnversSettings.MODIFIED_FLAG_SUFFIX,properties,"_MOD");
  final String revisionListenerClassName=(String)properties.get(EnversSettings.REVISION_LISTENER);
  if (revisionListenerClassName != null) {
    try {
      revisionListenerClass=ReflectionTools.loadClass(revisionListenerClassName,classLoaderService);
    }
 catch (    ClassLoadingException e) {
      throw new MappingException("Revision listener class not found: " + revisionListenerClassName + ".",e);
    }
  }
 else {
    revisionListenerClass=null;
  }
  allowIdentifierReuse=ConfigurationHelper.getBoolean(EnversSettings.ALLOW_IDENTIFIER_REUSE,properties,false);
}
