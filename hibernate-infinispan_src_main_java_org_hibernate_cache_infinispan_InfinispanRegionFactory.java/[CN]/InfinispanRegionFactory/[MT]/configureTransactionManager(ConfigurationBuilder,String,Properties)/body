{
  Configuration baseCfg=manager.getCacheConfiguration(cacheName);
  if (baseCfg != null && baseCfg.transaction().transactionMode().isTransactional()) {
    String ispnTmLookupClassName=baseCfg.transaction().transactionManagerLookup().getClass().getName();
    String hbTmLookupClassName=org.hibernate.cache.infinispan.tm.HibernateTransactionManagerLookup.class.getName();
    if (GenericTransactionManagerLookup.class.getName().equals(ispnTmLookupClassName)) {
      log.debug("Using default Infinispan transaction manager lookup " + "instance (GenericTransactionManagerLookup), overriding it " + "with Hibernate transaction manager lookup");
      builder.transaction().transactionManagerLookup(transactionManagerlookup);
    }
 else     if (ispnTmLookupClassName != null && !ispnTmLookupClassName.equals(hbTmLookupClassName)) {
      log.debug("Infinispan is configured [" + ispnTmLookupClassName + "] with a different transaction manager lookup "+ "class than Hibernate ["+ hbTmLookupClassName+ "]");
    }
 else {
      builder.transaction().transactionManagerLookup(transactionManagerlookup);
    }
    String useSyncProp=extractProperty(INFINISPAN_USE_SYNCHRONIZATION_PROP,properties);
    boolean useSync=useSyncProp == null ? DEF_USE_SYNCHRONIZATION : Boolean.parseBoolean(useSyncProp);
    builder.transaction().useSynchronization(useSync);
  }
}
