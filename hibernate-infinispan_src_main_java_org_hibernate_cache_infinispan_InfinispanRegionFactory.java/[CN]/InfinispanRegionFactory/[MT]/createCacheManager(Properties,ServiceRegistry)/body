{
  final String configLoc=ConfigurationHelper.getString(INFINISPAN_CONFIG_RESOURCE_PROP,properties,DEF_INFINISPAN_CONFIG_RESOURCE);
  final FileLookup fileLookup=FileLookupFactory.newInstance();
  final ClassLoader infinispanClassLoader=InfinispanRegionFactory.class.getClassLoader();
  return serviceRegistry.getService(ClassLoaderService.class).workWithClassLoader(new ClassLoaderService.Work<EmbeddedCacheManager>(){
    @Override public EmbeddedCacheManager doWork(    ClassLoader classLoader){
      InputStream is=null;
      try {
        is=fileLookup.lookupFile(configLoc,classLoader);
        if (is == null) {
          classLoader=infinispanClassLoader;
          is=FileLookupFactory.newInstance().lookupFileStrict(configLoc,classLoader);
        }
        final ParserRegistry parserRegistry=new ParserRegistry(infinispanClassLoader);
        final ConfigurationBuilderHolder holder=parseWithOverridenClassLoader(parserRegistry,is,infinispanClassLoader);
        final String globalStats=extractProperty(INFINISPAN_GLOBAL_STATISTICS_PROP,properties);
        if (globalStats != null) {
          holder.getGlobalConfigurationBuilder().globalJmxStatistics().enabled(Boolean.parseBoolean(globalStats));
        }
        return createCacheManager(holder);
      }
 catch (      IOException e) {
        throw new CacheException("Unable to create default cache manager",e);
      }
 finally {
        Util.close(is);
      }
    }
  }
);
}
