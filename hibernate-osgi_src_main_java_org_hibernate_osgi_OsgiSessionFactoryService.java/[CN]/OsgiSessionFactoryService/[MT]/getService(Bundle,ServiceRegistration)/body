{
  osgiClassLoader.addBundle(requestingBundle);
  final Configuration configuration=new Configuration();
  configuration.getProperties().put(AvailableSettings.JTA_PLATFORM,osgiJtaPlatform);
  final BundleWiring bundleWiring=(BundleWiring)requestingBundle.adapt(BundleWiring.class);
  final Collection<String> cfgResources=bundleWiring.listResources("/","hibernate.cfg.xml",BundleWiring.LISTRESOURCES_RECURSE);
  if (cfgResources.size() == 0) {
    configuration.configure();
  }
 else {
    if (cfgResources.size() > 1) {
      LOG.warn("Multiple hibernate.cfg.xml files found in the persistence bundle.  Using the first one discovered.");
    }
    String cfgResource="/" + cfgResources.iterator().next();
    configuration.configure(cfgResource);
  }
  final BootstrapServiceRegistryBuilder builder=new BootstrapServiceRegistryBuilder();
  builder.with(osgiClassLoader);
  final Integrator[] integrators=osgiServiceUtil.getServiceImpls(Integrator.class);
  for (  Integrator integrator : integrators) {
    builder.with(integrator);
  }
  final StrategyRegistrationProvider[] strategyRegistrationProviders=osgiServiceUtil.getServiceImpls(StrategyRegistrationProvider.class);
  for (  StrategyRegistrationProvider strategyRegistrationProvider : strategyRegistrationProviders) {
    builder.withStrategySelectors(strategyRegistrationProvider);
  }
  final TypeContributor[] typeContributors=osgiServiceUtil.getServiceImpls(TypeContributor.class);
  for (  TypeContributor typeContributor : typeContributors) {
    configuration.registerTypeContributor(typeContributor);
  }
  final ServiceRegistry serviceRegistry=new StandardServiceRegistryBuilder(builder.build()).applySettings(configuration.getProperties()).build();
  return configuration.buildSessionFactory(serviceRegistry);
}
