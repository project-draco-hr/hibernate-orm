{
  MyEnhancedReferenceData myReferenceData=new MyEnhancedReferenceData(1,"first item","abc");
  MyEnhancedReferenceData myOtherReferenceData=new MyEnhancedReferenceData(2,"second item","def");
  Session s1=openSession();
  s1.beginTransaction();
  s1.save(myReferenceData);
  s1.save(myOtherReferenceData);
  s1.getTransaction().commit();
  s1.close();
  assertNotNull(myReferenceData.$$_hibernate_getEntityEntry());
  assertNotNull(myOtherReferenceData.$$_hibernate_getEntityEntry());
  s1=openSession();
  s1.beginTransaction();
  myReferenceData=s1.get(MyEnhancedReferenceData.class,myReferenceData.getId());
  myOtherReferenceData=s1.get(MyEnhancedReferenceData.class,myOtherReferenceData.getId());
  assertTrue(s1.contains(myReferenceData));
  assertTrue(s1.contains(myOtherReferenceData));
  assertNull(myReferenceData.$$_hibernate_getPreviousManagedEntity());
  assertNull(myReferenceData.$$_hibernate_getNextManagedEntity());
  assertNull(myOtherReferenceData.$$_hibernate_getPreviousManagedEntity());
  assertNull(myOtherReferenceData.$$_hibernate_getNextManagedEntity());
  assertSame(myReferenceData.$$_hibernate_getEntityEntry(),((SharedSessionContractImplementor)s1).getPersistenceContext().getEntry(myReferenceData));
  assertSame(myOtherReferenceData.$$_hibernate_getEntityEntry(),((SharedSessionContractImplementor)s1).getPersistenceContext().getEntry(myOtherReferenceData));
  Session s2=openSession();
  s2.beginTransaction();
  assertFalse(s2.contains(myReferenceData));
  assertFalse(s2.contains(myOtherReferenceData));
  assertNull(((SharedSessionContractImplementor)s2).getPersistenceContext().getEntry(myReferenceData));
  assertNull(((SharedSessionContractImplementor)s2).getPersistenceContext().getEntry(myOtherReferenceData));
  s2.evict(myReferenceData);
  s2.evict(myOtherReferenceData);
  assertSame(myReferenceData,s2.get(MyEnhancedReferenceData.class,myReferenceData.getId()));
  assertSame(myOtherReferenceData,s2.get(MyEnhancedReferenceData.class,myOtherReferenceData.getId()));
  assertTrue(s2.contains(myReferenceData));
  assertTrue(s2.contains(myOtherReferenceData));
  assertTrue(s1.contains(myReferenceData));
  assertTrue(s1.contains(myOtherReferenceData));
  s2.evict(myReferenceData);
  s2.evict(myOtherReferenceData);
  assertFalse(s2.contains(myReferenceData));
  assertFalse(s2.contains(myOtherReferenceData));
  s2.getTransaction().commit();
  s2.close();
  assertTrue(s1.contains(myReferenceData));
  assertTrue(s1.contains(myOtherReferenceData));
  s1.clear();
  assertFalse(s1.contains(myReferenceData));
  assertFalse(s1.contains(myOtherReferenceData));
  s1.close();
  assertNotNull(myReferenceData.$$_hibernate_getEntityEntry());
  assertNotNull(myOtherReferenceData.$$_hibernate_getEntityEntry());
  s1=openSession();
  s1.getTransaction().begin();
  assertSame(myReferenceData,s1.get(MyEnhancedReferenceData.class,myReferenceData.getId()));
  assertSame(myOtherReferenceData,s1.get(MyEnhancedReferenceData.class,myOtherReferenceData.getId()));
  s2=openSession();
  s2.getTransaction().begin();
  assertSame(myReferenceData,s2.get(MyEnhancedReferenceData.class,myReferenceData.getId()));
  assertSame(myOtherReferenceData,s2.get(MyEnhancedReferenceData.class,myOtherReferenceData.getId()));
  assertEquals(Status.READ_ONLY,myReferenceData.$$_hibernate_getEntityEntry().getStatus());
  assertEquals(Status.READ_ONLY,myOtherReferenceData.$$_hibernate_getEntityEntry().getStatus());
  s1.delete(myReferenceData);
  assertEquals(Status.DELETED,myReferenceData.$$_hibernate_getEntityEntry().getStatus());
  assertEquals(Status.READ_ONLY,myOtherReferenceData.$$_hibernate_getEntityEntry().getStatus());
  s2.delete(myOtherReferenceData);
  assertEquals(Status.DELETED,myReferenceData.$$_hibernate_getEntityEntry().getStatus());
  assertEquals(Status.DELETED,myOtherReferenceData.$$_hibernate_getEntityEntry().getStatus());
  s1.getTransaction().commit();
  s1.close();
  assertEquals(Status.GONE,myReferenceData.$$_hibernate_getEntityEntry().getStatus());
  assertEquals(Status.DELETED,myOtherReferenceData.$$_hibernate_getEntityEntry().getStatus());
  s2.getTransaction().commit();
  s2.close();
  assertEquals(Status.GONE,myReferenceData.$$_hibernate_getEntityEntry().getStatus());
  assertEquals(Status.GONE,myOtherReferenceData.$$_hibernate_getEntityEntry().getStatus());
}
