{
  reader=getReader(Entity1.class,"field1","one-to-one.orm7.xml");
  assertAnnotationPresent(OneToOne.class);
  assertAnnotationNotPresent(PrimaryKeyJoinColumn.class);
  assertAnnotationNotPresent(PrimaryKeyJoinColumns.class);
  assertAnnotationPresent(JoinTable.class);
  assertAnnotationNotPresent(JoinColumns.class);
  assertAnnotationNotPresent(JoinColumn.class);
  JoinTable joinTableAnno=reader.getAnnotation(JoinTable.class);
  assertEquals("cat1",joinTableAnno.catalog());
  assertEquals("table1",joinTableAnno.name());
  assertEquals("schema1",joinTableAnno.schema());
  JoinColumn[] joinColumns=joinTableAnno.joinColumns();
  assertEquals(2,joinColumns.length);
  assertEquals("",joinColumns[0].name());
  assertEquals("",joinColumns[0].referencedColumnName());
  assertEquals("",joinColumns[0].table());
  assertEquals("",joinColumns[0].columnDefinition());
  assertTrue(joinColumns[0].insertable());
  assertTrue(joinColumns[0].updatable());
  assertTrue(joinColumns[0].nullable());
  assertFalse(joinColumns[0].unique());
  assertEquals("col1",joinColumns[1].name());
  assertEquals("col2",joinColumns[1].referencedColumnName());
  assertEquals("table2",joinColumns[1].table());
  assertEquals("int",joinColumns[1].columnDefinition());
  assertFalse(joinColumns[1].insertable());
  assertFalse(joinColumns[1].updatable());
  assertFalse(joinColumns[1].nullable());
  assertTrue(joinColumns[1].unique());
  JoinColumn[] inverseJoinColumns=joinTableAnno.inverseJoinColumns();
  assertEquals(2,inverseJoinColumns.length);
  assertEquals("",inverseJoinColumns[0].name());
  assertEquals("",inverseJoinColumns[0].referencedColumnName());
  assertEquals("",inverseJoinColumns[0].table());
  assertEquals("",inverseJoinColumns[0].columnDefinition());
  assertTrue(inverseJoinColumns[0].insertable());
  assertTrue(inverseJoinColumns[0].updatable());
  assertTrue(inverseJoinColumns[0].nullable());
  assertFalse(inverseJoinColumns[0].unique());
  assertEquals("col3",inverseJoinColumns[1].name());
  assertEquals("col4",inverseJoinColumns[1].referencedColumnName());
  assertEquals("table3",inverseJoinColumns[1].table());
  assertEquals("int",inverseJoinColumns[1].columnDefinition());
  assertFalse(inverseJoinColumns[1].insertable());
  assertFalse(inverseJoinColumns[1].updatable());
  assertFalse(inverseJoinColumns[1].nullable());
  assertTrue(inverseJoinColumns[1].unique());
  UniqueConstraint[] uniqueConstraints=joinTableAnno.uniqueConstraints();
  assertEquals(2,uniqueConstraints.length);
  assertEquals(1,uniqueConstraints[0].columnNames().length);
  assertEquals("col5",uniqueConstraints[0].columnNames()[0]);
  assertEquals(2,uniqueConstraints[1].columnNames().length);
  assertEquals("col6",uniqueConstraints[1].columnNames()[0]);
  assertEquals("col7",uniqueConstraints[1].columnNames()[1]);
}
