{
  final Map<Identifier,ForeignKeyBuilder> fkBuilders=new HashMap<>();
  final QualifiedTableName tableName=tableInformation.getName();
  final Identifier catalog=tableName.getCatalogName();
  final Identifier schema=tableName.getSchemaName();
  final String catalogFilter;
  final String schemaFilter;
  if (catalog == null) {
    catalogFilter="";
  }
 else {
    catalogFilter=catalog.getText();
  }
  if (schema == null) {
    schemaFilter="";
  }
 else {
    schemaFilter=schema.getText();
  }
  try {
    ResultSet resultSet=extractionContext.getJdbcDatabaseMetaData().getImportedKeys(catalogFilter,schemaFilter,tableInformation.getName().getTableName().getText());
    try {
      while (resultSet.next()) {
        final Identifier fkIdentifier=DatabaseIdentifier.toIdentifier(resultSet.getString("FK_NAME"));
        ForeignKeyBuilder fkBuilder=fkBuilders.get(fkIdentifier);
        if (fkBuilder == null) {
          fkBuilder=generateForeignKeyBuilder(fkIdentifier);
          fkBuilders.put(fkIdentifier,fkBuilder);
        }
        final QualifiedTableName incomingPkTableName=extractKeyTableName(resultSet,"PK");
        final TableInformation pkTableInformation=extractionContext.getDatabaseObjectAccess().locateTableInformation(incomingPkTableName);
        if (pkTableInformation == null) {
          continue;
        }
        final Identifier fkColumnIdentifier=DatabaseIdentifier.toIdentifier(resultSet.getString("FKCOLUMN_NAME"));
        final Identifier pkColumnIdentifier=DatabaseIdentifier.toIdentifier(resultSet.getString("PKCOLUMN_NAME"));
        fkBuilder.addColumnMapping(tableInformation.getColumn(fkColumnIdentifier),pkTableInformation.getColumn(pkColumnIdentifier));
      }
    }
  finally {
      resultSet.close();
    }
  }
 catch (  SQLException e) {
    throw convertSQLException(e,"Error accessing column metadata: " + tableInformation.getName().toString());
  }
  final List<ForeignKeyInformation> fks=new ArrayList<ForeignKeyInformation>();
  for (  ForeignKeyBuilder fkBuilder : fkBuilders.values()) {
    ForeignKeyInformation fk=fkBuilder.build();
    fks.add(fk);
  }
  return fks;
}
