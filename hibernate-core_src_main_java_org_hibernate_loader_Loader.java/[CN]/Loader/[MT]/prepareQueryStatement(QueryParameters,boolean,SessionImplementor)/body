{
  queryParameters.processFilters(getSQLString(),session);
  String sql=queryParameters.getFilteredSQL();
  final Dialect dialect=getFactory().getDialect();
  final RowSelection selection=queryParameters.getRowSelection();
  boolean useLimit=useLimit(selection,dialect);
  boolean hasFirstRow=getFirstRow(selection) > 0;
  boolean useLimitOffset=hasFirstRow && useLimit && dialect.supportsLimitOffset();
  boolean callable=queryParameters.isCallable();
  final boolean canScroll=getFactory().getSettings().isScrollableResultSetsEnabled();
  final boolean useScrollableResultSetToSkip=hasFirstRow && !useLimitOffset && canScroll;
  ScrollMode scrollMode=getScrollMode(scroll,queryParameters,hasFirstRow,useLimit);
  if (useLimit) {
    sql=dialect.getLimitString(sql.trim(),useLimitOffset ? getFirstRow(selection) : 0,getMaxOrLimit(selection,dialect));
  }
  sql=preprocessSQL(sql,queryParameters,dialect);
  PreparedStatement st=null;
  st=session.getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().prepareQueryStatement(sql,callable,scrollMode);
  try {
    int col=1;
    if (useLimit && dialect.bindLimitParametersFirst()) {
      col+=bindLimitParameters(st,col,selection);
    }
    if (callable) {
      col=dialect.registerResultSetOutParameter((CallableStatement)st,col);
    }
    col+=bindParameterValues(st,queryParameters,col,session);
    if (useLimit && !dialect.bindLimitParametersFirst()) {
      col+=bindLimitParameters(st,col,selection);
    }
    if (!useLimit) {
      setMaxRows(st,selection);
    }
    if (selection != null) {
      if (selection.getTimeout() != null) {
        st.setQueryTimeout(selection.getTimeout().intValue());
      }
      if (selection.getFetchSize() != null) {
        st.setFetchSize(selection.getFetchSize().intValue());
      }
    }
    LockOptions lockOptions=queryParameters.getLockOptions();
    if (lockOptions != null) {
      if (lockOptions.getTimeOut() != LockOptions.WAIT_FOREVER) {
        if (!dialect.supportsLockTimeouts())         LOG.debugf("Lock timeout [%s] requested but dialect reported to not support lock timeouts",lockOptions.getTimeOut());
 else         if (dialect.isLockTimeoutParameterized())         st.setInt(col++,lockOptions.getTimeOut());
      }
    }
    LOG.trace("Bound [" + col + "] parameters total");
  }
 catch (  SQLException sqle) {
    st.close();
    throw sqle;
  }
catch (  HibernateException he) {
    st.close();
    throw he;
  }
  return st;
}
