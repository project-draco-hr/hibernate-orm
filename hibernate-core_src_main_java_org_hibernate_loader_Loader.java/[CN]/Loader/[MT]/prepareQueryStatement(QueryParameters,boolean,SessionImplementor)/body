{
  queryParameters.processFilters(getSQLString(),session);
  String sql=queryParameters.getFilteredSQL();
  final Dialect dialect=getFactory().getDialect();
  final RowSelection selection=queryParameters.getRowSelection();
  boolean useLimit=useLimit(selection,dialect);
  boolean hasFirstRow=getFirstRow(selection) > 0;
  boolean useOffset=hasFirstRow && useLimit && dialect.supportsLimitOffset();
  boolean callable=queryParameters.isCallable();
  boolean useScrollableResultSetToSkip=hasFirstRow && !useOffset && getFactory().getSettings().isScrollableResultSetsEnabled();
  ScrollMode scrollMode=scroll ? queryParameters.getScrollMode() : ScrollMode.SCROLL_INSENSITIVE;
  if (useLimit) {
    sql=dialect.getLimitString(sql.trim(),useOffset ? getFirstRow(selection) : 0,getMaxOrLimit(selection,dialect));
  }
  sql=preprocessSQL(sql,queryParameters,dialect);
  PreparedStatement st=null;
  st=(scroll || useScrollableResultSetToSkip ? session.getJDBCContext().getConnectionManager().prepareScrollableQueryStatement(sql,scrollMode,callable) : session.getJDBCContext().getConnectionManager().prepareQueryStatement(sql,callable));
  try {
    int col=1;
    if (useLimit && dialect.bindLimitParametersFirst()) {
      col+=bindLimitParameters(st,col,selection);
    }
    if (callable) {
      col=dialect.registerResultSetOutParameter((CallableStatement)st,col);
    }
    col+=bindParameterValues(st,queryParameters,col,session);
    if (useLimit && !dialect.bindLimitParametersFirst()) {
      col+=bindLimitParameters(st,col,selection);
    }
    if (!useLimit) {
      setMaxRows(st,selection);
    }
    if (selection != null) {
      if (selection.getTimeout() != null) {
        st.setQueryTimeout(selection.getTimeout().intValue());
      }
      if (selection.getFetchSize() != null) {
        st.setFetchSize(selection.getFetchSize().intValue());
      }
    }
    LockOptions lockOptions=queryParameters.getLockOptions();
    if (lockOptions != null) {
      if (lockOptions.getTimeOut() != LockOptions.WAIT_FOREVER) {
        if (!dialect.supportsLockTimeouts()) {
          log.debug("Lock timeout [" + lockOptions.getTimeOut() + "] requested but dialect reported to not support lock timeouts");
        }
 else         if (dialect.isLockTimeoutParameterized()) {
          st.setInt(col++,lockOptions.getTimeOut());
        }
      }
    }
    log.trace("Bound [" + col + "] parameters total");
  }
 catch (  SQLException sqle) {
    st.close();
    throw sqle;
  }
catch (  HibernateException he) {
    st.close();
    throw he;
  }
  return st;
}
