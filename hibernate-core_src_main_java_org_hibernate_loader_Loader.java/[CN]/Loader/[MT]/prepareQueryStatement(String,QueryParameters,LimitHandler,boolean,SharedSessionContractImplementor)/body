{
  final Dialect dialect=getFactory().getDialect();
  final RowSelection selection=queryParameters.getRowSelection();
  final boolean useLimit=LimitHelper.useLimit(limitHandler,selection);
  final boolean hasFirstRow=LimitHelper.hasFirstRow(selection);
  final boolean useLimitOffset=hasFirstRow && useLimit && limitHandler.supportsLimitOffset();
  final boolean callable=queryParameters.isCallable();
  final ScrollMode scrollMode=getScrollMode(scroll,hasFirstRow,useLimitOffset,queryParameters);
  PreparedStatement st=session.getJdbcCoordinator().getStatementPreparer().prepareQueryStatement(sql,callable,scrollMode);
  try {
    int col=1;
    col+=limitHandler.bindLimitParametersAtStartOfQuery(selection,st,col);
    if (callable) {
      col=dialect.registerResultSetOutParameter((CallableStatement)st,col);
    }
    col+=bindParameterValues(st,queryParameters,col,session);
    col+=limitHandler.bindLimitParametersAtEndOfQuery(selection,st,col);
    limitHandler.setMaxRows(selection,st);
    if (selection != null) {
      if (selection.getTimeout() != null) {
        st.setQueryTimeout(selection.getTimeout());
      }
      if (selection.getFetchSize() != null) {
        st.setFetchSize(selection.getFetchSize());
      }
    }
    LockOptions lockOptions=queryParameters.getLockOptions();
    if (lockOptions != null) {
      if (lockOptions.getTimeOut() != LockOptions.WAIT_FOREVER) {
        if (!dialect.supportsLockTimeouts()) {
          if (LOG.isDebugEnabled()) {
            LOG.debugf("Lock timeout [%s] requested but dialect reported to not support lock timeouts",lockOptions.getTimeOut());
          }
        }
 else         if (dialect.isLockTimeoutParameterized()) {
          st.setInt(col++,lockOptions.getTimeOut());
        }
      }
    }
    if (LOG.isTraceEnabled()) {
      LOG.tracev("Bound [{0}] parameters total",col);
    }
  }
 catch (  SQLException|HibernateException e) {
    session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(st);
    session.getJdbcCoordinator().afterStatementExecution();
    throw e;
  }
  return st;
}
