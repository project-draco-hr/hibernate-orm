{
  final String instanceClass=getInstanceClass(rs,i,persister,key.getIdentifier(),session);
  if (persister.canUseReferenceCacheEntries()) {
    final Object cachedEntry=CacheHelper.fromSharedCache(session,session.generateCacheKey(key.getIdentifier(),persister.getEntityMetamodel().getEntityType(),key.getEntityName()),persister.getCacheAccessStrategy());
    if (cachedEntry != null) {
      CacheEntry entry=(CacheEntry)persister.getCacheEntryStructure().destructure(cachedEntry,factory);
      return ((ReferenceCacheEntryImpl)entry).getReference();
    }
  }
  final Object object;
  if (optionalObjectKey != null && key.equals(optionalObjectKey)) {
    object=optionalObject;
  }
 else {
    object=session.instantiate(instanceClass,key.getIdentifier());
  }
  LockMode acquiredLockMode=lockMode == LockMode.NONE ? LockMode.READ : lockMode;
  loadFromResultSet(rs,i,object,instanceClass,key,rowIdAlias,acquiredLockMode,persister,session);
  hydratedObjects.add(object);
  return object;
}
