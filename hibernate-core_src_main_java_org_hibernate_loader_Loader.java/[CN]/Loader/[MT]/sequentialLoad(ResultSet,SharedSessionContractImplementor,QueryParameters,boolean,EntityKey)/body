{
  final int entitySpan=getEntityPersisters().length;
  final List hydratedObjects=entitySpan == 0 ? null : new ArrayList(entitySpan);
  Object result=null;
  final EntityKey[] loadedKeys=new EntityKey[entitySpan];
  try {
    do {
      Object loaded=getRowFromResultSet(resultSet,session,queryParameters,getLockModes(queryParameters.getLockOptions()),null,hydratedObjects,loadedKeys,returnProxies);
      if (!keyToRead.equals(loadedKeys[0])) {
        throw new AssertionFailure(String.format("Unexpected key read for row; expected [%s]; actual [%s]",keyToRead,loadedKeys[0]));
      }
      if (result == null) {
        result=loaded;
      }
    }
 while (resultSet.next() && isCurrentRowForSameEntity(keyToRead,0,resultSet,session));
  }
 catch (  SQLException sqle) {
    throw factory.getJdbcServices().getSqlExceptionHelper().convert(sqle,"could not doAfterTransactionCompletion sequential read of results (forward)",getSQLString());
  }
  initializeEntitiesAndCollections(hydratedObjects,resultSet,session,queryParameters.isReadOnly(session));
  session.getPersistenceContext().initializeNonLazyCollections();
  return result;
}
