{
  Map errors=new HashMap();
  LOG.debugf("Checking %s named HQL queries",namedQueries.size());
  Iterator itr=namedQueries.entrySet().iterator();
  while (itr.hasNext()) {
    final Map.Entry entry=(Map.Entry)itr.next();
    final String queryName=(String)entry.getKey();
    final NamedQueryDefinition qd=(NamedQueryDefinition)entry.getValue();
    try {
      LOG.debugf("Checking named query: %s",queryName);
      queryPlanCache.getHQLQueryPlan(qd.getQueryString(),false,CollectionHelper.EMPTY_MAP);
    }
 catch (    QueryException e) {
      errors.put(queryName,e);
    }
catch (    MappingException e) {
      errors.put(queryName,e);
    }
  }
  LOG.debugf("Checking %s named SQL queries",namedSqlQueries.size());
  itr=namedSqlQueries.entrySet().iterator();
  while (itr.hasNext()) {
    final Map.Entry entry=(Map.Entry)itr.next();
    final String queryName=(String)entry.getKey();
    final NamedSQLQueryDefinition qd=(NamedSQLQueryDefinition)entry.getValue();
    try {
      LOG.debugf("Checking named SQL query: %s",queryName);
      NativeSQLQuerySpecification spec;
      if (qd.getResultSetRef() != null) {
        ResultSetMappingDefinition definition=(ResultSetMappingDefinition)sqlResultSetMappings.get(qd.getResultSetRef());
        if (definition == null) {
          throw new MappingException("Unable to find resultset-ref definition: " + qd.getResultSetRef());
        }
        spec=new NativeSQLQuerySpecification(qd.getQueryString(),definition.getQueryReturns(),qd.getQuerySpaces());
      }
 else {
        spec=new NativeSQLQuerySpecification(qd.getQueryString(),qd.getQueryReturns(),qd.getQuerySpaces());
      }
      queryPlanCache.getNativeSQLQueryPlan(spec);
    }
 catch (    QueryException e) {
      errors.put(queryName,e);
    }
catch (    MappingException e) {
      errors.put(queryName,e);
    }
  }
  return errors;
}
