{
  final Serializable id=entityKey.getIdentifier();
  final Loadable persister=(Loadable)getSession().getFactory().getEntityPersister(concreteEntityTypeName);
  if (LOG.isTraceEnabled()) {
    LOG.tracev("Initializing object from ResultSet: {0}",MessageHelper.infoString(persister,id,getSession().getFactory()));
  }
  TwoPhaseLoad.addUninitializedEntity(entityKey,entityInstance,persister,acquiredLockMode,!forceFetchLazyAttributes,session);
  final String[][] cols=persister == rootPersister ? entityAliases.getSuffixedPropertyAliases() : entityAliases.getSuffixedPropertyAliases(persister);
  final Object[] values;
  try {
    values=persister.hydrate(resultSet,id,entityInstance,(Loadable)rootPersister,cols,loadPlan.areLazyAttributesForceFetched(),session);
  }
 catch (  SQLException e) {
    throw getSession().getFactory().getJdbcServices().getSqlExceptionHelper().convert(e,"Could not read entity state from ResultSet : " + entityKey);
  }
  final Object rowId;
  try {
    rowId=persister.hasRowId() ? resultSet.getObject(entityAliases.getRowIdAlias()) : null;
  }
 catch (  SQLException e) {
    throw getSession().getFactory().getJdbcServices().getSqlExceptionHelper().convert(e,"Could not read entity row-id from ResultSet : " + entityKey);
  }
  if (associationType != null) {
    String ukName=associationType.getRHSUniqueKeyPropertyName();
    if (ukName != null) {
      final int index=((UniqueKeyLoadable)persister).getPropertyIndex(ukName);
      final Type type=persister.getPropertyTypes()[index];
      EntityUniqueKey euk=new EntityUniqueKey(rootPersister.getEntityName(),ukName,type.semiResolve(values[index],session,entityInstance),type,persister.getEntityMode(),session.getFactory());
      session.getPersistenceContext().addEntity(euk,entityInstance);
    }
  }
  TwoPhaseLoad.postHydrate(persister,id,values,rowId,entityInstance,acquiredLockMode,!loadPlan.areLazyAttributesForceFetched(),session);
}
