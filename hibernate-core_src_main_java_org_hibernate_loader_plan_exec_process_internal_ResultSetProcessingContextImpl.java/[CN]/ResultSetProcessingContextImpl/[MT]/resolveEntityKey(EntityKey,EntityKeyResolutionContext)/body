{
  final Object existing=getSession().getEntityUsingInterceptor(entityKey);
  if (existing != null) {
    if (!entityKeyContext.getEntityPersister().isInstance(existing)) {
      throw new WrongClassException("loaded object was of wrong class " + existing.getClass(),entityKey.getIdentifier(),entityKeyContext.getEntityPersister().getEntityName());
    }
    final LockMode requestedLockMode=entityKeyContext.getLockMode() == null ? LockMode.NONE : entityKeyContext.getLockMode();
    if (requestedLockMode != LockMode.NONE) {
      final LockMode currentLockMode=getSession().getPersistenceContext().getEntry(existing).getLockMode();
      final boolean isVersionCheckNeeded=entityKeyContext.getEntityPersister().isVersioned() && currentLockMode.lessThan(requestedLockMode);
      if (isVersionCheckNeeded) {
        checkVersion(resultSet,entityKeyContext.getEntityPersister(),aliasResolutionContext.resolveAliases(entityKeyContext.getEntityReference()).getColumnAliases(),entityKey,existing);
        getSession().getPersistenceContext().getEntry(existing).setLockMode(requestedLockMode);
      }
    }
    return existing;
  }
 else {
    final String concreteEntityTypeName=getConcreteEntityTypeName(resultSet,entityKeyContext.getEntityPersister(),aliasResolutionContext.resolveAliases(entityKeyContext.getEntityReference()).getColumnAliases(),entityKey);
    final Object entityInstance;
    entityInstance=session.instantiate(concreteEntityTypeName,entityKey.getIdentifier());
    FetchStrategy fetchStrategy=null;
    final EntityReference entityReference=entityKeyContext.getEntityReference();
    if (EntityFetch.class.isInstance(entityReference)) {
      final EntityFetch fetch=(EntityFetch)entityReference;
      fetchStrategy=fetch.getFetchStrategy();
    }
    final LockMode requestedLockMode=entityKeyContext.getLockMode() == null ? LockMode.NONE : entityKeyContext.getLockMode();
    final LockMode acquiredLockMode=requestedLockMode == LockMode.NONE ? LockMode.READ : requestedLockMode;
    loadFromResultSet(resultSet,entityInstance,concreteEntityTypeName,entityKey,aliasResolutionContext.resolveAliases(entityKeyContext.getEntityReference()).getColumnAliases(),acquiredLockMode,entityKeyContext.getEntityPersister(),fetchStrategy,true,entityKeyContext.getEntityPersister().getEntityMetamodel().getEntityType());
    registerHydratedEntity(entityKeyContext.getEntityReference(),entityKey,entityInstance);
    return entityInstance;
  }
}
