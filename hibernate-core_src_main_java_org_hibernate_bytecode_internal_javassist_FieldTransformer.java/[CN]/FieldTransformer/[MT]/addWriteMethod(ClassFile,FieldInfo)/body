{
  final ConstPool constPool=classfile.getConstPool();
  final int thisClassInfo=constPool.getThisClassInfo();
  final String writeMethodDescriptor="(" + finfo.getDescriptor() + ")V";
  final MethodInfo writeMethodInfo=new MethodInfo(constPool,EACH_WRITE_METHOD_PREFIX + finfo.getName(),writeMethodDescriptor);
  final Bytecode code=new Bytecode(constPool,6,3);
  code.addAload(0);
  final int enabledClassIndex=constPool.addClassInfo(FIELD_HANDLED_TYPE_NAME);
  code.addInvokeinterface(enabledClassIndex,GETFIELDHANDLER_METHOD_NAME,GETFIELDHANDLER_METHOD_DESCRIPTOR,1);
  code.addOpcode(Opcode.IFNONNULL);
  code.addIndex(9);
  code.addAload(0);
  addTypeDependDataLoad(code,finfo.getDescriptor(),1);
  code.addOpcode(Opcode.PUTFIELD);
  final int baseFieldIndex=constPool.addFieldrefInfo(thisClassInfo,finfo.getName(),finfo.getDescriptor());
  code.addIndex(baseFieldIndex);
  code.growStack(-Descriptor.dataSize(finfo.getDescriptor()));
  code.addOpcode(Opcode.RETURN);
  code.addAload(0);
  code.addOpcode(Opcode.DUP);
  code.addInvokeinterface(enabledClassIndex,GETFIELDHANDLER_METHOD_NAME,GETFIELDHANDLER_METHOD_DESCRIPTOR,1);
  code.addAload(0);
  code.addLdc(finfo.getName());
  code.addAload(0);
  code.addOpcode(Opcode.GETFIELD);
  code.addIndex(baseFieldIndex);
  code.growStack(Descriptor.dataSize(finfo.getDescriptor()) - 1);
  addTypeDependDataLoad(code,finfo.getDescriptor(),1);
  addInvokeFieldHandlerMethod(classfile,code,finfo.getDescriptor(),false);
  code.addOpcode(Opcode.PUTFIELD);
  code.addIndex(baseFieldIndex);
  code.growStack(-Descriptor.dataSize(finfo.getDescriptor()));
  code.addOpcode(Opcode.RETURN);
  writeMethodInfo.setCodeAttribute(code.toCodeAttribute());
  writeMethodInfo.setAccessFlags(AccessFlag.PUBLIC);
  final CodeAttribute codeAttribute=writeMethodInfo.getCodeAttribute();
  if (codeAttribute != null) {
    final StackMapTable smt=MapMaker.make(classPool,writeMethodInfo);
    codeAttribute.setAttribute(smt);
  }
  classfile.addMethod(writeMethodInfo);
}
