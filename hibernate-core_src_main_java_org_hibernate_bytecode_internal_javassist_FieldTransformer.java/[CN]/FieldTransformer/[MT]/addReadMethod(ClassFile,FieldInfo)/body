{
  ConstPool cp=classfile.getConstPool();
  int this_class_index=cp.getThisClassInfo();
  String desc="()" + finfo.getDescriptor();
  MethodInfo minfo=new MethodInfo(cp,EACH_READ_METHOD_PREFIX + finfo.getName(),desc);
  Bytecode code=new Bytecode(cp,5,3);
  code.addAload(0);
  code.addOpcode(Opcode.GETFIELD);
  int base_field_index=cp.addFieldrefInfo(this_class_index,finfo.getName(),finfo.getDescriptor());
  code.addIndex(base_field_index);
  code.addAload(0);
  int enabled_class_index=cp.addClassInfo(FIELD_HANDLED_TYPE_NAME);
  code.addInvokeinterface(enabled_class_index,GETFIELDHANDLER_METHOD_NAME,GETFIELDHANDLER_METHOD_DESCRIPTOR,1);
  code.addOpcode(Opcode.IFNONNULL);
  code.addIndex(4);
  addTypeDependDataReturn(code,finfo.getDescriptor());
  addTypeDependDataStore(code,finfo.getDescriptor(),1);
  code.addAload(0);
  code.addInvokeinterface(enabled_class_index,GETFIELDHANDLER_METHOD_NAME,GETFIELDHANDLER_METHOD_DESCRIPTOR,1);
  code.addAload(0);
  code.addLdc(finfo.getName());
  addTypeDependDataLoad(code,finfo.getDescriptor(),1);
  addInvokeFieldHandlerMethod(classfile,code,finfo.getDescriptor(),true);
  addTypeDependDataReturn(code,finfo.getDescriptor());
  minfo.setCodeAttribute(code.toCodeAttribute());
  minfo.setAccessFlags(AccessFlag.PUBLIC);
  StackMapTable smt=MapMaker.make(ClassPool.getDefault(),minfo);
  minfo.getCodeAttribute().setAttribute(smt);
  classfile.addMethod(minfo);
}
