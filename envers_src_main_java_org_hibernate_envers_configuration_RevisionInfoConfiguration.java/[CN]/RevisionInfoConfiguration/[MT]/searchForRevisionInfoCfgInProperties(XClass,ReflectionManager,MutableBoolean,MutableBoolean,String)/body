{
  for (  XProperty property : clazz.getDeclaredProperties(accessType)) {
    RevisionNumber revisionNumber=property.getAnnotation(RevisionNumber.class);
    RevisionTimestamp revisionTimestamp=property.getAnnotation(RevisionTimestamp.class);
    if (revisionNumber != null) {
      if (revisionNumberFound.isSet()) {
        throw new MappingException("Only one property may be annotated with @RevisionNumber!");
      }
      XClass revisionNumberClass=property.getType();
      if (reflectionManager.equals(revisionNumberClass,Integer.class) || reflectionManager.equals(revisionNumberClass,Integer.TYPE)) {
        revisionInfoIdName=property.getName();
        revisionNumberFound.set();
      }
 else       if (reflectionManager.equals(revisionNumberClass,Long.class) || reflectionManager.equals(revisionNumberClass,Long.TYPE)) {
        revisionInfoIdName=property.getName();
        revisionNumberFound.set();
        revisionPropType="long";
      }
 else {
        throw new MappingException("The field annotated with @RevisionNumber must be of type " + "int, Integer, long or Long");
      }
    }
    if (revisionTimestamp != null) {
      if (revisionTimestampFound.isSet()) {
        throw new MappingException("Only one property may be annotated with @RevisionTimestamp!");
      }
      XClass revisionTimestampClass=property.getType();
      if (reflectionManager.equals(revisionTimestampClass,Long.class) || reflectionManager.equals(revisionTimestampClass,Long.TYPE)) {
        revisionInfoTimestampName=property.getName();
        revisionTimestampFound.set();
      }
 else {
        throw new MappingException("The field annotated with @RevisionTimestamp must be of type " + "long or Long");
      }
    }
  }
}
