{
  CriteriaExecutor criteriaExecutor=new CriteriaExecutor(){
    protected Criteria getCriteria(    Session s){
      return s.createCriteria(Enrolment.class,"e").createAlias("e.student","s",Criteria.LEFT_JOIN).setFetchMode("student",FetchMode.JOIN).setFetchMode("student.preferredCourse",FetchMode.JOIN).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("e.student"))).addOrder(Order.asc("s.studentNumber"));
    }
  }
;
  HqlExecutor hqlExecutor=new HqlExecutor(){
    public Query getQuery(    Session s){
      return s.createQuery("select s.name, s from Enrolment e left join e.student s left join fetch s.preferredCourse order by s.studentNumber");
    }
  }
;
  ResultChecker checker=new ResultChecker(){
    public void check(    Object results){
      List resultList=(List)results;
      assertEquals(2,resultList.size());
      Object[] yogiObjects=(Object[])resultList.get(0);
      Object[] shermanObjects=(Object[])resultList.get(1);
      assertEquals(yogiExpected.getName(),yogiObjects[0]);
      assertEquals(shermanExpected.getName(),shermanObjects[0]);
      assertEquals(yogiExpected.getStudentNumber(),((Student)yogiObjects[1]).getStudentNumber());
      assertEquals(shermanExpected.getStudentNumber(),((Student)shermanObjects[1]).getStudentNumber());
      if (areDynamicNonLazyAssociationsChecked()) {
      }
    }
  }
;
  runTest(hqlExecutor,criteriaExecutor,checker,false);
}
