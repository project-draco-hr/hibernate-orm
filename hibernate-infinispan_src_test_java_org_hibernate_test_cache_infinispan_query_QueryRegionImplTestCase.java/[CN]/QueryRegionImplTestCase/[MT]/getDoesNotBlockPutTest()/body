{
  StandardServiceRegistryBuilder ssrb=createStandardServiceRegistryBuilder();
  StandardServiceRegistry registry=ssrb.build();
  try {
    final Properties properties=CacheTestUtil.toProperties(ssrb.getSettings());
    InfinispanRegionFactory regionFactory=CacheTestUtil.startRegionFactory(registry,getCacheTestSupport());
    avoidConcurrentFlush();
    final QueryResultsRegion region=regionFactory.buildQueryResultsRegion(getStandardRegionName(REGION_PREFIX),properties);
    region.put(null,KEY,VALUE1);
    assertEquals(VALUE1,region.get(null,KEY));
    final AdvancedCache jbc=getInfinispanCache(regionFactory);
    final CountDownLatch blockerLatch=new CountDownLatch(1);
    final CountDownLatch writerLatch=new CountDownLatch(1);
    final CountDownLatch completionLatch=new CountDownLatch(1);
    final ExceptionHolder holder=new ExceptionHolder();
    Thread blocker=new Thread(){
      @Override public void run(){
        GetBlocker blocker=new GetBlocker(blockerLatch,KEY);
        try {
          jbc.addListener(blocker);
          BatchModeTransactionManager.getInstance().begin();
          region.get(null,KEY);
          BatchModeTransactionManager.getInstance().commit();
        }
 catch (        Exception e) {
          holder.e1=e;
          rollback();
        }
 finally {
          jbc.removeListener(blocker);
        }
      }
    }
;
    Thread writer=new Thread(){
      @Override public void run(){
        try {
          writerLatch.await();
          BatchModeTransactionManager.getInstance().begin();
          region.put(null,KEY,VALUE2);
          BatchModeTransactionManager.getInstance().commit();
        }
 catch (        Exception e) {
          holder.e2=e;
          rollback();
        }
 finally {
          completionLatch.countDown();
        }
      }
    }
;
    blocker.setDaemon(true);
    writer.setDaemon(true);
    boolean unblocked=false;
    try {
      blocker.start();
      writer.start();
      assertFalse("Blocker is blocking",completionLatch.await(100,TimeUnit.MILLISECONDS));
      writerLatch.countDown();
      assertTrue("Writer finished promptly",completionLatch.await(100,TimeUnit.MILLISECONDS));
      blockerLatch.countDown();
      unblocked=true;
      if (IsolationLevel.REPEATABLE_READ.equals(jbc.getCacheConfiguration().locking().isolationLevel())) {
        assertEquals(VALUE1,region.get(null,KEY));
      }
 else {
        assertEquals(VALUE2,region.get(null,KEY));
      }
      if (holder.a1 != null) {
        throw holder.a1;
      }
 else       if (holder.a2 != null) {
        throw holder.a2;
      }
      assertEquals("blocker saw no exceptions",null,holder.e1);
      assertEquals("writer saw no exceptions",null,holder.e2);
    }
  finally {
      if (!unblocked) {
        blockerLatch.countDown();
      }
    }
  }
  finally {
    StandardServiceRegistryBuilder.destroy(registry);
  }
}
