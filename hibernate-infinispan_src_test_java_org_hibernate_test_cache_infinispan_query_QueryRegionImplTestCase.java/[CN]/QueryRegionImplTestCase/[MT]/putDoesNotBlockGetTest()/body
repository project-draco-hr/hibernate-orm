{
  StandardServiceRegistryBuilder ssrb=createStandardServiceRegistryBuilder();
  StandardServiceRegistry registry=ssrb.build();
  try {
    final Properties properties=CacheTestUtil.toProperties(ssrb.getSettings());
    InfinispanRegionFactory regionFactory=CacheTestUtil.startRegionFactory(registry,getCacheTestSupport());
    avoidConcurrentFlush();
    final QueryResultsRegion region=regionFactory.buildQueryResultsRegion(getStandardRegionName(REGION_PREFIX),properties);
    region.put(null,KEY,VALUE1);
    assertEquals(VALUE1,region.get(null,KEY));
    final CountDownLatch readerLatch=new CountDownLatch(1);
    final CountDownLatch writerLatch=new CountDownLatch(1);
    final CountDownLatch completionLatch=new CountDownLatch(1);
    final ExceptionHolder holder=new ExceptionHolder();
    Thread reader=new Thread(){
      @Override public void run(){
        try {
          BatchModeTransactionManager.getInstance().begin();
          log.debug("Transaction began, get value for key");
          assertTrue(VALUE2.equals(region.get(null,KEY)) == false);
          BatchModeTransactionManager.getInstance().commit();
        }
 catch (        AssertionFailedError e) {
          holder.a1=e;
          rollback();
        }
catch (        Exception e) {
          holder.e1=e;
          rollback();
        }
 finally {
          readerLatch.countDown();
        }
      }
    }
;
    Thread writer=new Thread(){
      @Override public void run(){
        try {
          BatchModeTransactionManager.getInstance().begin();
          log.debug("Put value2");
          region.put(null,KEY,VALUE2);
          log.debug("Put finished for value2, await writer latch");
          writerLatch.await();
          log.debug("Writer latch finished");
          BatchModeTransactionManager.getInstance().commit();
          log.debug("Transaction committed");
        }
 catch (        Exception e) {
          holder.e2=e;
          rollback();
        }
 finally {
          completionLatch.countDown();
        }
      }
    }
;
    reader.setDaemon(true);
    writer.setDaemon(true);
    writer.start();
    assertFalse("Writer is blocking",completionLatch.await(100,TimeUnit.MILLISECONDS));
    reader.start();
    assertTrue("Reader finished promptly",readerLatch.await(1000000000,TimeUnit.MILLISECONDS));
    writerLatch.countDown();
    assertTrue("Reader finished promptly",completionLatch.await(100,TimeUnit.MILLISECONDS));
    assertEquals(VALUE2,region.get(null,KEY));
    if (holder.a1 != null) {
      throw holder.a1;
    }
 else     if (holder.a2 != null) {
      throw holder.a2;
    }
    assertEquals("writer saw no exceptions",null,holder.e1);
    assertEquals("reader saw no exceptions",null,holder.e2);
  }
  finally {
    StandardServiceRegistryBuilder.destroy(registry);
  }
}
