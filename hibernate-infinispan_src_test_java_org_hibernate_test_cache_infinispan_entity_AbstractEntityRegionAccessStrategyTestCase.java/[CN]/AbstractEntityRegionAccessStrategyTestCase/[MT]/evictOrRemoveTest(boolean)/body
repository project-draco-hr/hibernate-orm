{
  final Object KEY=TestingKeyFactory.generateEntityCacheKey(KEY_BASE + testCount++);
  assertEquals(0,localEntityRegion.getCache().size());
  assertEquals(0,remoteEntityRegion.getCache().size());
  assertNull("local is clean",localAccessStrategy.get(localSession,KEY,System.currentTimeMillis()));
  assertNull("remote is clean",remoteAccessStrategy.get(remoteSession,KEY,System.currentTimeMillis()));
  localAccessStrategy.putFromLoad(localSession,KEY,VALUE1,System.currentTimeMillis(),new Integer(1));
  assertEquals(VALUE1,localAccessStrategy.get(localSession,KEY,System.currentTimeMillis()));
  remoteAccessStrategy.putFromLoad(remoteSession,KEY,VALUE1,System.currentTimeMillis(),new Integer(1));
  assertEquals(VALUE1,remoteAccessStrategy.get(remoteSession,KEY,System.currentTimeMillis()));
  Caches.withinTx(localEntityRegion.getTransactionManager(),new Callable<Void>(){
    @Override public Void call() throws Exception {
      if (evict) {
        localAccessStrategy.evict(KEY);
      }
 else {
        SoftLock softLock=localAccessStrategy.lockItem(localSession,KEY,null);
        localAccessStrategy.remove(localSession,KEY);
        localAccessStrategy.unlockItem(localSession,KEY,softLock);
      }
      return null;
    }
  }
);
  assertEquals(null,localAccessStrategy.get(localSession,KEY,System.currentTimeMillis()));
  assertEquals(0,localEntityRegion.getCache().size());
  assertEquals(null,remoteAccessStrategy.get(remoteSession,KEY,System.currentTimeMillis()));
  assertEquals(0,remoteEntityRegion.getCache().size());
}
