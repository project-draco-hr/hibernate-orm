{
  final Object KEY=TestingKeyFactory.generateEntityCacheKey(KEY_BASE + testCount++);
  assertEquals(0,localEntityRegion.getCache().size());
  assertEquals(0,remoteEntityRegion.getCache().size());
  assertNull("local is clean",localAccessStrategy.get(null,KEY,System.currentTimeMillis()));
  assertNull("remote is clean",remoteAccessStrategy.get(null,KEY,System.currentTimeMillis()));
  localAccessStrategy.putFromLoad(null,KEY,VALUE1,System.currentTimeMillis(),new Integer(1));
  assertEquals(VALUE1,localAccessStrategy.get(null,KEY,System.currentTimeMillis()));
  sleep(250);
  remoteAccessStrategy.putFromLoad(null,KEY,VALUE1,System.currentTimeMillis(),new Integer(1));
  assertEquals(VALUE1,remoteAccessStrategy.get(null,KEY,System.currentTimeMillis()));
  sleep(250);
  Caches.withinTx(localEntityRegion.getTransactionManager(),new Callable<Void>(){
    @Override public Void call() throws Exception {
      if (evict) {
        log.debug("Call evict all locally");
        localAccessStrategy.evictAll();
      }
 else {
        localAccessStrategy.removeAll();
      }
      return null;
    }
  }
);
  assertNull(localAccessStrategy.get(null,KEY,System.currentTimeMillis()));
  assertEquals(0,localEntityRegion.getCache().size());
  assertEquals(null,remoteAccessStrategy.get(null,KEY,System.currentTimeMillis()));
  assertEquals(0,remoteEntityRegion.getCache().size());
  remoteAccessStrategy.putFromLoad(null,KEY,VALUE1,System.currentTimeMillis(),new Integer(1));
  assertEquals(VALUE1,remoteAccessStrategy.get(null,KEY,System.currentTimeMillis()));
  assertEquals(1,remoteEntityRegion.getCache().size());
  sleep(250);
  assertEquals("local is correct",(isUsingInvalidation() ? null : VALUE1),localAccessStrategy.get(null,KEY,System.currentTimeMillis()));
  assertEquals("remote is correct",VALUE1,remoteAccessStrategy.get(null,KEY,System.currentTimeMillis()));
}
