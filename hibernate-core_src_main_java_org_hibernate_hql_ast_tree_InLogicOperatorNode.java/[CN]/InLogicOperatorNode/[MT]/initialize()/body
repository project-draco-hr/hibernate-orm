{
  Node lhs=getLeftHandOperand();
  if (lhs == null) {
    throw new SemanticException("left-hand operand of in operator was null");
  }
  Node inList=getInList();
  if (inList == null) {
    throw new SemanticException("right-hand operand of in operator was null");
  }
  if (SqlNode.class.isAssignableFrom(lhs.getClass())) {
    Type lhsType=((SqlNode)lhs).getDataType();
    AST inListChild=inList.getFirstChild();
    while (inListChild != null) {
      if (ExpectedTypeAwareNode.class.isAssignableFrom(inListChild.getClass())) {
        ((ExpectedTypeAwareNode)inListChild).setExpectedType(lhsType);
      }
      inListChild=inListChild.getNextSibling();
    }
  }
  SessionFactoryImplementor sessionFactory=getSessionFactoryHelper().getFactory();
  if (sessionFactory.getDialect().supportsRowValueConstructorSyntaxInInList())   return;
  Type lhsType=extractDataType(lhs);
  if (lhsType == null)   return;
  int lhsColumnSpan=lhsType.getColumnSpan(sessionFactory);
  Node rhsNode=(Node)inList.getFirstChild();
  if (!isNodeAcceptable(rhsNode))   return;
  int rhsColumnSpan=0;
  if (rhsNode.getType() == HqlTokenTypes.VECTOR_EXPR) {
    rhsColumnSpan=rhsNode.getNumberOfChildren();
  }
 else {
    Type rhsType=extractDataType(rhsNode);
    if (rhsType == null)     return;
    rhsColumnSpan=rhsType.getColumnSpan(sessionFactory);
  }
  if (lhsColumnSpan > 1 && rhsColumnSpan > 1) {
    mutateRowValueConstructorSyntaxInInListSyntax(lhsColumnSpan,rhsColumnSpan);
  }
}
