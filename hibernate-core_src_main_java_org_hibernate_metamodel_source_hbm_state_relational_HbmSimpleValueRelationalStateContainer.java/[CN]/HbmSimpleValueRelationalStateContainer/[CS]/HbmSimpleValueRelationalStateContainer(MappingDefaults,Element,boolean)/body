{
  super(propertyElement);
  this.defaults=defaults;
  this.propertyUniqueKeys=DomHelper.extractUniqueAttributeValueTokens(propertyElement,"unique-key",", ");
  this.propertyIndexes=DomHelper.extractUniqueAttributeValueTokens(propertyElement,"index",", ");
  final Attribute columnAttribute=getElement().attribute("column");
  if (columnAttribute == null) {
    final Iterator valueElements=getElement().elementIterator();
    while (valueElements.hasNext()) {
      final Element valueElement=(Element)valueElements.next();
      if ("column".equals(valueElement.getName())) {
        singleValueStates.add(new HbmColumnRelationalState(valueElement,this));
      }
 else       if ("formula".equals(valueElement.getName())) {
        singleValueStates.add(new HbmDerivedValueRelationalState(valueElement,this));
      }
    }
  }
 else {
    if (propertyElement.elementIterator("column").hasNext()) {
      throw new MappingException("column attribute may not be used together with <column> subelement");
    }
    if (propertyElement.elementIterator("formula").hasNext()) {
      throw new MappingException("column attribute may not be used together with <formula> subelement");
    }
    singleValueStates.add(new HbmColumnRelationalState(propertyElement,this));
  }
  if (singleValueStates.isEmpty() && autoColumnCreation) {
    singleValueStates.add(new HbmColumnRelationalState(propertyElement,this));
  }
}
