{
  super();
  try {
    Class props=ReflectHelper.classForName("org.hsqldb.persist.HsqlDatabaseProperties");
    String versionString=(String)props.getDeclaredField("THIS_VERSION").get(null);
    hsqldbVersion=Integer.parseInt(versionString.substring(0,1)) * 10;
    hsqldbVersion+=Integer.parseInt(versionString.substring(2,3));
  }
 catch (  Throwable e) {
  }
  registerColumnType(Types.BIGINT,"bigint");
  registerColumnType(Types.BINARY,"binary");
  registerColumnType(Types.BIT,"bit");
  registerColumnType(Types.CHAR,"char($l)");
  registerColumnType(Types.DATE,"date");
  registerColumnType(Types.DECIMAL,"decimal($p,$s)");
  registerColumnType(Types.DOUBLE,"double");
  registerColumnType(Types.FLOAT,"float");
  registerColumnType(Types.INTEGER,"integer");
  registerColumnType(Types.LONGVARBINARY,"longvarbinary");
  registerColumnType(Types.LONGVARCHAR,"longvarchar");
  registerColumnType(Types.SMALLINT,"smallint");
  registerColumnType(Types.TINYINT,"tinyint");
  registerColumnType(Types.TIME,"time");
  registerColumnType(Types.TIMESTAMP,"timestamp");
  registerColumnType(Types.VARCHAR,"varchar($l)");
  registerColumnType(Types.VARBINARY,"varbinary($l)");
  if (hsqldbVersion < 20) {
    registerColumnType(Types.NUMERIC,"numeric");
  }
 else {
    registerColumnType(Types.NUMERIC,"numeric($p,$s)");
  }
  if (hsqldbVersion < 20) {
    registerColumnType(Types.BLOB,"longvarbinary");
    registerColumnType(Types.CLOB,"longvarchar");
  }
 else {
    registerColumnType(Types.BLOB,"blob");
    registerColumnType(Types.CLOB,"clob");
  }
  registerFunction("avg",new AvgWithArgumentCastFunction("double"));
  registerFunction("ascii",new StandardSQLFunction("ascii",Hibernate.INTEGER));
  registerFunction("char",new StandardSQLFunction("char",Hibernate.CHARACTER));
  registerFunction("lower",new StandardSQLFunction("lower"));
  registerFunction("upper",new StandardSQLFunction("upper"));
  registerFunction("lcase",new StandardSQLFunction("lcase"));
  registerFunction("ucase",new StandardSQLFunction("ucase"));
  registerFunction("soundex",new StandardSQLFunction("soundex",Hibernate.STRING));
  registerFunction("ltrim",new StandardSQLFunction("ltrim"));
  registerFunction("rtrim",new StandardSQLFunction("rtrim"));
  registerFunction("reverse",new StandardSQLFunction("reverse"));
  registerFunction("space",new StandardSQLFunction("space",Hibernate.STRING));
  registerFunction("rawtohex",new StandardSQLFunction("rawtohex"));
  registerFunction("hextoraw",new StandardSQLFunction("hextoraw"));
  registerFunction("str",new SQLFunctionTemplate(Hibernate.STRING,"cast(?1 as varchar(24))"));
  registerFunction("user",new NoArgSQLFunction("user",Hibernate.STRING));
  registerFunction("database",new NoArgSQLFunction("database",Hibernate.STRING));
  registerFunction("sysdate",new NoArgSQLFunction("sysdate",Hibernate.DATE,false));
  registerFunction("current_date",new NoArgSQLFunction("current_date",Hibernate.DATE,false));
  registerFunction("curdate",new NoArgSQLFunction("curdate",Hibernate.DATE));
  registerFunction("current_timestamp",new NoArgSQLFunction("current_timestamp",Hibernate.TIMESTAMP,false));
  registerFunction("now",new NoArgSQLFunction("now",Hibernate.TIMESTAMP));
  registerFunction("current_time",new NoArgSQLFunction("current_time",Hibernate.TIME,false));
  registerFunction("curtime",new NoArgSQLFunction("curtime",Hibernate.TIME));
  registerFunction("day",new StandardSQLFunction("day",Hibernate.INTEGER));
  registerFunction("dayofweek",new StandardSQLFunction("dayofweek",Hibernate.INTEGER));
  registerFunction("dayofyear",new StandardSQLFunction("dayofyear",Hibernate.INTEGER));
  registerFunction("dayofmonth",new StandardSQLFunction("dayofmonth",Hibernate.INTEGER));
  registerFunction("month",new StandardSQLFunction("month",Hibernate.INTEGER));
  registerFunction("year",new StandardSQLFunction("year",Hibernate.INTEGER));
  registerFunction("week",new StandardSQLFunction("week",Hibernate.INTEGER));
  registerFunction("quarter",new StandardSQLFunction("quarter",Hibernate.INTEGER));
  registerFunction("hour",new StandardSQLFunction("hour",Hibernate.INTEGER));
  registerFunction("minute",new StandardSQLFunction("minute",Hibernate.INTEGER));
  registerFunction("second",new StandardSQLFunction("second",Hibernate.INTEGER));
  registerFunction("dayname",new StandardSQLFunction("dayname",Hibernate.STRING));
  registerFunction("monthname",new StandardSQLFunction("monthname",Hibernate.STRING));
  registerFunction("abs",new StandardSQLFunction("abs"));
  registerFunction("sign",new StandardSQLFunction("sign",Hibernate.INTEGER));
  registerFunction("acos",new StandardSQLFunction("acos",Hibernate.DOUBLE));
  registerFunction("asin",new StandardSQLFunction("asin",Hibernate.DOUBLE));
  registerFunction("atan",new StandardSQLFunction("atan",Hibernate.DOUBLE));
  registerFunction("cos",new StandardSQLFunction("cos",Hibernate.DOUBLE));
  registerFunction("cot",new StandardSQLFunction("cot",Hibernate.DOUBLE));
  registerFunction("exp",new StandardSQLFunction("exp",Hibernate.DOUBLE));
  registerFunction("log",new StandardSQLFunction("log",Hibernate.DOUBLE));
  registerFunction("log10",new StandardSQLFunction("log10",Hibernate.DOUBLE));
  registerFunction("sin",new StandardSQLFunction("sin",Hibernate.DOUBLE));
  registerFunction("sqrt",new StandardSQLFunction("sqrt",Hibernate.DOUBLE));
  registerFunction("tan",new StandardSQLFunction("tan",Hibernate.DOUBLE));
  registerFunction("pi",new NoArgSQLFunction("pi",Hibernate.DOUBLE));
  registerFunction("rand",new StandardSQLFunction("rand",Hibernate.FLOAT));
  registerFunction("radians",new StandardSQLFunction("radians",Hibernate.DOUBLE));
  registerFunction("degrees",new StandardSQLFunction("degrees",Hibernate.DOUBLE));
  registerFunction("roundmagic",new StandardSQLFunction("roundmagic"));
  registerFunction("ceiling",new StandardSQLFunction("ceiling"));
  registerFunction("floor",new StandardSQLFunction("floor"));
  registerFunction("mod",new StandardSQLFunction("mod",Hibernate.INTEGER));
  registerFunction("concat",new VarArgsSQLFunction(Hibernate.STRING,"(","||",")"));
  getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE,DEFAULT_BATCH_SIZE);
}
