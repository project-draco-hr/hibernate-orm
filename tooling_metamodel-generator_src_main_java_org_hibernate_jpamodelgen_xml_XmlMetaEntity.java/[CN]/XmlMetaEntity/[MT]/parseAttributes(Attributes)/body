{
  XmlMetaSingleAttribute attribute;
  if (!attributes.getId().isEmpty()) {
    Id id=attributes.getId().get(0);
    attribute=new XmlMetaSingleAttribute(this,id.getName(),getType(id.getName(),null));
    members.add(attribute);
  }
  for (  Basic basic : attributes.getBasic()) {
    attribute=new XmlMetaSingleAttribute(this,basic.getName(),getType(basic.getName(),null));
    members.add(attribute);
  }
  for (  ManyToOne manyToOne : attributes.getManyToOne()) {
    attribute=new XmlMetaSingleAttribute(this,manyToOne.getName(),getType(manyToOne.getName(),manyToOne.getTargetEntity()));
    members.add(attribute);
  }
  for (  OneToOne oneToOne : attributes.getOneToOne()) {
    attribute=new XmlMetaSingleAttribute(this,oneToOne.getName(),getType(oneToOne.getName(),oneToOne.getTargetEntity()));
    members.add(attribute);
  }
  XmlMetaCollection metaCollection;
  String[] types;
  for (  ManyToMany manyToMany : attributes.getManyToMany()) {
    try {
      types=getCollectionType(manyToMany.getName(),manyToMany.getTargetEntity());
    }
 catch (    MetaModelGenerationException e) {
      logMetaModelException(manyToMany.getName(),e);
      break;
    }
    metaCollection=new XmlMetaCollection(this,manyToMany.getName(),types[0],types[1]);
    members.add(metaCollection);
  }
  for (  OneToMany oneToMany : attributes.getOneToMany()) {
    try {
      types=getCollectionType(oneToMany.getName(),oneToMany.getTargetEntity());
    }
 catch (    MetaModelGenerationException e) {
      logMetaModelException(oneToMany.getName(),e);
      break;
    }
    metaCollection=new XmlMetaCollection(this,oneToMany.getName(),types[0],types[1]);
    members.add(metaCollection);
  }
  for (  ElementCollection collection : attributes.getElementCollection()) {
    try {
      types=getCollectionType(collection.getName(),collection.getTargetClass());
    }
 catch (    MetaModelGenerationException e) {
      logMetaModelException(collection.getName(),e);
      break;
    }
    metaCollection=new XmlMetaCollection(this,collection.getName(),types[0],types[1]);
    members.add(metaCollection);
  }
}
