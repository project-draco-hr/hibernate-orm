{
  Skip skip=Helper.locateAnnotation(Skip.class,frameworkMethod,getTestClass());
  if (skip != null) {
    if (isMatch(skip.condition())) {
      return buildIgnore(skip);
    }
  }
  SkipForDialect skipForDialectAnn=Helper.locateAnnotation(SkipForDialect.class,frameworkMethod,getTestClass());
  if (skipForDialectAnn != null) {
    for (    Class<? extends Dialect> dialectClass : skipForDialectAnn.value()) {
      if (skipForDialectAnn.strictMatching()) {
        if (dialectClass.equals(dialect.getClass())) {
          return buildIgnore(skipForDialectAnn);
        }
      }
 else {
        if (dialectClass.isInstance(dialect)) {
          return buildIgnore(skipForDialectAnn);
        }
      }
    }
  }
  RequiresDialect requiresDialectAnn=Helper.locateAnnotation(RequiresDialect.class,frameworkMethod,getTestClass());
  if (requiresDialectAnn != null) {
    boolean foundMatch=false;
    for (    Class<? extends Dialect> dialectClass : requiresDialectAnn.value()) {
      foundMatch=requiresDialectAnn.strictMatching() ? dialectClass.equals(dialect.getClass()) : dialectClass.isInstance(dialect);
      if (foundMatch) {
        break;
      }
    }
    if (!foundMatch) {
      return buildIgnore(requiresDialectAnn);
    }
  }
  RequiresDialectFeature requiresDialectFeatureAnn=Helper.locateAnnotation(RequiresDialectFeature.class,frameworkMethod,getTestClass());
  if (requiresDialectFeatureAnn != null) {
    try {
      boolean foundMatch=false;
      for (      Class<? extends DialectCheck> checkClass : requiresDialectFeatureAnn.value()) {
        foundMatch=checkClass.newInstance().isMatch(dialect);
        if (!foundMatch) {
          return buildIgnore(requiresDialectFeatureAnn);
        }
      }
    }
 catch (    RuntimeException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException("Unable to instantiate DialectCheck",e);
    }
  }
  return null;
}
