{
  ClassLoader newTempClassLoader=info.getNewTempClassLoader();
  if (newTempClassLoader == null) {
    log.warn("Persistence provider caller does not implement the EJB3 spec correctly. PersistenceUnitInfo.getNewTempClassLoader() is null.");
    return;
  }
  XMLHelper xmlHelper=new XMLHelper();
  List errors=new ArrayList();
  SAXReader saxReader=xmlHelper.createSAXReader("XML InputStream",errors,cfg.getEntityResolver());
  try {
    saxReader.setFeature("http://apache.org/xml/features/validation/schema",true);
    saxReader.setProperty("http://apache.org/xml/properties/schema/external-schemaLocation","http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd");
  }
 catch (  SAXException e) {
    saxReader.setValidation(false);
  }
  for (  String xmlFile : xmlFiles) {
    InputStream resourceAsStream=newTempClassLoader.getResourceAsStream(xmlFile);
    if (resourceAsStream == null)     continue;
    BufferedInputStream is=new BufferedInputStream(resourceAsStream);
    try {
      errors.clear();
      org.dom4j.Document doc=saxReader.read(is);
      if (errors.size() != 0) {
        throw new MappingException("invalid mapping: " + xmlFile,(Throwable)errors.get(0));
      }
      Element rootElement=doc.getRootElement();
      if (rootElement != null && "entity-mappings".equals(rootElement.getName())) {
        Element element=rootElement.element("package");
        String defaultPackage=element != null ? element.getTextTrim() : null;
        List<Element> elements=rootElement.elements("entity");
        for (        Element subelement : elements) {
          String classname=XMLContext.buildSafeClassName(subelement.attributeValue("class"),defaultPackage);
          if (!entities.contains(classname)) {
            entities.add(classname);
          }
        }
        elements=rootElement.elements("mapped-superclass");
        for (        Element subelement : elements) {
          String classname=XMLContext.buildSafeClassName(subelement.attributeValue("class"),defaultPackage);
          if (!entities.contains(classname)) {
            entities.add(classname);
          }
        }
        elements=rootElement.elements("embeddable");
        for (        Element subelement : elements) {
          String classname=XMLContext.buildSafeClassName(subelement.attributeValue("class"),defaultPackage);
          if (!entities.contains(classname)) {
            entities.add(classname);
          }
        }
      }
 else       if (rootElement != null && "hibernate-mappings".equals(rootElement.getName())) {
      }
    }
 catch (    DocumentException e) {
      throw new MappingException("Could not parse mapping document in input stream",e);
    }
 finally {
      try {
        is.close();
      }
 catch (      IOException ioe) {
        log.warn("Could not close input stream",ioe);
      }
    }
  }
}
