{
  String sql=this.sql;
  if (timeout == LockOptions.NO_WAIT) {
    sql=generateLockString(LockOptions.NO_WAIT);
  }
 else   if (timeout > 0) {
    sql=generateLockString(timeout);
  }
  SessionFactoryImplementor factory=session.getFactory();
  try {
    PreparedStatement st=session.getBatcher().prepareSelectStatement(sql);
    try {
      lockable.getIdentifierType().nullSafeSet(st,id,1,session);
      if (lockable.isVersioned()) {
        lockable.getVersionType().nullSafeSet(st,version,lockable.getIdentifierType().getColumnSpan(factory) + 1,session);
      }
      ResultSet rs=st.executeQuery();
      try {
        if (!rs.next()) {
          if (factory.getStatistics().isStatisticsEnabled()) {
            factory.getStatisticsImplementor().optimisticFailure(lockable.getEntityName());
          }
          throw new StaleObjectStateException(lockable.getEntityName(),id);
        }
      }
  finally {
        rs.close();
      }
    }
  finally {
      session.getBatcher().closeStatement(st);
    }
  }
 catch (  SQLException sqle) {
    JDBCException e=JDBCExceptionHelper.convert(session.getFactory().getSQLExceptionConverter(),sqle,"could not lock: " + MessageHelper.infoString(lockable,id,session.getFactory()),sql);
    throw new PessimisticLockException("could not obtain pessimistic lock",e,object);
  }
}
