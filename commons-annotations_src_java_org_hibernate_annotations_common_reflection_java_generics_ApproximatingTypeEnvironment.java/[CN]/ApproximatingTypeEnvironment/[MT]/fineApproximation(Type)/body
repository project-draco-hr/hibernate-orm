{
  return new TypeSwitch<Type>(){
    public Type caseWildcardType(    WildcardType wildcardType){
      return wildcardType;
    }
    @Override public Type caseClass(    Class classType){
      return classType;
    }
    @Override public Type caseGenericArrayType(    GenericArrayType genericArrayType){
      if (TypeUtils.isResolved(genericArrayType)) {
        return genericArrayType;
      }
      Type componentType=genericArrayType.getGenericComponentType();
      Type boundComponentType=bind(componentType);
      if (boundComponentType instanceof Class) {
        return Array.newInstance((Class)boundComponentType,0).getClass();
      }
      return Object[].class;
    }
    @Override public Type caseParameterizedType(    ParameterizedType parameterizedType){
      if (TypeUtils.isResolved(parameterizedType)) {
        return parameterizedType;
      }
      if (!TypeUtils.isCollection(parameterizedType)) {
        return Object.class;
      }
      Type[] typeArguments=parameterizedType.getActualTypeArguments();
      Type[] approximatedTypeArguments=new Type[typeArguments.length];
      for (int i=0; i < typeArguments.length; i++) {
        approximatedTypeArguments[i]=coarseApproximation(typeArguments[i]);
      }
      return TypeFactory.createParameterizedType(bind(parameterizedType.getRawType()),approximatedTypeArguments,parameterizedType.getOwnerType());
    }
    @Override public Type defaultCase(    Type t){
      return coarseApproximation(t);
    }
  }
.doSwitch(type);
}
