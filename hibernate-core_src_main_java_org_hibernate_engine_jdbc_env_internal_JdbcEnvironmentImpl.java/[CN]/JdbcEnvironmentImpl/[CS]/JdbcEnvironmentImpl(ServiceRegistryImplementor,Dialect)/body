{
  this.dialect=dialect;
  final ConfigurationService cfgService=serviceRegistry.getService(ConfigurationService.class);
  NameQualifierSupport nameQualifierSupport=dialect.getNameQualifierSupport();
  if (nameQualifierSupport == null) {
    nameQualifierSupport=NameQualifierSupport.BOTH;
  }
  this.nameQualifierSupport=nameQualifierSupport;
  this.sqlExceptionHelper=buildSqlExceptionHelper(dialect);
  this.extractedMetaDataSupport=new ExtractedDatabaseMetaDataImpl.Builder(this).build();
  final IdentifierHelperBuilder identifierHelperBuilder=IdentifierHelperBuilder.from(this);
  identifierHelperBuilder.setGloballyQuoteIdentifiers(globalQuoting(cfgService));
  identifierHelperBuilder.setAutoQuoteKeywords(autoQuoting(cfgService));
  identifierHelperBuilder.setNameQualifierSupport(nameQualifierSupport);
  IdentifierHelper identifierHelper=null;
  try {
    identifierHelper=dialect.buildIdentifierHelper(identifierHelperBuilder,null);
  }
 catch (  SQLException sqle) {
    log.debug("There was a problem accessing DatabaseMetaData in building the JdbcEnvironment",sqle);
  }
  if (identifierHelper == null) {
    identifierHelper=identifierHelperBuilder.build();
  }
  this.identifierHelper=identifierHelper;
  this.currentCatalog=identifierHelper.toIdentifier(cfgService.getSetting(AvailableSettings.DEFAULT_CATALOG,StandardConverters.STRING));
  this.currentSchema=Identifier.toIdentifier(cfgService.getSetting(AvailableSettings.DEFAULT_SCHEMA,StandardConverters.STRING));
  this.qualifiedObjectNameFormatter=new QualifiedObjectNameFormatterStandardImpl(nameQualifierSupport);
  this.lobCreatorBuilder=LobCreatorBuilderImpl.makeLobCreatorBuilder();
}
