{
  this.dialect=dialect;
  NameQualifierSupport nameQualifierSupport=dialect.getNameQualifierSupport();
  if (nameQualifierSupport == null) {
    nameQualifierSupport=NameQualifierSupport.BOTH;
  }
  this.sqlExceptionHelper=buildSqlExceptionHelper(dialect);
  this.extractedMetaDataSupport=new ExtractedDatabaseMetaDataImpl.Builder(this).build();
  for (  String keyword : dialect.getKeywords()) {
    reservedWords.add(keyword.toUpperCase(Locale.ROOT));
  }
  final boolean globallyQuoteIdentifiers=serviceRegistry.getService(ConfigurationService.class).getSetting(AvailableSettings.GLOBALLY_QUOTED_IDENTIFIERS,StandardConverters.BOOLEAN,false);
  this.identifierHelper=new NormalizingIdentifierHelperImpl(this,nameQualifierSupport,globallyQuoteIdentifiers,true,false,false,false,true,false);
  this.currentCatalog=identifierHelper.toIdentifier(serviceRegistry.getService(ConfigurationService.class).getSetting(AvailableSettings.DEFAULT_CATALOG,StandardConverters.STRING));
  this.currentSchema=Identifier.toIdentifier(serviceRegistry.getService(ConfigurationService.class).getSetting(AvailableSettings.DEFAULT_SCHEMA,StandardConverters.STRING));
  this.qualifiedObjectNameFormatter=new QualifiedObjectNameFormatterStandardImpl(nameQualifierSupport);
  this.lobCreatorBuilder=LobCreatorBuilderImpl.makeLobCreatorBuilder();
}
