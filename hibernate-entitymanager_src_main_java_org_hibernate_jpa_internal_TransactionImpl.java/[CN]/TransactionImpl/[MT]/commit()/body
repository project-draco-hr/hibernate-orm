{
  if (tx == null || tx.getStatus() != TransactionStatus.ACTIVE) {
    throw new IllegalStateException("Transaction not active");
  }
  if (rollbackOnly) {
    tx.rollback();
    throw new RollbackException("Transaction marked as rollbackOnly");
  }
  try {
    tx.commit();
  }
 catch (  Exception e) {
    Throwable wrappedException;
    if (e instanceof PersistenceException) {
      Throwable cause=e.getCause() == null ? e : e.getCause();
      if (cause instanceof HibernateException) {
        wrappedException=entityManager.convert((HibernateException)cause);
      }
 else {
        wrappedException=cause;
      }
    }
 else     if (e instanceof HibernateException) {
      wrappedException=entityManager.convert((HibernateException)e);
    }
 else {
      wrappedException=e;
    }
    try {
      tx.rollback();
    }
 catch (    Exception re) {
    }
    throw new RollbackException("Error while committing the transaction",wrappedException);
  }
 finally {
    rollbackOnly=false;
  }
}
