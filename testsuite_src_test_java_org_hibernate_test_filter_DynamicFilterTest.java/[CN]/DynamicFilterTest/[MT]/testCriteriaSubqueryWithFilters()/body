{
  log.info("Starting Criteria-subquery filter tests");
  TestData testData=new TestData();
  testData.prepare();
  Session session=openSession();
  session.enableFilter("region").setParameter("region","APAC");
  log.info("Criteria query against Department with a subquery on Salesperson in the APAC reqion...");
  DetachedCriteria salespersonSubquery=DetachedCriteria.forClass(Salesperson.class).add(Restrictions.eq("name","steve")).setProjection(Property.forName("department"));
  Criteria departmentsQuery=session.createCriteria(Department.class).add(Subqueries.propertyIn("id",salespersonSubquery));
  List departments=departmentsQuery.list();
  assertEquals("Incorrect department count",1,departments.size());
  log.info("Criteria query against Department with a subquery on Salesperson in the FooBar reqion...");
  session.enableFilter("region").setParameter("region","Foobar");
  departments=departmentsQuery.list();
  assertEquals("Incorrect department count",0,departments.size());
  log.info("Criteria query against Order with a subquery for line items with a subquery on product and sold by a given sales person...");
  session.enableFilter("region").setParameter("region","APAC");
  DetachedCriteria lineItemSubquery=DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity",1L)).createCriteria("product").add(Restrictions.eq("name","Acme Hair Gel")).setProjection(Property.forName("id"));
  List orders=session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer","gavin")).list();
  assertEquals("Incorrect orders count",1,orders.size());
  log.info("query against Order with a subquery for line items with a subquery line items where the product name is Acme Hair Gel and the quantity is greater than 1 in a given region and the product is effective as of last month");
  session.enableFilter("region").setParameter("region","APAC");
  session.enableFilter("effectiveDate").setParameter("asOfDate",testData.lastMonth.getTime());
  DetachedCriteria productSubquery=DetachedCriteria.forClass(Product.class).add(Restrictions.eq("name","Acme Hair Gel")).setProjection(Property.forName("id"));
  lineItemSubquery=DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity",1L)).createCriteria("product").add(Subqueries.propertyIn("id",productSubquery)).setProjection(Property.forName("id"));
  orders=session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer","gavin")).list();
  assertEquals("Incorrect orders count",1,orders.size());
  log.info("query against Order with a subquery for line items with a subquery line items where the product name is Acme Hair Gel and the quantity is greater than 1 in a given region and the product is effective as of 4 months ago");
  session.enableFilter("region").setParameter("region","APAC");
  session.enableFilter("effectiveDate").setParameter("asOfDate",testData.fourMonthsAgo.getTime());
  orders=session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer","gavin")).list();
  assertEquals("Incorrect orders count",0,orders.size());
  session.close();
  testData.release();
}
