{
  String jdbcDriverClass=props.getProperty(Environment.DRIVER);
  String jdbcUrl=props.getProperty(Environment.URL);
  Properties connectionProps=ConnectionProviderFactory.getConnectionProperties(props);
  log.info("C3P0 using driver: " + jdbcDriverClass + " at URL: "+ jdbcUrl);
  log.info("Connection properties: " + PropertiesHelper.maskOut(connectionProps,"password"));
  autocommit=PropertiesHelper.getBoolean(Environment.AUTOCOMMIT,props);
  log.info("autocommit mode: " + autocommit);
  if (jdbcDriverClass == null) {
    log.warn("No JDBC Driver class was specified by property " + Environment.DRIVER);
  }
 else {
    try {
      Class.forName(jdbcDriverClass);
    }
 catch (    ClassNotFoundException cnfe) {
      try {
        ReflectHelper.classForName(jdbcDriverClass);
      }
 catch (      ClassNotFoundException e) {
        String msg="JDBC Driver class not found: " + jdbcDriverClass;
        log.fatal(msg,e);
        throw new HibernateException(msg,e);
      }
    }
  }
  try {
    Integer minPoolSize=PropertiesHelper.getInteger(Environment.C3P0_MIN_SIZE,props);
    Integer maxPoolSize=PropertiesHelper.getInteger(Environment.C3P0_MAX_SIZE,props);
    Integer maxIdleTime=PropertiesHelper.getInteger(Environment.C3P0_TIMEOUT,props);
    Integer maxStatements=PropertiesHelper.getInteger(Environment.C3P0_MAX_STATEMENTS,props);
    Integer acquireIncrement=PropertiesHelper.getInteger(Environment.C3P0_ACQUIRE_INCREMENT,props);
    Integer idleTestPeriod=PropertiesHelper.getInteger(Environment.C3P0_IDLE_TEST_PERIOD,props);
    Properties c3props=new Properties();
    for (Iterator ii=props.keySet().iterator(); ii.hasNext(); ) {
      String key=(String)ii.next();
      if (key.startsWith("hibernate.c3p0.")) {
        String newKey=key.substring(10);
        if (props.containsKey(newKey)) {
          warnPropertyConflict(key,newKey);
        }
        c3props.put(newKey,props.get(key));
      }
    }
    setOverwriteProperty(Environment.C3P0_MIN_SIZE,C3P0_STYLE_MIN_POOL_SIZE,props,c3props,minPoolSize);
    setOverwriteProperty(Environment.C3P0_MAX_SIZE,C3P0_STYLE_MAX_POOL_SIZE,props,c3props,maxPoolSize);
    setOverwriteProperty(Environment.C3P0_TIMEOUT,C3P0_STYLE_MAX_IDLE_TIME,props,c3props,maxIdleTime);
    setOverwriteProperty(Environment.C3P0_MAX_STATEMENTS,C3P0_STYLE_MAX_STATEMENTS,props,c3props,maxStatements);
    setOverwriteProperty(Environment.C3P0_ACQUIRE_INCREMENT,C3P0_STYLE_ACQUIRE_INCREMENT,props,c3props,acquireIncrement);
    setOverwriteProperty(Environment.C3P0_IDLE_TEST_PERIOD,C3P0_STYLE_IDLE_CONNECTION_TEST_PERIOD,props,c3props,idleTestPeriod);
    Integer initialPoolSize=PropertiesHelper.getInteger(C3P0_STYLE_INITIAL_POOL_SIZE,props);
    if (initialPoolSize == null && minPoolSize != null) {
      c3props.put(C3P0_STYLE_INITIAL_POOL_SIZE,String.valueOf(minPoolSize).trim());
    }
    DataSource unpooled=DataSources.unpooledDataSource(jdbcUrl,connectionProps);
    Properties allProps=(Properties)props.clone();
    allProps.putAll(c3props);
    ds=DataSources.pooledDataSource(unpooled,allProps);
  }
 catch (  Exception e) {
    log.fatal("could not instantiate C3P0 connection pool",e);
    throw new HibernateException("Could not instantiate C3P0 connection pool",e);
  }
  String i=props.getProperty(Environment.ISOLATION);
  if (i == null) {
    isolation=null;
  }
 else {
    isolation=new Integer(i);
    log.info("JDBC isolation level: " + Environment.isolationLevelToString(isolation.intValue()));
  }
}
