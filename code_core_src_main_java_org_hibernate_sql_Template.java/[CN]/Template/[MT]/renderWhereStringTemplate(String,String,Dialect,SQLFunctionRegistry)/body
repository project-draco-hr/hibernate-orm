{
  String symbols=new StringBuffer().append("=><!+-*/()',|&`").append(StringHelper.WHITESPACE).append(dialect.openQuote()).append(dialect.closeQuote()).toString();
  StringTokenizer tokens=new StringTokenizer(sqlWhereString,symbols,true);
  StringBuffer result=new StringBuffer();
  boolean quoted=false;
  boolean quotedIdentifier=false;
  boolean beforeTable=false;
  boolean inFromClause=false;
  boolean afterFromTable=false;
  boolean hasMore=tokens.hasMoreTokens();
  String nextToken=hasMore ? tokens.nextToken() : null;
  while (hasMore) {
    String token=nextToken;
    String lcToken=token.toLowerCase();
    hasMore=tokens.hasMoreTokens();
    nextToken=hasMore ? tokens.nextToken() : null;
    boolean isQuoteCharacter=false;
    if (!quotedIdentifier && "'".equals(token)) {
      quoted=!quoted;
      isQuoteCharacter=true;
    }
    if (!quoted) {
      boolean isOpenQuote;
      if ("`".equals(token)) {
        isOpenQuote=!quotedIdentifier;
        token=lcToken=isOpenQuote ? new Character(dialect.openQuote()).toString() : new Character(dialect.closeQuote()).toString();
        quotedIdentifier=isOpenQuote;
        isQuoteCharacter=true;
      }
 else       if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) {
        isOpenQuote=true;
        quotedIdentifier=true;
        isQuoteCharacter=true;
      }
 else       if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) {
        quotedIdentifier=false;
        isQuoteCharacter=true;
        isOpenQuote=false;
      }
 else {
        isOpenQuote=false;
      }
      if (isOpenQuote) {
        result.append(placeholder).append('.');
      }
    }
    boolean quotedOrWhitespace=quoted || quotedIdentifier || isQuoteCharacter|| Character.isWhitespace(token.charAt(0));
    if (quotedOrWhitespace) {
      result.append(token);
    }
 else     if (beforeTable) {
      result.append(token);
      beforeTable=false;
      afterFromTable=true;
    }
 else     if (afterFromTable) {
      if (!"as".equals(lcToken))       afterFromTable=false;
      result.append(token);
    }
 else     if (isNamedParameter(token)) {
      result.append(token);
    }
 else     if (isIdentifier(token,dialect) && !isFunctionOrKeyword(lcToken,nextToken,dialect,functionRegistry)) {
      result.append(placeholder).append('.').append(dialect.quote(token));
    }
 else {
      if (BEFORE_TABLE_KEYWORDS.contains(lcToken)) {
        beforeTable=true;
        inFromClause=true;
      }
 else       if (inFromClause && ",".equals(lcToken)) {
        beforeTable=true;
      }
      result.append(token);
    }
    if (inFromClause && KEYWORDS.contains(lcToken) && !BEFORE_TABLE_KEYWORDS.contains(lcToken)) {
      inFromClause=false;
    }
  }
  return result.toString();
}
