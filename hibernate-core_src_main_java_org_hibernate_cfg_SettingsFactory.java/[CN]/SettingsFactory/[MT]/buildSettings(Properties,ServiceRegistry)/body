{
  final JdbcServices jdbcServices=serviceRegistry.getService(JdbcServices.class);
  Settings settings=new Settings();
  String sessionFactoryName=props.getProperty(Environment.SESSION_FACTORY_NAME);
  settings.setSessionFactoryName(sessionFactoryName);
  ExtractedDatabaseMetaData meta=jdbcServices.getExtractedMetaDataSupport();
  settings.setDataDefinitionImplicitCommit(meta.doesDataDefinitionCauseTransactionCommit());
  settings.setDataDefinitionInTransactionSupported(meta.supportsDataDefinitionInTransaction());
  final Properties properties=new Properties();
  properties.putAll(jdbcServices.getDialect().getDefaultProperties());
  properties.putAll(props);
  settings.setJdbcSupport(new JdbcSupport(!ConfigurationHelper.getBoolean(Environment.NON_CONTEXTUAL_LOB_CREATION,properties)));
  settings.setJtaPlatform(serviceRegistry.getService(JtaPlatform.class));
  boolean flushBeforeCompletion=ConfigurationHelper.getBoolean(Environment.FLUSH_BEFORE_COMPLETION,properties);
  LOG.autoFlush(enabledDisabled(flushBeforeCompletion));
  settings.setFlushBeforeCompletionEnabled(flushBeforeCompletion);
  boolean autoCloseSession=ConfigurationHelper.getBoolean(Environment.AUTO_CLOSE_SESSION,properties);
  LOG.autoSessionClose(enabledDisabled(autoCloseSession));
  settings.setAutoCloseSessionEnabled(autoCloseSession);
  int batchSize=ConfigurationHelper.getInt(Environment.STATEMENT_BATCH_SIZE,properties,0);
  if (!meta.supportsBatchUpdates())   batchSize=0;
  if (batchSize > 0)   LOG.jdbcBatchSize(batchSize);
  settings.setJdbcBatchSize(batchSize);
  boolean jdbcBatchVersionedData=ConfigurationHelper.getBoolean(Environment.BATCH_VERSIONED_DATA,properties,false);
  if (batchSize > 0)   LOG.jdbcBatchUpdates(enabledDisabled(jdbcBatchVersionedData));
  settings.setJdbcBatchVersionedData(jdbcBatchVersionedData);
  boolean useScrollableResultSets=ConfigurationHelper.getBoolean(Environment.USE_SCROLLABLE_RESULTSET,properties,meta.supportsScrollableResults());
  LOG.scrollabelResultSets(enabledDisabled(useScrollableResultSets));
  settings.setScrollableResultSetsEnabled(useScrollableResultSets);
  boolean wrapResultSets=ConfigurationHelper.getBoolean(Environment.WRAP_RESULT_SETS,properties,false);
  LOG.wrapResultSets(enabledDisabled(wrapResultSets));
  settings.setWrapResultSetsEnabled(wrapResultSets);
  boolean useGetGeneratedKeys=ConfigurationHelper.getBoolean(Environment.USE_GET_GENERATED_KEYS,properties,meta.supportsGetGeneratedKeys());
  LOG.jdbc3GeneratedKeys(enabledDisabled(useGetGeneratedKeys));
  settings.setGetGeneratedKeysEnabled(useGetGeneratedKeys);
  Integer statementFetchSize=ConfigurationHelper.getInteger(Environment.STATEMENT_FETCH_SIZE,properties);
  if (statementFetchSize != null)   LOG.jdbcResultSetFetchSize(statementFetchSize);
  settings.setJdbcFetchSize(statementFetchSize);
  String releaseModeName=ConfigurationHelper.getString(Environment.RELEASE_CONNECTIONS,properties,"auto");
  LOG.connectionReleaseMode(releaseModeName);
  ConnectionReleaseMode releaseMode;
  if ("auto".equals(releaseModeName)) {
    releaseMode=serviceRegistry.getService(TransactionFactory.class).getDefaultReleaseMode();
  }
 else {
    releaseMode=ConnectionReleaseMode.parse(releaseModeName);
    if (releaseMode == ConnectionReleaseMode.AFTER_STATEMENT && !jdbcServices.getConnectionProvider().supportsAggressiveRelease()) {
      LOG.unsupportedAfterStatement();
      releaseMode=ConnectionReleaseMode.AFTER_TRANSACTION;
    }
  }
  settings.setConnectionReleaseMode(releaseMode);
  String defaultSchema=properties.getProperty(Environment.DEFAULT_SCHEMA);
  String defaultCatalog=properties.getProperty(Environment.DEFAULT_CATALOG);
  if (defaultSchema != null)   LOG.defaultSchema(defaultSchema);
  if (defaultCatalog != null)   LOG.defaultCatalog(defaultCatalog);
  settings.setDefaultSchemaName(defaultSchema);
  settings.setDefaultCatalogName(defaultCatalog);
  Integer maxFetchDepth=ConfigurationHelper.getInteger(Environment.MAX_FETCH_DEPTH,properties);
  if (maxFetchDepth != null)   LOG.maxOuterJoinFetchDepth(maxFetchDepth);
  settings.setMaximumFetchDepth(maxFetchDepth);
  int batchFetchSize=ConfigurationHelper.getInt(Environment.DEFAULT_BATCH_FETCH_SIZE,properties,1);
  LOG.defaultBatchFetchSize(batchFetchSize);
  settings.setDefaultBatchFetchSize(batchFetchSize);
  boolean comments=ConfigurationHelper.getBoolean(Environment.USE_SQL_COMMENTS,properties);
  LOG.generateSqlWithComments(enabledDisabled(comments));
  settings.setCommentsEnabled(comments);
  boolean orderUpdates=ConfigurationHelper.getBoolean(Environment.ORDER_UPDATES,properties);
  LOG.orderSqlUpdatesByPrimaryKey(enabledDisabled(orderUpdates));
  settings.setOrderUpdatesEnabled(orderUpdates);
  boolean orderInserts=ConfigurationHelper.getBoolean(Environment.ORDER_INSERTS,properties);
  LOG.orderSqlInsertsForBatching(enabledDisabled(orderInserts));
  settings.setOrderInsertsEnabled(orderInserts);
  settings.setQueryTranslatorFactory(createQueryTranslatorFactory(properties));
  Map querySubstitutions=ConfigurationHelper.toMap(Environment.QUERY_SUBSTITUTIONS," ,=;:\n\t\r\f",properties);
  LOG.queryLanguageSubstitutions(querySubstitutions);
  settings.setQuerySubstitutions(querySubstitutions);
  boolean jpaqlCompliance=ConfigurationHelper.getBoolean(Environment.JPAQL_STRICT_COMPLIANCE,properties,false);
  settings.setStrictJPAQLCompliance(jpaqlCompliance);
  LOG.jpaQlStrictCompliance(enabledDisabled(jpaqlCompliance));
  boolean useSecondLevelCache=ConfigurationHelper.getBoolean(Environment.USE_SECOND_LEVEL_CACHE,properties,true);
  LOG.secondLevelCache(enabledDisabled(useSecondLevelCache));
  settings.setSecondLevelCacheEnabled(useSecondLevelCache);
  boolean useQueryCache=ConfigurationHelper.getBoolean(Environment.USE_QUERY_CACHE,properties);
  LOG.queryCache(enabledDisabled(useQueryCache));
  settings.setQueryCacheEnabled(useQueryCache);
  settings.setRegionFactory(createRegionFactory(properties,(useSecondLevelCache || useQueryCache)));
  boolean useMinimalPuts=ConfigurationHelper.getBoolean(Environment.USE_MINIMAL_PUTS,properties,settings.getRegionFactory().isMinimalPutsEnabledByDefault());
  LOG.optimizeCacheForMinimalInputs(enabledDisabled(useMinimalPuts));
  settings.setMinimalPutsEnabled(useMinimalPuts);
  String prefix=properties.getProperty(Environment.CACHE_REGION_PREFIX);
  if (StringHelper.isEmpty(prefix))   prefix=null;
  if (prefix != null)   LOG.cacheRegionPrefix(prefix);
  settings.setCacheRegionPrefix(prefix);
  boolean useStructuredCacheEntries=ConfigurationHelper.getBoolean(Environment.USE_STRUCTURED_CACHE,properties,false);
  LOG.structuredSecondLevelCacheEntries(enabledDisabled(useStructuredCacheEntries));
  settings.setStructuredCacheEntriesEnabled(useStructuredCacheEntries);
  if (useQueryCache)   settings.setQueryCacheFactory(createQueryCacheFactory(properties));
  boolean useStatistics=ConfigurationHelper.getBoolean(Environment.GENERATE_STATISTICS,properties);
  LOG.statistics(enabledDisabled(useStatistics));
  settings.setStatisticsEnabled(useStatistics);
  boolean useIdentifierRollback=ConfigurationHelper.getBoolean(Environment.USE_IDENTIFIER_ROLLBACK,properties);
  LOG.deletedEntitySyntheticIdentifierRollback(enabledDisabled(useIdentifierRollback));
  settings.setIdentifierRollbackEnabled(useIdentifierRollback);
  String autoSchemaExport=properties.getProperty(Environment.HBM2DDL_AUTO);
  if ("validate".equals(autoSchemaExport))   settings.setAutoValidateSchema(true);
  if ("update".equals(autoSchemaExport))   settings.setAutoUpdateSchema(true);
  if ("create".equals(autoSchemaExport))   settings.setAutoCreateSchema(true);
  if ("create-drop".equals(autoSchemaExport)) {
    settings.setAutoCreateSchema(true);
    settings.setAutoDropSchema(true);
  }
  settings.setImportFiles(properties.getProperty(Environment.HBM2DDL_IMPORT_FILES));
  EntityMode defaultEntityMode=EntityMode.parse(properties.getProperty(Environment.DEFAULT_ENTITY_MODE));
  LOG.defaultEntityMode(defaultEntityMode);
  settings.setDefaultEntityMode(defaultEntityMode);
  boolean namedQueryChecking=ConfigurationHelper.getBoolean(Environment.QUERY_STARTUP_CHECKING,properties,true);
  LOG.namedQueryChecking(enabledDisabled(namedQueryChecking));
  settings.setNamedQueryStartupCheckingEnabled(namedQueryChecking);
  boolean checkNullability=ConfigurationHelper.getBoolean(Environment.CHECK_NULLABILITY,properties,true);
  LOG.checkNullability(enabledDisabled(checkNullability));
  settings.setCheckNullability(checkNullability);
  return settings;
}
