{
  this.serviceRegistry=metadataSources.getServiceRegistry();
  this.options=options;
  this.mappingDefaults=new MappingDefaultsImpl();
  final Binder[] binders;
  if (options.getSourceProcessingOrder() == SourceProcessingOrder.HBM_FIRST) {
    binders=new Binder[]{new HibernateMappingBinder(this),new JpaBinder(this)};
  }
 else {
    binders=new Binder[]{new JpaBinder(this),new HibernateMappingBinder(this)};
  }
  prepare(binders,metadataSources);
  bindIndependentMetadata(binders,metadataSources);
  bindTypeDependentMetadata(binders,metadataSources);
  bindMappingMetadata(binders,metadataSources);
  bindMappingDependentMetadata(binders,metadataSources);
  final ArrayList<String> processedEntityNames=new ArrayList<String>();
  if (options.getSourceProcessingOrder() == SourceProcessingOrder.HBM_FIRST) {
    applyHibernateMappings(metadataSources,processedEntityNames);
    applyAnnotationMappings(metadataSources,processedEntityNames);
  }
 else {
    applyAnnotationMappings(metadataSources,processedEntityNames);
    applyHibernateMappings(metadataSources,processedEntityNames);
  }
  new EntityReferenceResolver(this).resolve();
}
