{
  Index index=JandexHelper.indexForClass(service,Paper.class,Stuff.class,Item.class,PricedStuff.class);
  Set<ConfiguredClassHierarchy> hierarchies=ConfiguredClassHierarchyBuilder.createEntityHierarchies(index,serviceRegistry);
  assertEquals("There should be only one hierarchy",1,hierarchies.size());
  Iterator<EntityClass> iter=hierarchies.iterator().next().iterator();
  ConfiguredClass configuredClass=iter.next();
  ClassInfo info=configuredClass.getClassInfo();
  assertEquals("wrong class",DotName.createSimple(Stuff.class.getName()),info.name());
  MappedAttribute property=configuredClass.getMappedAttribute("value");
  assertEquals(Price.class.getName(),property.getType());
  assertTrue(iter.hasNext());
  configuredClass=iter.next();
  info=configuredClass.getClassInfo();
  assertEquals("wrong class",DotName.createSimple(PricedStuff.class.getName()),info.name());
  assertFalse("PricedStuff should not mapped properties",configuredClass.getMappedAttributes().iterator().hasNext());
  assertTrue(iter.hasNext());
  configuredClass=iter.next();
  info=configuredClass.getClassInfo();
  assertEquals("wrong class",DotName.createSimple(Item.class.getName()),info.name());
  property=configuredClass.getMappedAttribute("owner");
  assertEquals(SomeGuy.class.getName(),property.getType());
  property=configuredClass.getMappedAttribute("type");
  assertEquals(PaperType.class.getName(),property.getType());
  assertTrue(iter.hasNext());
  configuredClass=iter.next();
  info=configuredClass.getClassInfo();
  assertEquals("wrong class",DotName.createSimple(Paper.class.getName()),info.name());
  assertFalse("Paper should not mapped properties",configuredClass.getMappedAttributes().iterator().hasNext());
  assertFalse(iter.hasNext());
}
