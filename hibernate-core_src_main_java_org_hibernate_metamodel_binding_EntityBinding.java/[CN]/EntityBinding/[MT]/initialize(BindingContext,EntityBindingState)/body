{
  this.entity=new Entity(state.getEntityName(),state.getSuperType(),bindingContext.makeJavaType(state.getClassName()));
  this.isRoot=state.isRoot();
  this.entityInheritanceType=state.getEntityInheritanceType();
  this.entityMode=state.getEntityMode();
  this.jpaEntityName=state.getJpaEntityName();
  this.entityPersisterClass=state.getCustomEntityPersisterClass();
  this.entityTuplizerClass=state.getCustomEntityTuplizerClass();
  this.caching=state.getCaching();
  this.metaAttributeContext=state.getMetaAttributeContext();
  if (entityMode == EntityMode.POJO) {
    if (state.getProxyInterfaceName() != null) {
      this.proxyInterfaceType=bindingContext.makeJavaType(state.getProxyInterfaceName());
      this.lazy=true;
    }
 else     if (state.isLazy()) {
      this.proxyInterfaceType=entity.getJavaType();
      this.lazy=true;
    }
  }
 else {
    this.proxyInterfaceType=new JavaType(Map.class);
    this.lazy=state.isLazy();
  }
  this.mutable=state.isMutable();
  this.explicitPolymorphism=state.isExplicitPolymorphism();
  this.whereFilter=state.getWhereFilter();
  this.rowId=state.getRowId();
  this.dynamicUpdate=state.isDynamicUpdate();
  this.dynamicInsert=state.isDynamicInsert();
  this.batchSize=state.getBatchSize();
  this.selectBeforeUpdate=state.isSelectBeforeUpdate();
  this.optimisticLockMode=state.getOptimisticLockMode();
  this.isAbstract=state.isAbstract();
  this.customInsert=state.getCustomInsert();
  this.customUpdate=state.getCustomUpdate();
  this.customDelete=state.getCustomDelete();
  if (state.getSynchronizedTableNames() != null) {
    for (    String synchronizedTableName : state.getSynchronizedTableNames()) {
      addSynchronizedTable(synchronizedTableName);
    }
  }
  return this;
}
