{
  boolean skipped=false;
  try {
    if (HINT_TIMEOUT.equals(hintName)) {
      applyTimeout(ConfigurationHelper.getInteger(value));
    }
 else     if (HINT_COMMENT.equals(hintName)) {
      applyComment((String)value);
    }
 else     if (HINT_FETCH_SIZE.equals(hintName)) {
      applyFetchSize(ConfigurationHelper.getInteger(value));
    }
 else     if (HINT_CACHEABLE.equals(hintName)) {
      applyCacheable(ConfigurationHelper.getBoolean(value));
    }
 else     if (HINT_CACHE_REGION.equals(hintName)) {
      applyCacheRegion((String)value);
    }
 else     if (HINT_READONLY.equals(hintName)) {
      applyReadOnly(ConfigurationHelper.getBoolean(value));
    }
 else     if (HINT_CACHE_MODE.equals(hintName)) {
      applyCacheMode(ConfigurationHelper.getCacheMode(value));
    }
 else     if (HINT_FLUSH_MODE.equals(hintName)) {
      applyFlushMode(ConfigurationHelper.getFlushMode(value));
    }
 else     if (AvailableSettings.SHARED_CACHE_RETRIEVE_MODE.equals(hintName)) {
      final CacheRetrieveMode retrieveMode=(CacheRetrieveMode)value;
      CacheStoreMode storeMode=hints != null ? (CacheStoreMode)hints.get(AvailableSettings.SHARED_CACHE_STORE_MODE) : null;
      if (storeMode == null) {
        storeMode=(CacheStoreMode)entityManager.getProperties().get(AvailableSettings.SHARED_CACHE_STORE_MODE);
      }
      applyCacheMode(CacheModeHelper.interpretCacheMode(storeMode,retrieveMode));
    }
 else     if (AvailableSettings.SHARED_CACHE_STORE_MODE.equals(hintName)) {
      final CacheStoreMode storeMode=(CacheStoreMode)value;
      CacheRetrieveMode retrieveMode=hints != null ? (CacheRetrieveMode)hints.get(AvailableSettings.SHARED_CACHE_RETRIEVE_MODE) : null;
      if (retrieveMode == null) {
        retrieveMode=(CacheRetrieveMode)entityManager.getProperties().get(AvailableSettings.SHARED_CACHE_RETRIEVE_MODE);
      }
      applyCacheMode(CacheModeHelper.interpretCacheMode(storeMode,retrieveMode));
    }
 else {
      skipped=true;
      log.info("Ignoring unrecognized query hint [" + hintName + "]");
    }
  }
 catch (  ClassCastException e) {
    throw new IllegalArgumentException("Value for hint");
  }
  if (!skipped) {
    if (hints == null) {
      hints=new HashMap<String,Object>();
    }
    hints.put(hintName,value);
  }
  return this;
}
