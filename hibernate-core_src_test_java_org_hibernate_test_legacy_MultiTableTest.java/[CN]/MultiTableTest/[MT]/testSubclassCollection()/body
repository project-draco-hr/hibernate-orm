{
  Session s=openSession();
  s.beginTransaction();
  SubMulti sm=new SubMulti();
  SubMulti sm1=new SubMulti();
  SubMulti sm2=new SubMulti();
  ArrayList list=new ArrayList();
  ArrayList anotherList=new ArrayList();
  sm.setChildren(list);
  sm.setMoreChildren(anotherList);
  sm.setExtraProp("foo");
  list.add(sm1);
  list.add(sm2);
  anotherList.add(sm1);
  anotherList.add(sm2);
  sm1.setParent(sm);
  sm2.setParent(sm);
  Serializable id=s.save(sm);
  s.save(sm1);
  s.save(sm2);
  s.getTransaction().commit();
  s.close();
  sessionFactory().evict(SubMulti.class);
  s=openSession();
  s.beginTransaction();
  s.connection().createStatement().executeQuery("select * from leafsubsubclass sm, nonleafsubclass m, rootclass s where sm.sid=m.sid and sm.sid=s.id1_ and sm.sid=1").next();
  assertTrue(s.createQuery("select s from SubMulti as sm join sm.children as s where s.amount>-1 and s.name is null").list().size() == 2);
  s.createQuery("select c from SubMulti sm join sm.children c").list();
  assertTrue(s.createQuery("select elements(sm.children) from SubMulti as sm").list().size() == 2);
  assertTrue(s.createQuery("select distinct sm from SubMulti as sm join sm.children as s where s.amount>-1 and s.name is null").list().size() == 1);
  sm=(SubMulti)s.load(SubMulti.class,id);
  assertTrue(sm.getChildren().size() == 2);
  assertEquals(s.createFilter(sm.getMoreChildren(),"select count(*) where this.amount>-1 and this.name is null").list().get(0),new Long(2));
  assertEquals("FOO",sm.getDerived());
  assertSame(s.createQuery("select distinct s from SubMulti s where s.moreChildren[1].amount < 1.0").iterate().next(),sm);
  assertTrue(sm.getMoreChildren().size() == 2);
  s.delete(sm);
  Iterator iter=sm.getChildren().iterator();
  while (iter.hasNext()) {
    s.delete(iter.next());
  }
  s.flush();
  s.getTransaction().commit();
  s.close();
}
