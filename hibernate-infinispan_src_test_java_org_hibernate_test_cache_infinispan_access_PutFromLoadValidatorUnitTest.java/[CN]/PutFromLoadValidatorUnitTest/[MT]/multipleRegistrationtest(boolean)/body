{
  withCacheManager(new CacheManagerCallable(createCacheManager()){
    @Override public void call(){
      final PutFromLoadValidator testee=new PutFromLoadValidator(cm.getCache().getAdvancedCache(),cm);
      final CountDownLatch registeredLatch=new CountDownLatch(3);
      final CountDownLatch finishedLatch=new CountDownLatch(3);
      final AtomicInteger success=new AtomicInteger();
      Runnable r=new Runnable(){
        public void run(){
          try {
            long txTimestamp=System.currentTimeMillis();
            if (transactional) {
              tm.begin();
            }
            SessionImplementor session=mock(SessionImplementor.class);
            testee.registerPendingPut(session,KEY1,txTimestamp);
            registeredLatch.countDown();
            registeredLatch.await(5,TimeUnit.SECONDS);
            PutFromLoadValidator.Lock lock=testee.acquirePutFromLoadLock(session,KEY1,txTimestamp);
            if (lock != null) {
              try {
                log.trace("Put from load lock acquired for key = " + KEY1);
                success.incrementAndGet();
              }
  finally {
                testee.releasePutFromLoadLock(KEY1,lock);
              }
            }
 else {
              log.trace("Unable to acquired putFromLoad lock for key = " + KEY1);
            }
            finishedLatch.countDown();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
;
      ExecutorService executor=Executors.newFixedThreadPool(3);
      testee.beginInvalidatingRegion();
      testee.endInvalidatingRegion();
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
      executor.execute(r);
      executor.execute(r);
      executor.execute(r);
      try {
        finishedLatch.await(5,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
      assertEquals("All threads succeeded",3,success.get());
    }
  }
);
}
