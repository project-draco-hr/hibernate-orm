{
  EmbeddedCacheManager cm=createCacheManager();
  InfinispanRegionFactory tmp=new InfinispanRegionFactory();
  tmp.setCacheManager(cm);
  ConfigurationBuilder cb=new ConfigurationBuilder();
  cb.simpleCache(true).expiration().maxIdle(500);
  Configuration ppCfg=cb.build();
  cm.defineConfiguration(InfinispanRegionFactory.DEF_PENDING_PUTS_RESOURCE,cb.build());
  InfinispanRegionFactory regionFactory=mock(InfinispanRegionFactory.class);
  doReturn(ppCfg).when(regionFactory).getPendingPutsCacheConfiguration();
  withCacheManager(new CacheManagerCallable(cm){
    @Override public void call(){
      PutFromLoadValidator testee=new PutFromLoadValidator(cm.getCache().getAdvancedCache(),regionFactory,cm);
      long lastInsert=Long.MAX_VALUE;
      for (int i=0; i < 100; ++i) {
        lastInsert=System.currentTimeMillis();
        try {
          withTx(tm,new Callable<Object>(){
            @Override public Object call() throws Exception {
              SessionImplementor session=mock(SessionImplementor.class);
              testee.registerPendingPut(session,KEY1,0);
              return null;
            }
          }
);
          Thread.sleep(10);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
      String ppName=cm.getCache().getName() + "-" + InfinispanRegionFactory.DEF_PENDING_PUTS_RESOURCE;
      Map ppCache=cm.getCache(ppName,false);
      assertNotNull(ppCache);
      Object pendingPutMap=ppCache.get(KEY1);
      long end=System.currentTimeMillis();
      if (end - lastInsert > 500) {
        log.warn("Test took too long");
        return;
      }
      assertNotNull(pendingPutMap);
      int size;
      try {
        Method sizeMethod=pendingPutMap.getClass().getMethod("size");
        sizeMethod.setAccessible(true);
        size=(Integer)sizeMethod.invoke(pendingPutMap);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      assertTrue(size < 100);
      assertTrue(size > 0);
    }
  }
);
}
