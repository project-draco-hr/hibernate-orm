{
  List<MetaAttribute> membersFound=new ArrayList<MetaAttribute>();
  final AccessType elementAccessType=getAccessTypeForElement();
  List<? extends Element> fieldsOfClass=ElementFilter.fieldsIn(element.getEnclosedElements());
  addPersistentMembers(membersFound,elementAccessType,fieldsOfClass,AccessType.FIELD);
  List<? extends Element> methodsOfClass=ElementFilter.methodsIn(element.getEnclosedElements());
  addPersistentMembers(membersFound,elementAccessType,methodsOfClass,AccessType.PROPERTY);
  for (TypeElement superclass=TypeUtils.getSuperclassTypeElement(element); superclass != null; superclass=TypeUtils.getSuperclassTypeElement(superclass)) {
    if (TypeUtils.containsAnnotation(superclass,Entity.class)) {
      break;
    }
 else     if (TypeUtils.containsAnnotation(superclass,MappedSuperclass.class)) {
      context.processElement(superclass,defaultAccessTypeForHierarchy);
    }
  }
  return membersFound;
}
