{
  AccessType accessType=getAccessTypeForClass(element);
  if (accessType == null) {
    accessType=this.defaultAccessTypeForHierarchy;
  }
  if (accessType == null) {
    TypeElement superClass=element;
    do {
      superClass=TypeUtils.getSuperclassTypeElement(superClass);
      if (superClass != null) {
        if (TypeUtils.containsAnnotation(superClass,Entity.class,MappedSuperclass.class)) {
          AccessType superClassAccessType=getAccessTypeForClass(superClass);
          if (superClassAccessType != null && defaultAccessTypeForHierarchy != null) {
            break;
          }
        }
 else {
          break;
        }
      }
    }
 while (superClass != null);
  }
  if (accessType == null) {
    accessType=AccessType.PROPERTY;
    this.defaultAccessTypeForElement=accessType;
  }
  context.addAccessType(this.element,accessType);
  this.defaultAccessTypeForElement=accessType;
  return accessType;
}
