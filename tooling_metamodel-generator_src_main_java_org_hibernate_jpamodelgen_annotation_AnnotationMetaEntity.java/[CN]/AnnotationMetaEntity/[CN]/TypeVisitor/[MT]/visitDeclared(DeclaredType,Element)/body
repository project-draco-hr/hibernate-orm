{
  TypeElement returnedElement=(TypeElement)context.getTypeUtils().asElement(declaredType);
  String fqNameOfReturnType=returnedElement.getQualifiedName().toString();
  String collection=Constants.COLLECTIONS.get(fqNameOfReturnType);
  String targetEntity=getTargetEntity(element.getAnnotationMirrors());
  if (collection != null) {
    if (TypeUtils.containsAnnotation(element,ElementCollection.class)) {
      String explicitTargetEntity=getTargetEntity(element.getAnnotationMirrors());
      TypeMirror collectionElementType=TypeUtils.getCollectionElementType(declaredType,fqNameOfReturnType,explicitTargetEntity,context);
      final TypeElement collectionElement=(TypeElement)context.getTypeUtils().asElement(collectionElementType);
      AccessTypeInformation accessTypeInfo=context.getAccessTypeInfo(collectionElement.getQualifiedName().toString());
      if (accessTypeInfo == null) {
        AccessType explicitAccessType=TypeUtils.determineAnnotationSpecifiedAccessType(collectionElement);
        accessTypeInfo=new AccessTypeInformation(collectionElement.getQualifiedName().toString(),explicitAccessType,entityAccessTypeInfo.getAccessType());
        context.addAccessTypeInformation(collectionElement.getQualifiedName().toString(),accessTypeInfo);
      }
 else {
        accessTypeInfo.setDefaultAccessType(entityAccessTypeInfo.getAccessType());
      }
    }
    if (collection.equals("javax.persistence.metamodel.MapAttribute")) {
      return createAnnotationMetaAttributeForMap(declaredType,element,collection,targetEntity);
    }
 else {
      return new AnnotationMetaCollection(parent,element,collection,getElementType(declaredType,targetEntity));
    }
  }
 else {
    if (isBasicAttribute(element,returnedElement)) {
      return new AnnotationMetaSingleAttribute(parent,element,returnedElement.getQualifiedName().toString());
    }
 else {
      return null;
    }
  }
}
