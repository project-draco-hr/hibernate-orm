{
  if (isPersistent(element)) {
    TypeElement returnedElement=(TypeElement)context.getProcessingEnvironment().getTypeUtils().asElement(declaredType);
    String fqNameOfReturnType=returnedElement.getQualifiedName().toString();
    String collection=COLLECTIONS.get(fqNameOfReturnType);
    String targetEntity=getTargetEntity(element.getAnnotationMirrors());
    if (collection != null) {
      if (TypeUtils.containsAnnotation(element,ElementCollection.class)) {
        String explicitTargetEntity=getTargetEntity(element.getAnnotationMirrors());
        TypeMirror collectionElementType=getCollectionElementType(declaredType,fqNameOfReturnType,explicitTargetEntity);
        final TypeElement collectionElement=(TypeElement)context.getProcessingEnvironment().getTypeUtils().asElement(collectionElementType);
        this.parent.context.processElement(collectionElement,this.parent.defaultAccessTypeForElement);
      }
      if (collection.equals("javax.persistence.metamodel.MapAttribute")) {
        return createAnnotationMetaAttributeForMap(declaredType,element,collection,targetEntity);
      }
 else {
        return new AnnotationMetaCollection(parent,element,collection,getElementType(declaredType,targetEntity));
      }
    }
 else {
      if (TypeUtils.containsAnnotation(returnedElement,Embedded.class,Embeddable.class)) {
        this.parent.context.processElement(returnedElement,this.parent.defaultAccessTypeForElement);
      }
      return new AnnotationMetaSingleAttribute(parent,element,returnedElement.getQualifiedName().toString());
    }
  }
 else {
    return null;
  }
}
