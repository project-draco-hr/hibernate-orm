{
  final HqlSqlWalker walker=collectionFromElement.getWalker();
  final SessionFactoryHelper sfh=walker.getSessionFactoryHelper();
  final SessionFactoryImplementor sf=sfh.getFactory();
  final QueryableCollection collectionPersister=collectionFromElement.getQueryableCollection();
  final Type indexType=collectionPersister.getIndexType();
  if (indexType == null) {
    throw new IllegalArgumentException("Given collection is not indexed");
  }
  if (!indexType.isEntityType()) {
    throw new IllegalArgumentException("Given collection does not have an entity index");
  }
  final EntityType indexEntityType=(EntityType)indexType;
  final EntityPersister indexEntityPersister=(EntityPersister)indexEntityType.getAssociatedJoinable(sf);
  final String rhsAlias=walker.getAliasGenerator().createName(indexEntityPersister.getEntityName());
  final boolean useThetaJoin=collectionFromElement.getJoinSequence().isThetaStyle();
  MapKeyEntityFromElement join=new MapKeyEntityFromElement(useThetaJoin);
  join.initialize(HqlSqlTokenTypes.JOIN_FRAGMENT,((Joinable)indexEntityPersister).getTableName());
  join.initialize(collectionFromElement.getWalker());
  join.initializeEntity(collectionFromElement.getFromClause(),indexEntityPersister.getEntityName(),indexEntityPersister,indexEntityType,"<map-key-join-" + collectionFromElement.getClassAlias() + ">",rhsAlias);
  String[] joinColumns=collectionPersister.getIndexColumnNames(collectionFromElement.getCollectionTableAlias());
  JoinSequence joinSequence=sfh.createJoinSequence(useThetaJoin,indexEntityType,rhsAlias,JoinType.INNER_JOIN,joinColumns);
  join.setJoinSequence(joinSequence);
  join.setOrigin(collectionFromElement,collectionPersister.isManyToMany());
  join.setColumns(joinColumns);
  join.setUseFromFragment(collectionFromElement.useFromFragment());
  join.setUseWhereFragment(collectionFromElement.useWhereFragment());
  walker.addQuerySpaces(indexEntityPersister.getQuerySpaces());
  return join;
}
