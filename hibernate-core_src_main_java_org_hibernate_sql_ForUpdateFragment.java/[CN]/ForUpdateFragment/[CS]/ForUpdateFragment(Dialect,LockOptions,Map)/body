{
  this(dialect);
  LockMode upgradeType=null;
  Iterator iter=lockOptions.getAliasLockIterator();
  this.lockOptions=lockOptions;
  if (!iter.hasNext()) {
    final LockMode lockMode=lockOptions.getLockMode();
    if (LockMode.READ.lessThan(lockMode)) {
      upgradeType=lockMode;
      this.lockMode=lockMode;
    }
  }
  while (iter.hasNext()) {
    final Map.Entry me=(Map.Entry)iter.next();
    final LockMode lockMode=(LockMode)me.getValue();
    if (LockMode.READ.lessThan(lockMode)) {
      final String tableAlias=(String)me.getKey();
      if (dialect.forUpdateOfColumns()) {
        String[] keyColumns=(String[])keyColumnNames.get(tableAlias);
        if (keyColumns == null) {
          throw new IllegalArgumentException("alias not found: " + tableAlias);
        }
        keyColumns=StringHelper.qualify(tableAlias,keyColumns);
        for (int i=0; i < keyColumns.length; i++) {
          addTableAlias(keyColumns[i]);
        }
      }
 else {
        addTableAlias(tableAlias);
      }
      if (upgradeType != null && lockMode != upgradeType) {
        throw new QueryException("mixed LockModes");
      }
      upgradeType=lockMode;
    }
  }
  if (upgradeType == LockMode.UPGRADE_NOWAIT) {
    setNowaitEnabled(true);
  }
  if (upgradeType == LockMode.UPGRADE_SKIPLOCKED) {
    setSkipLockedEnabled(true);
  }
}
