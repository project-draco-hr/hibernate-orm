{
  final int positionalParameterCount=queryParameters.getPositionalParameterTypes().length;
  final Type[] types=new Type[positionalParameterCount];
  final Object[] values=new Object[positionalParameterCount];
  for (int i=0; i < positionalParameterCount; i++) {
    types[i]=queryParameters.getPositionalParameterTypes()[i];
    values[i]=types[i].disassemble(queryParameters.getPositionalParameterValues()[i],session,null);
  }
  final Map namedParameters;
  if (queryParameters.getNamedParameters() == null) {
    namedParameters=null;
  }
 else {
    namedParameters=CollectionHelper.mapOfSize(queryParameters.getNamedParameters().size());
    Iterator itr=queryParameters.getNamedParameters().entrySet().iterator();
    while (itr.hasNext()) {
      final Map.Entry namedParameterEntry=(Map.Entry)itr.next();
      final TypedValue original=(TypedValue)namedParameterEntry.getValue();
      namedParameters.put(namedParameterEntry.getKey(),new TypedValue(original.getType(),original.getType().disassemble(original.getValue(),session,null),session.getEntityMode()));
    }
  }
  final RowSelection selection=queryParameters.getRowSelection();
  final Integer firstRow;
  final Integer maxRows;
  if (selection != null) {
    firstRow=selection.getFirstRow();
    maxRows=selection.getMaxRows();
  }
 else {
    firstRow=null;
    maxRows=null;
  }
  return new QueryKey(queryString,types,values,namedParameters,firstRow,maxRows,filterKeys,session.getEntityMode(),queryParameters.getResultTransformer());
}
