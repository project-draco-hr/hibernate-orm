{
  final String KEY=KEY_BASE + testCount++;
  Fqn regionFqn=getRegionFqn(REGION_NAME,REGION_PREFIX);
  Node regionRoot=localCache.getRoot().getChild(regionFqn);
  assertFalse(regionRoot == null);
  assertEquals(0,getValidChildrenCount(regionRoot));
  assertTrue(regionRoot.isResident());
  if (isUsingOptimisticLocking()) {
    assertEquals(NonLockingDataVersion.class,((NodeSPI)regionRoot).getVersion().getClass());
  }
  regionRoot=remoteCache.getRoot().getChild(regionFqn);
  assertFalse(regionRoot == null);
  assertEquals(0,getValidChildrenCount(regionRoot));
  assertTrue(regionRoot.isResident());
  if (isUsingOptimisticLocking()) {
    assertEquals(NonLockingDataVersion.class,((NodeSPI)regionRoot).getVersion().getClass());
  }
  assertNull("local is clean",localAccessStrategy.get(KEY,System.currentTimeMillis()));
  assertNull("remote is clean",remoteAccessStrategy.get(KEY,System.currentTimeMillis()));
  localAccessStrategy.putFromLoad(KEY,VALUE1,System.currentTimeMillis(),new Integer(1));
  assertEquals(VALUE1,localAccessStrategy.get(KEY,System.currentTimeMillis()));
  remoteAccessStrategy.putFromLoad(KEY,VALUE1,System.currentTimeMillis(),new Integer(1));
  assertEquals(VALUE1,remoteAccessStrategy.get(KEY,System.currentTimeMillis()));
  sleep(250);
  if (isUsingOptimisticLocking()) {
    regionRoot=localCache.getRoot().getChild(regionFqn);
    assertEquals(NonLockingDataVersion.class,((NodeSPI)regionRoot).getVersion().getClass());
    regionRoot=remoteCache.getRoot().getChild(regionFqn);
    assertEquals(NonLockingDataVersion.class,((NodeSPI)regionRoot).getVersion().getClass());
  }
  if (evict)   localAccessStrategy.evictAll();
 else   localAccessStrategy.removeAll();
  assertNull(localAccessStrategy.get(KEY,System.currentTimeMillis()));
  regionRoot=localCache.getRoot().getChild(regionFqn);
  assertFalse(regionRoot == null);
  assertEquals(0,getValidChildrenCount(regionRoot));
  assertTrue(regionRoot.isValid());
  assertTrue(regionRoot.isResident());
  assertEquals(null,remoteAccessStrategy.get(KEY,System.currentTimeMillis()));
  regionRoot=remoteCache.getRoot().getChild(regionFqn);
  assertFalse(regionRoot == null);
  assertTrue(regionRoot.isValid());
  assertTrue(regionRoot.isResident());
  assertEquals(0,getValidChildrenCount(regionRoot));
  remoteAccessStrategy.putFromLoad(KEY,VALUE1,System.currentTimeMillis(),new Integer(1));
  assertEquals(VALUE1,remoteAccessStrategy.get(KEY,System.currentTimeMillis()));
  regionRoot=remoteCache.getRoot().getChild(regionFqn);
  assertFalse(regionRoot == null);
  assertTrue(regionRoot.isValid());
  assertTrue(regionRoot.isResident());
  assertEquals(1,getValidChildrenCount(regionRoot));
  sleep(250);
  assertEquals("local is correct",(isUsingInvalidation() ? null : VALUE1),localAccessStrategy.get(KEY,System.currentTimeMillis()));
  assertEquals("remote is correct",VALUE1,remoteAccessStrategy.get(KEY,System.currentTimeMillis()));
}
