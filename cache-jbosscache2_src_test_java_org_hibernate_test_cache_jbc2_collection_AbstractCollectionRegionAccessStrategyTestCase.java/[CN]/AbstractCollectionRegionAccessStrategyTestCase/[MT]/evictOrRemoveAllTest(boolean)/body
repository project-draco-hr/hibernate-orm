{
  final String KEY=KEY_BASE + testCount++;
  Fqn regionFqn=getRegionFqn(REGION_NAME,REGION_PREFIX);
  Node regionRoot=localCache.getRoot().getChild(regionFqn);
  assertFalse(regionRoot == null);
  assertEquals(0,getValidChildrenCount(regionRoot));
  assertTrue(regionRoot.isResident());
  if (isUsingOptimisticLocking()) {
    assertEquals(NonLockingDataVersion.class,((NodeSPI)regionRoot).getVersion().getClass());
  }
  regionRoot=remoteCache.getRoot().getChild(regionFqn);
  assertFalse(regionRoot == null);
  assertEquals(0,getValidChildrenCount(regionRoot));
  assertTrue(regionRoot.isResident());
  if (isUsingOptimisticLocking()) {
    assertEquals(NonLockingDataVersion.class,((NodeSPI)regionRoot).getVersion().getClass());
  }
  assertNull("local is clean",localAccessStrategy.get(KEY,System.currentTimeMillis()));
  assertNull("remote is clean",remoteAccessStrategy.get(KEY,System.currentTimeMillis()));
  localAccessStrategy.putFromLoad(KEY,VALUE1,System.currentTimeMillis(),new Integer(1));
  assertEquals(VALUE1,localAccessStrategy.get(KEY,System.currentTimeMillis()));
  remoteAccessStrategy.putFromLoad(KEY,VALUE1,System.currentTimeMillis(),new Integer(1));
  assertEquals(VALUE1,remoteAccessStrategy.get(KEY,System.currentTimeMillis()));
  sleep(250);
  if (isUsingOptimisticLocking()) {
    regionRoot=localCache.getRoot().getChild(regionFqn);
    assertEquals(NonLockingDataVersion.class,((NodeSPI)regionRoot).getVersion().getClass());
    regionRoot=remoteCache.getRoot().getChild(regionFqn);
    assertEquals(NonLockingDataVersion.class,((NodeSPI)regionRoot).getVersion().getClass());
  }
  if (evict)   localAccessStrategy.evictAll();
 else   localAccessStrategy.removeAll();
  regionRoot=localCache.getRoot().getChild(regionFqn);
  assertFalse(regionRoot == null);
  assertEquals(0,getValidChildrenCount(regionRoot));
  assertTrue(regionRoot.isResident());
  if (isUsingInvalidation()) {
    String msg="Known issue JBCACHE-1251 -- problem reestablishing invalidated region root";
    try {
      assertEquals(null,remoteAccessStrategy.get(KEY,System.currentTimeMillis()));
    }
 catch (    CacheException ce) {
      log.error(msg,ce);
      fail(msg + " -- cause: " + ce);
    }
    remoteAccessStrategy.putFromLoad(KEY,VALUE1,System.currentTimeMillis(),new Integer(1));
    assertEquals(msg,VALUE1,remoteAccessStrategy.get(KEY,System.currentTimeMillis()));
  }
  regionRoot=remoteCache.getRoot().getChild(regionFqn);
  assertFalse(regionRoot == null);
  if (isUsingInvalidation()) {
    assertEquals(1,getValidChildrenCount(regionRoot));
  }
 else {
    assertEquals(0,getValidChildrenCount(regionRoot));
  }
  assertTrue(regionRoot.isResident());
  assertNull("local is clean",localAccessStrategy.get(KEY,System.currentTimeMillis()));
  assertEquals("remote is correct",(isUsingInvalidation() ? VALUE1 : null),remoteAccessStrategy.get(KEY,System.currentTimeMillis()));
}
