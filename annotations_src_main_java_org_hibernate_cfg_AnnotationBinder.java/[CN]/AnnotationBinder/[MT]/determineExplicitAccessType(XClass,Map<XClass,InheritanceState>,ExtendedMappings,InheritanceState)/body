{
  AccessType explicitAccessType=AccessType.DEFAULT;
  if (inheritanceState.hasParents()) {
    InheritanceState superEntityState=InheritanceState.getInheritanceStateOfSuperEntity(clazzToProcess,inheritanceStatePerClass,mappings.getReflectionManager());
    if (superEntityState != null) {
      explicitAccessType=superEntityState.getAccessType();
    }
  }
 else {
    AccessType hibernateExplicitAccessType=AccessType.DEFAULT;
    AccessType jpaExplicitAccessType=AccessType.DEFAULT;
    org.hibernate.annotations.AccessType accessType=clazzToProcess.getAnnotation(org.hibernate.annotations.AccessType.class);
    if (accessType != null) {
      hibernateExplicitAccessType=AccessType.getAccessStrategy(accessType.value());
    }
    Access access=clazzToProcess.getAnnotation(Access.class);
    if (access != null) {
      jpaExplicitAccessType=AccessType.getAccessStrategy(access.value());
    }
    if (hibernateExplicitAccessType != AccessType.DEFAULT && jpaExplicitAccessType != AccessType.DEFAULT && hibernateExplicitAccessType != jpaExplicitAccessType) {
      throw new MappingException("@AccessType and @Access specified with contradicting values. Use of @Access only is recommended. ");
    }
    if (hibernateExplicitAccessType != AccessType.DEFAULT) {
      explicitAccessType=hibernateExplicitAccessType;
    }
 else {
      explicitAccessType=jpaExplicitAccessType;
    }
  }
  return explicitAccessType;
}
