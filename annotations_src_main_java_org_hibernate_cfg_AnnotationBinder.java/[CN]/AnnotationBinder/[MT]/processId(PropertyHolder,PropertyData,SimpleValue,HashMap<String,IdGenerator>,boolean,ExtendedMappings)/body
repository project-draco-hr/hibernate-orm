{
  if (isIdentifierMapper) {
    throw new AnnotationException("@IdClass class should not have @Id nor @EmbeddedId properties: " + BinderHelper.getPath(propertyHolder,inferredData));
  }
  XClass returnedClass=inferredData.getClassOrElement();
  XProperty property=inferredData.getProperty();
  HashMap<String,IdGenerator> localGenerators=(HashMap<String,IdGenerator>)classGenerators.clone();
  localGenerators.putAll(buildLocalGenerators(property,mappings));
  final boolean isComponent=returnedClass.isAnnotationPresent(Embeddable.class) || property.isAnnotationPresent(EmbeddedId.class);
  GeneratedValue generatedValue=property.getAnnotation(GeneratedValue.class);
  String generatorType=generatedValue != null ? generatorType(generatedValue.strategy()) : "assigned";
  String generatorName=generatedValue != null ? generatedValue.generator() : BinderHelper.ANNOTATION_STRING_DEFAULT;
  if (isComponent)   generatorType="assigned";
  BinderHelper.makeIdGenerator(idValue,generatorType,generatorName,mappings,localGenerators);
  log.trace("Bind {} on {}",(isComponent ? "@EmbeddedId" : "@Id"),inferredData.getPropertyName());
}
