{
  TableBinder associationTableBinder=new TableBinder();
  JoinColumn[] annJoins;
  JoinColumn[] annInverseJoins;
  if (joinTableAnn != null) {
    collectionBinder.setExplicitAssociationTable(true);
    if (!BinderHelper.isDefault(joinTableAnn.schema()))     associationTableBinder.setSchema(joinTableAnn.schema());
    if (!BinderHelper.isDefault(joinTableAnn.catalog()))     associationTableBinder.setCatalog(joinTableAnn.catalog());
    if (!BinderHelper.isDefault(joinTableAnn.name()))     associationTableBinder.setName(joinTableAnn.name());
    associationTableBinder.setUniqueConstraints(joinTableAnn.uniqueConstraints());
    JoinColumn[] joins=joinTableAnn.joinColumns();
    if (joins.length == 0) {
      annJoins=null;
    }
 else {
      annJoins=joins;
    }
    JoinColumn[] inverseJoins=joinTableAnn.inverseJoinColumns();
    if (inverseJoins.length == 0) {
      annInverseJoins=null;
    }
 else {
      annInverseJoins=inverseJoins;
    }
  }
 else {
    annJoins=null;
    annInverseJoins=null;
  }
  Ejb3JoinColumn[] joinColumns=Ejb3JoinColumn.buildJoinTableJoinColumns(annJoins,entityBinder.getSecondaryTables(),propertyHolder,inferredData.getPropertyName(),mappedBy,mappings);
  Ejb3JoinColumn[] inverseJoinColumns=Ejb3JoinColumn.buildJoinTableJoinColumns(annInverseJoins,entityBinder.getSecondaryTables(),propertyHolder,inferredData.getPropertyName(),mappedBy,mappings);
  associationTableBinder.setMappings(mappings);
  collectionBinder.setTableBinder(associationTableBinder);
  collectionBinder.setJoinColumns(joinColumns);
  collectionBinder.setInverseJoinColumns(inverseJoinColumns);
}
