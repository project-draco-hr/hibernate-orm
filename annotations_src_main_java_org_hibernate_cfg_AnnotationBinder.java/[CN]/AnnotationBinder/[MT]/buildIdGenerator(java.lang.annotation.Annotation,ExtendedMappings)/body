{
  IdGenerator idGen=new IdGenerator();
  if (mappings.getSchemaName() != null) {
    idGen.addParam(PersistentIdentifierGenerator.SCHEMA,mappings.getSchemaName());
  }
  if (mappings.getCatalogName() != null) {
    idGen.addParam(PersistentIdentifierGenerator.CATALOG,mappings.getCatalogName());
  }
  final boolean useNewGeneratorMappings=mappings.useNewGeneratorMappings();
  if (ann == null) {
    idGen=null;
  }
 else   if (ann instanceof TableGenerator) {
    TableGenerator tabGen=(TableGenerator)ann;
    idGen.setName(tabGen.name());
    if (useNewGeneratorMappings) {
      idGen.setIdentifierGeneratorStrategy(org.hibernate.id.enhanced.TableGenerator.class.getName());
      idGen.addParam(org.hibernate.id.enhanced.TableGenerator.CONFIG_PREFER_SEGMENT_PER_ENTITY,"true");
      if (!BinderHelper.isDefault(tabGen.catalog())) {
        idGen.addParam(org.hibernate.id.enhanced.TableGenerator.CATALOG,tabGen.catalog());
      }
      if (!BinderHelper.isDefault(tabGen.schema())) {
        idGen.addParam(org.hibernate.id.enhanced.TableGenerator.SCHEMA,tabGen.schema());
      }
      if (!BinderHelper.isDefault(tabGen.table())) {
        idGen.addParam(org.hibernate.id.enhanced.TableGenerator.TABLE_PARAM,tabGen.table());
      }
      if (!BinderHelper.isDefault(tabGen.pkColumnName())) {
        idGen.addParam(org.hibernate.id.enhanced.TableGenerator.SEGMENT_COLUMN_PARAM,tabGen.pkColumnName());
      }
      if (!BinderHelper.isDefault(tabGen.pkColumnValue())) {
        idGen.addParam(org.hibernate.id.enhanced.TableGenerator.SEGMENT_VALUE_PARAM,tabGen.pkColumnValue());
      }
      if (!BinderHelper.isDefault(tabGen.valueColumnName())) {
        idGen.addParam(org.hibernate.id.enhanced.TableGenerator.VALUE_COLUMN_PARAM,tabGen.valueColumnName());
      }
      idGen.addParam(org.hibernate.id.enhanced.TableGenerator.INCREMENT_PARAM,String.valueOf(tabGen.allocationSize()));
      idGen.addParam(org.hibernate.id.enhanced.TableGenerator.INITIAL_PARAM,String.valueOf(tabGen.initialValue()));
      if (tabGen.uniqueConstraints() != null && tabGen.uniqueConstraints().length > 0) {
        log.warn("Ignoring unique constraints specified on table generator [{}]",tabGen.name());
      }
    }
 else {
      idGen.setIdentifierGeneratorStrategy(MultipleHiLoPerTableGenerator.class.getName());
      if (!BinderHelper.isDefault(tabGen.table())) {
        idGen.addParam(MultipleHiLoPerTableGenerator.ID_TABLE,tabGen.table());
      }
      if (!BinderHelper.isDefault(tabGen.catalog())) {
        idGen.addParam(MultipleHiLoPerTableGenerator.CATALOG,tabGen.catalog());
      }
      if (!BinderHelper.isDefault(tabGen.schema())) {
        idGen.addParam(MultipleHiLoPerTableGenerator.SCHEMA,tabGen.schema());
      }
      if (tabGen.uniqueConstraints() != null && tabGen.uniqueConstraints().length > 0) {
        log.warn("Ignoring unique constraints specified on table generator [{}]",tabGen.name());
      }
      if (!BinderHelper.isDefault(tabGen.pkColumnName())) {
        idGen.addParam(MultipleHiLoPerTableGenerator.PK_COLUMN_NAME,tabGen.pkColumnName());
      }
      if (!BinderHelper.isDefault(tabGen.valueColumnName())) {
        idGen.addParam(MultipleHiLoPerTableGenerator.VALUE_COLUMN_NAME,tabGen.valueColumnName());
      }
      if (!BinderHelper.isDefault(tabGen.pkColumnValue())) {
        idGen.addParam(MultipleHiLoPerTableGenerator.PK_VALUE_NAME,tabGen.pkColumnValue());
      }
      idGen.addParam(TableHiLoGenerator.MAX_LO,String.valueOf(tabGen.allocationSize() - 1));
    }
    log.trace("Add table generator with name: {}",idGen.getName());
  }
 else   if (ann instanceof SequenceGenerator) {
    SequenceGenerator seqGen=(SequenceGenerator)ann;
    idGen.setName(seqGen.name());
    if (useNewGeneratorMappings) {
      idGen.setIdentifierGeneratorStrategy(SequenceStyleGenerator.class.getName());
      if (!BinderHelper.isDefault(seqGen.catalog())) {
        idGen.addParam(SequenceStyleGenerator.CATALOG,seqGen.catalog());
      }
      if (!BinderHelper.isDefault(seqGen.schema())) {
        idGen.addParam(SequenceStyleGenerator.SCHEMA,seqGen.schema());
      }
      if (!BinderHelper.isDefault(seqGen.sequenceName())) {
        idGen.addParam(SequenceStyleGenerator.SEQUENCE_PARAM,seqGen.sequenceName());
      }
      idGen.addParam(SequenceStyleGenerator.INCREMENT_PARAM,String.valueOf(seqGen.allocationSize()));
      idGen.addParam(SequenceStyleGenerator.INITIAL_PARAM,String.valueOf(seqGen.initialValue()));
    }
 else {
      idGen.setIdentifierGeneratorStrategy("seqhilo");
      if (!BinderHelper.isDefault(seqGen.sequenceName())) {
        idGen.addParam(org.hibernate.id.SequenceGenerator.SEQUENCE,seqGen.sequenceName());
      }
      if (seqGen.initialValue() != 1) {
        log.warn("Hibernate does not support SequenceGenerator.initialValue() unless '{}' set",AnnotationConfiguration.USE_NEW_ID_GENERATOR_MAPPINGS);
      }
      idGen.addParam(SequenceHiLoGenerator.MAX_LO,String.valueOf(seqGen.allocationSize() - 1));
      log.trace("Add sequence generator with name: {}",idGen.getName());
    }
  }
 else   if (ann instanceof GenericGenerator) {
    GenericGenerator genGen=(GenericGenerator)ann;
    idGen.setName(genGen.name());
    idGen.setIdentifierGeneratorStrategy(genGen.strategy());
    Parameter[] params=genGen.parameters();
    for (    Parameter parameter : params) {
      idGen.addParam(parameter.name(),parameter.value());
    }
    log.trace("Add generic generator with name: {}",idGen.getName());
  }
 else {
    throw new AssertionFailure("Unknown Generator annotation: " + ann);
  }
  return idGen;
}
