{
  Coordinate[] linearizedCoords=new Coordinate[0];
  int coordDim=lrs ? dim - 1 : dim;
  if (coordDim != 2) {
    throw new IllegalArgumentException("Can only linearize 2D arc segments, but geometry is " + dim + "D.");
  }
  int numOrd=dim;
  while (numOrd < arcOrdinates.length) {
    numOrd=numOrd - dim;
    double x1=arcOrdinates[numOrd++];
    double y1=arcOrdinates[numOrd++];
    double m1=lrs ? arcOrdinates[numOrd++] : Double.NaN;
    double x2=arcOrdinates[numOrd++];
    double y2=arcOrdinates[numOrd++];
    double m2=lrs ? arcOrdinates[numOrd++] : Double.NaN;
    double x3=arcOrdinates[numOrd++];
    double y3=arcOrdinates[numOrd++];
    double m3=lrs ? arcOrdinates[numOrd++] : Double.NaN;
    Coordinate[] coords;
    if (entireCirlce) {
      coords=Circle.linearizeCircle(x1,y1,x2,y2,x3,y3);
    }
 else {
      coords=Circle.linearizeArc(x1,y1,x2,y2,x3,y3);
    }
    if (lrs) {
      MCoordinate[] mcoord=new MCoordinate[coords.length];
      int lastIndex=coords.length - 1;
      mcoord[0]=MCoordinate.create2dWithMeasure(x1,y1,m1);
      mcoord[lastIndex]=MCoordinate.create2dWithMeasure(x3,y3,m3);
      for (int i=1; i < lastIndex; i++) {
        mcoord[i]=MCoordinate.convertCoordinate(coords[i]);
        if (Double.compare(mcoord[i].x,x2) == 0 && Double.compare(mcoord[i].y,y2) == 0) {
          mcoord[i].m=m2;
        }
      }
      coords=mcoord;
    }
    int resultBegin=1;
    if (linearizedCoords.length == 0) {
      resultBegin=0;
    }
    int destPos=linearizedCoords.length;
    Coordinate[] tmpCoords=new Coordinate[linearizedCoords.length + coords.length - resultBegin];
    System.arraycopy(linearizedCoords,0,tmpCoords,0,linearizedCoords.length);
    System.arraycopy(coords,resultBegin,tmpCoords,destPos,coords.length - resultBegin);
    linearizedCoords=tmpCoords;
  }
  return linearizedCoords;
}
