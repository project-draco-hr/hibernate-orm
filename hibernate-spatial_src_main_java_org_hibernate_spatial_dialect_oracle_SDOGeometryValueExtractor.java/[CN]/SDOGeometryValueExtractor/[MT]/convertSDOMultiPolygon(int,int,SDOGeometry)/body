{
  List<LinearRing> holes=new ArrayList<LinearRing>();
  final List<Polygon> polygons=new ArrayList<Polygon>();
  final ElemInfo info=sdoGeom.getInfo();
  LinearRing shell=null;
  int i=0;
  while (i < info.getSize()) {
    CoordinateSequence cs=null;
    int numCompounds=0;
    if (info.getElementType(i).isCompound()) {
      numCompounds=info.getNumCompounds(i);
      cs=add(cs,getCompoundCSeq(i + 1,i + numCompounds,sdoGeom));
    }
 else {
      cs=add(cs,getElementCSeq(i,sdoGeom,false));
    }
    if (info.getElementType(i).isInteriorRing()) {
      final LinearRing lr=getGeometryFactory().createLinearRing(cs);
      holes.add(lr);
    }
 else {
      if (shell != null) {
        final Polygon polygon=getGeometryFactory().createPolygon(shell,holes.toArray(new LinearRing[holes.size()]));
        polygons.add(polygon);
        shell=null;
      }
      shell=getGeometryFactory().createLinearRing(cs);
      holes=new ArrayList<LinearRing>();
    }
    i+=1 + numCompounds;
  }
  if (shell != null) {
    final Polygon polygon=getGeometryFactory().createPolygon(shell,holes.toArray(new LinearRing[holes.size()]));
    polygons.add(polygon);
  }
  return getGeometryFactory().createMultiPolygon(polygons.toArray(new Polygon[polygons.size()]));
}
