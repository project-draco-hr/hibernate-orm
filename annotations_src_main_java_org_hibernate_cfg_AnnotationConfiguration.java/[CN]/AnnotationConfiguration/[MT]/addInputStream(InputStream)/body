{
  try {
    List<SAXParseException> errors=new ArrayList<SAXParseException>();
    SAXReader saxReader=new SAXReader();
    saxReader.setEntityResolver(getEntityResolver());
    saxReader.setErrorHandler(new ErrorLogger(errors));
    saxReader.setMergeAdjacentText(true);
    saxReader.setValidation(true);
    setValidationFor(saxReader,"orm_2_0.xsd");
    org.dom4j.Document doc=null;
    try {
      doc=saxReader.read(new InputSource(xmlInputStream));
    }
 catch (    DocumentException e) {
      final Throwable throwable=e.getCause();
      if (e.getCause() == null || !(throwable instanceof SAXParseException)) {
        throw new MappingException("Could not parse JPA mapping document",e);
      }
      errors.add((SAXParseException)throwable);
    }
    boolean isV1Schema=false;
    if (errors.size() != 0) {
      SAXParseException exception=errors.get(0);
      final String errorMessage=exception.getMessage();
      isV1Schema=doc != null && errorMessage.contains("1.0") && errorMessage.contains("2.0") && errorMessage.contains("version");
    }
    if (isV1Schema) {
      errors.clear();
      setValidationFor(saxReader,"orm_1_0.xsd");
      try {
        saxReader.read(new StringReader(doc.asXML()));
      }
 catch (      DocumentException e) {
        new AssertionFailure("Error in DOM4J leads to a bug in Hibernate",e);
      }
    }
    if (errors.size() != 0) {
      StringBuilder errorMessage=new StringBuilder();
      for (      SAXParseException error : errors) {
        errorMessage.append("Error parsing XML (line").append(error.getLineNumber()).append(" : column ").append(error.getColumnNumber()).append("): ").append(error.getMessage()).append("\n");
      }
      throw new MappingException("Invalid ORM mapping file.\n" + errorMessage.toString());
    }
    add(doc);
    return this;
  }
  finally {
    try {
      xmlInputStream.close();
    }
 catch (    IOException ioe) {
      log.warn("Could not close input stream",ioe);
    }
  }
}
