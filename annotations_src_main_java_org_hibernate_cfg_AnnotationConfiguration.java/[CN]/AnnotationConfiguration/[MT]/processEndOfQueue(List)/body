{
  boolean stopProcess=false;
  RuntimeException originalException=null;
  while (!stopProcess) {
    List failingSecondPasses=new ArrayList();
    Iterator it=endOfQueueFkSecondPasses.listIterator();
    while (it.hasNext()) {
      final SecondPass pass=(SecondPass)it.next();
      try {
        pass.doSecondPass(classes);
      }
 catch (      RecoverableException e) {
        failingSecondPasses.add(pass);
        if (originalException == null)         originalException=(RuntimeException)e.getCause();
      }
    }
    stopProcess=failingSecondPasses.size() == 0 || failingSecondPasses.size() == endOfQueueFkSecondPasses.size();
    endOfQueueFkSecondPasses=failingSecondPasses;
  }
  if (endOfQueueFkSecondPasses.size() > 0) {
    throw originalException;
  }
}
