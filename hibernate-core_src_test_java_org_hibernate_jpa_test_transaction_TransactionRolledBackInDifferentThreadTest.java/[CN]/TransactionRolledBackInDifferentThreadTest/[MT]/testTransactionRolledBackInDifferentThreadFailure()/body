{
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();
  final EntityManager em=entityManagerFactory().createEntityManager();
  em.joinTransaction();
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit();
  final HibernateException[] transactionRolledBackInDifferentThreadException=new HibernateException[2];
  transactionRolledBackInDifferentThreadException[0]=transactionRolledBackInDifferentThreadException[1]=null;
  final Runnable run1=new Runnable(){
    @Override public void run(){
      try {
        TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();
        em.joinTransaction();
        TestingJtaPlatformImpl.INSTANCE.getTransactionManager().setRollbackOnly();
        TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit();
      }
 catch (      javax.persistence.PersistenceException e) {
        if (e.getCause() instanceof HibernateException && e.getCause().getMessage().equals("Transaction was rolled back in a different thread!")) {
          e.printStackTrace();
          transactionRolledBackInDifferentThreadException[0]=(HibernateException)e.getCause();
        }
      }
catch (      RollbackException ignored) {
      }
catch (      Throwable throwable) {
        throwable.printStackTrace();
      }
 finally {
        try {
          if (TestingJtaPlatformImpl.INSTANCE.getTransactionManager().getStatus() != Status.STATUS_NO_TRANSACTION) {
            TestingJtaPlatformImpl.INSTANCE.getTransactionManager().rollback();
          }
        }
 catch (        SystemException ignore) {
        }
      }
    }
  }
;
  final Runnable run2=new Runnable(){
    @Override public void run(){
      try {
        TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();
        em.joinTransaction();
        TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit();
      }
 catch (      javax.persistence.PersistenceException e) {
        if (e.getCause() instanceof HibernateException && e.getCause().getMessage().equals("Transaction was rolled back in a different thread!")) {
          e.printStackTrace();
          transactionRolledBackInDifferentThreadException[1]=(HibernateException)e.getCause();
        }
      }
catch (      Throwable throwable) {
        throwable.printStackTrace();
      }
 finally {
        try {
          if (TestingJtaPlatformImpl.INSTANCE.getTransactionManager().getStatus() != Status.STATUS_NO_TRANSACTION) {
            TestingJtaPlatformImpl.INSTANCE.getTransactionManager().rollback();
          }
        }
 catch (        SystemException ignore) {
        }
      }
    }
  }
;
  Thread thread=new Thread(run1,"test thread1");
  thread.start();
  thread.join();
  Thread thread2=new Thread(run2,"test thread2");
  thread2.start();
  thread2.join();
  if (transactionRolledBackInDifferentThreadException[0] != null || transactionRolledBackInDifferentThreadException[1] != null) {
    fail("failure in test thread 1 = " + (transactionRolledBackInDifferentThreadException[0] != null ? transactionRolledBackInDifferentThreadException[0].getMessage() : "(none)") + ", failure in test thread 2 = "+ (transactionRolledBackInDifferentThreadException[1] != null ? transactionRolledBackInDifferentThreadException[1].getMessage() : "(none)"));
  }
  em.close();
}
