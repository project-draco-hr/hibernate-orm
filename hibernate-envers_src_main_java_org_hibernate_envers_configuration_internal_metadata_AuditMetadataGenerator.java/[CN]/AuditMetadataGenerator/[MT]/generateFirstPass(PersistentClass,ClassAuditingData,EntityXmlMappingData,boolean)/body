{
  final String schema=getSchema(auditingData.getAuditTable().schema(),pc.getTable());
  final String catalog=getCatalog(auditingData.getAuditTable().catalog(),pc.getTable());
  if (!isAudited) {
    final String entityName=pc.getEntityName();
    final IdMappingData idMapper=idMetadataGenerator.addId(pc,false);
    if (idMapper == null) {
      LOG.debugf("Unable to create auditing id mapping for entity %s, because of an unsupported Hibernate id mapping (e.g. key-many-to-one)",entityName);
      return;
    }
    final ExtendedPropertyMapper propertyMapper=null;
    final String parentEntityName=null;
    final EntityConfiguration entityCfg=new EntityConfiguration(entityName,pc.getClassName(),idMapper,propertyMapper,parentEntityName);
    notAuditedEntitiesConfigurations.put(entityName,entityCfg);
    return;
  }
  final String entityName=pc.getEntityName();
  LOG.debugf("Generating first-pass auditing mapping for entity %s",entityName);
  final String auditEntityName=verEntCfg.getAuditEntityName(entityName);
  final String auditTableName=verEntCfg.getAuditTableName(entityName,pc.getTable().getName());
  auditEntityNameRegister.register(auditEntityName);
  final AuditTableData auditTableData=new AuditTableData(auditEntityName,auditTableName,schema,catalog);
  final IdMappingData idMapper=idMetadataGenerator.addId(pc,true);
  final InheritanceType inheritanceType=InheritanceType.get(pc);
  final Element classMapping;
  final ExtendedPropertyMapper propertyMapper;
  final String parentEntityName;
  final Triple<Element,ExtendedPropertyMapper,String> mappingData;
switch (inheritanceType) {
case NONE:
    mappingData=generateMappingData(pc,xmlMappingData,auditTableData,idMapper);
  break;
case SINGLE:
mappingData=generateInheritanceMappingData(pc,xmlMappingData,auditTableData,"subclass");
break;
case JOINED:
mappingData=generateInheritanceMappingData(pc,xmlMappingData,auditTableData,"joined-subclass");
final Element keyMapping=mappingData.getFirst().addElement("key");
MetadataTools.addColumns(keyMapping,pc.getTable().getPrimaryKey().columnIterator());
keyMapping.add((Element)cloneAndSetupRevisionInfoRelationMapping().element("column").clone());
break;
case TABLE_PER_CLASS:
mappingData=generateInheritanceMappingData(pc,xmlMappingData,auditTableData,"union-subclass");
break;
default :
throw new AssertionError("Impossible enum value.");
}
classMapping=mappingData.getFirst();
propertyMapper=mappingData.getSecond();
parentEntityName=mappingData.getThird();
xmlMappingData.setClassMapping(classMapping);
addProperties(classMapping,pc.getUnjoinedPropertyIterator(),propertyMapper,auditingData,pc.getEntityName(),xmlMappingData,true);
createJoins(pc,classMapping,auditingData);
addJoins(pc,propertyMapper,auditingData,pc.getEntityName(),xmlMappingData,true);
final EntityConfiguration entityCfg=new EntityConfiguration(auditEntityName,pc.getClassName(),idMapper,propertyMapper,parentEntityName);
entitiesConfigurations.put(pc.getEntityName(),entityCfg);
}
