{
  final Iterator<Join> joins=pc.getJoinIterator();
  final Map<Join,Element> joinElements=new HashMap<>();
  entitiesJoins.put(pc.getEntityName(),joinElements);
  while (joins.hasNext()) {
    Join join=joins.next();
    if (!checkPropertiesAudited(join.getPropertyIterator(),auditingData)) {
      continue;
    }
    final String originalTableName=join.getTable().getName();
    String auditTableName=auditingData.getSecondaryTableDictionary().get(originalTableName);
    if (auditTableName == null) {
      auditTableName=verEntCfg.getAuditEntityName(originalTableName);
    }
    final String schema=getSchema(auditingData.getAuditTable().schema(),join.getTable());
    final String catalog=getCatalog(auditingData.getAuditTable().catalog(),join.getTable());
    final Element joinElement=MetadataTools.createJoin(parent,auditTableName,schema,catalog);
    joinElements.put(join,joinElement);
    final Element joinKey=joinElement.addElement("key");
    MetadataTools.addColumns(joinKey,join.getKey().getColumnIterator());
    MetadataTools.addColumn(joinKey,verEntCfg.getRevisionFieldName(),null,null,null,null,null,null);
  }
}
