{
  final TransactionContext transactionContext=new TransactionContextImpl(new TransactionEnvironmentImpl(serviceRegistry));
  TransactionCoordinatorImpl transactionCoordinator=new TransactionCoordinatorImpl(null,transactionContext);
  JournalingTransactionObserver transactionObserver=new JournalingTransactionObserver();
  transactionCoordinator.addObserver(transactionObserver);
  final JdbcCoordinator jdbcCoordinator=transactionCoordinator.getJdbcCoordinator();
  LogicalConnectionImplementor logicalConnection=jdbcCoordinator.getLogicalConnection();
  Connection connection=logicalConnection.getShareableConnectionProxy();
  Statement statement=connection.createStatement();
  statement.execute("drop table SANDBOX_JDBC_TST if exists");
  statement.execute("create table SANDBOX_JDBC_TST ( ID integer, NAME varchar(100) )");
  assertTrue(logicalConnection.getResourceRegistry().hasRegisteredResources());
  assertTrue(logicalConnection.isPhysicallyConnected());
  statement.close();
  assertFalse(logicalConnection.getResourceRegistry().hasRegisteredResources());
  assertTrue(logicalConnection.isPhysicallyConnected());
  TransactionImplementor txn=transactionCoordinator.getTransaction();
  txn.begin();
  assertEquals(1,transactionObserver.getBegins());
  final BatchBuilder batchBuilder=new BatchBuilderImpl(2);
  final BatchKey batchKey=new BasicBatchKey("this",Expectations.BASIC);
  final Batch insertBatch=batchBuilder.buildBatch(batchKey,jdbcCoordinator);
  assertTrue("unexpected Batch impl",BatchingBatch.class.isInstance(insertBatch));
  final JournalingBatchObserver batchObserver=new JournalingBatchObserver();
  insertBatch.addObserver(batchObserver);
  final String insertSql="insert into SANDBOX_JDBC_TST( ID, NAME ) values ( ?, ? )";
  PreparedStatement insert=insertBatch.getBatchStatement(insertSql,false);
  insert.setLong(1,1);
  insert.setString(2,"name");
  assertEquals(0,batchObserver.getExplicitExecutionCount());
  assertEquals(0,batchObserver.getImplicitExecutionCount());
  insertBatch.addToBatch();
  assertEquals(0,batchObserver.getExplicitExecutionCount());
  assertEquals(0,batchObserver.getImplicitExecutionCount());
  assertTrue(logicalConnection.getResourceRegistry().hasRegisteredResources());
  PreparedStatement insert2=insertBatch.getBatchStatement(insertSql,false);
  assertSame(insert,insert2);
  insert=insert2;
  insert.setLong(1,2);
  insert.setString(2,"another name");
  assertEquals(0,batchObserver.getExplicitExecutionCount());
  assertEquals(0,batchObserver.getImplicitExecutionCount());
  insertBatch.addToBatch();
  assertEquals(0,batchObserver.getExplicitExecutionCount());
  assertEquals(1,batchObserver.getImplicitExecutionCount());
  assertTrue(logicalConnection.getResourceRegistry().hasRegisteredResources());
  insertBatch.execute();
  assertEquals(1,batchObserver.getExplicitExecutionCount());
  assertEquals(1,batchObserver.getImplicitExecutionCount());
  assertFalse(logicalConnection.getResourceRegistry().hasRegisteredResources());
  insertBatch.release();
  txn.commit();
  logicalConnection.close();
}
