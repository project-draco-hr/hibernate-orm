{
  dereferenceType=DereferenceType.COLLECTION;
  String role=collectionType.getRole();
  boolean isSizeProperty=getNextSibling() != null && CollectionProperties.isAnyCollectionProperty(getNextSibling().getText());
  if (isSizeProperty) {
    indexed=true;
  }
  QueryableCollection queryableCollection=getSessionFactoryHelper().requireQueryableCollection(role);
  String propName=getPath();
  FromClause currentFromClause=getWalker().getCurrentFromClause();
  FromElement lhsFromElement=getLhs().getFromElement();
  while (lhsFromElement != null && ComponentJoin.class.isInstance(lhsFromElement)) {
    lhsFromElement=lhsFromElement.getOrigin();
  }
  if (lhsFromElement == null) {
    throw new QueryException("Unable to locate appropriate lhs");
  }
  if (getWalker().getStatementType() != SqlTokenTypes.SELECT) {
    if (isFromElementUpdateOrDeleteRoot(lhsFromElement)) {
      boolean useAlias=false;
      if (getWalker().getStatementType() != SqlTokenTypes.INSERT) {
        final Queryable persister=lhsFromElement.getQueryable();
        if (persister.isMultiTable()) {
          useAlias=true;
        }
      }
      if (!useAlias) {
        final String lhsTableName=lhsFromElement.getQueryable().getTableName();
        columns=getFromElement().toColumns(lhsTableName,propertyPath,false,true);
      }
    }
  }
  FromElementFactory factory=new FromElementFactory(currentFromClause,lhsFromElement,propName,classAlias,getColumns(),implicitJoin);
  FromElement elem=factory.createCollection(queryableCollection,role,joinType,fetch,indexed);
  LOG.debugf("dereferenceCollection() : Created new FROM element for %s : %s",propName,elem);
  setImpliedJoin(elem);
  setFromElement(elem);
  if (isSizeProperty) {
    elem.setText("");
    elem.setUseWhereFragment(false);
  }
  if (!implicitJoin) {
    EntityPersister entityPersister=elem.getEntityPersister();
    if (entityPersister != null) {
      getWalker().addQuerySpaces(entityPersister.getQuerySpaces());
    }
  }
  getWalker().addQuerySpaces(queryableCollection.getCollectionSpaces());
}
