{
  dereferenceType=DereferenceType.ENTITY;
  if (LOG.isDebugEnabled()) {
    LOG.debugf("dereferenceEntityJoin() : generating join for %s in %s (%s) parent = %s",propertyName,getFromElement().getClassName(),classAlias == null ? "<no alias>" : classAlias,ASTUtil.getDebugString(parent));
  }
  String associatedEntityName=propertyType.getAssociatedEntityName();
  String tableAlias=getAliasGenerator().createName(associatedEntityName);
  String[] joinColumns=getColumns();
  String joinPath=getPath();
  if (impliedJoin && getWalker().isInFrom()) {
    joinType=getWalker().getImpliedJoinType();
  }
  FromClause currentFromClause=getWalker().getCurrentFromClause();
  FromElement elem=currentFromClause.findJoinByPath(joinPath);
  boolean found=elem != null;
  boolean useFoundFromElement=found && canReuse(elem);
  if (!useFoundFromElement) {
    JoinSequence joinSequence=getSessionFactoryHelper().createJoinSequence(impliedJoin,propertyType,tableAlias,joinType,joinColumns);
    FromElement lhsFromElement=getLhs().getFromElement();
    while (lhsFromElement != null && ComponentJoin.class.isInstance(lhsFromElement)) {
      lhsFromElement=lhsFromElement.getOrigin();
    }
    if (lhsFromElement == null) {
      throw new QueryException("Unable to locate appropriate lhs");
    }
    String role=lhsFromElement.getClassName() + "." + propertyName;
    FromElementFactory factory=new FromElementFactory(currentFromClause,lhsFromElement,joinPath,classAlias,joinColumns,impliedJoin);
    elem=factory.createEntityJoin(associatedEntityName,tableAlias,joinSequence,fetch,getWalker().isInFrom(),propertyType,role,joinPath);
  }
 else {
    currentFromClause.addDuplicateAlias(classAlias,elem);
  }
  setImpliedJoin(elem);
  getWalker().addQuerySpaces(elem.getEntityPersister().getQuerySpaces());
  setFromElement(elem);
}
