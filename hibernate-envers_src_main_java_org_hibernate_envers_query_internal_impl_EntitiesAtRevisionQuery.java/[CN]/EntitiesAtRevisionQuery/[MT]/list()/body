{
  AuditEntitiesConfiguration verEntCfg=enversService.getAuditEntitiesConfiguration();
  String revisionPropertyPath=verEntCfg.getRevisionNumberPath();
  String originalIdPropertyName=verEntCfg.getOriginalIdPropName();
  MiddleIdData referencedIdData=new MiddleIdData(verEntCfg,enversService.getEntitiesConfigurations().get(entityName).getIdMappingData(),null,entityName,enversService.getEntitiesConfigurations().isVersioned(entityName));
  enversService.getAuditStrategy().addEntityAtRevisionRestriction(enversService.getGlobalConfiguration(),qb,qb.getRootParameters(),revisionPropertyPath,verEntCfg.getRevisionEndFieldName(),true,referencedIdData,revisionPropertyPath,originalIdPropertyName,REFERENCED_ENTITY_ALIAS,REFERENCED_ENTITY_ALIAS_DEF_AUD_STR,true);
  if (!includeDeletions) {
    qb.getRootParameters().addWhereWithParam(verEntCfg.getRevisionTypePropName(),"<>",RevisionType.DEL);
  }
  for (  AuditCriterion criterion : criterions) {
    criterion.addToQuery(enversService,versionsReader,entityName,QueryConstants.REFERENCED_ENTITY_ALIAS,qb,qb.getRootParameters());
  }
  for (  final AuditAssociationQueryImpl<?> associationQuery : associationQueries) {
    associationQuery.addCriterionsToQuery(versionsReader);
  }
  Query query=buildQuery();
  List<String> params=Arrays.asList(query.getNamedParameters());
  if (params.contains(REVISION_PARAMETER)) {
    query.setParameter(REVISION_PARAMETER,revision);
  }
  List queryResult=query.list();
  return applyProjections(queryResult,revision);
}
