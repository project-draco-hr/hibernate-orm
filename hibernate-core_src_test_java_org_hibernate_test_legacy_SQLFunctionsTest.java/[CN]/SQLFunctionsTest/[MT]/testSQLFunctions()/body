{
  Session s=openSession();
  Transaction t=s.beginTransaction();
  Simple simple=new Simple(Long.valueOf(10));
  simple.setName("Simple 1");
  s.save(simple);
  if (getDialect() instanceof DB2Dialect && !(getDialect() instanceof DerbyDialect)) {
    s.createQuery("from Simple s where repeat('foo', 3) = 'foofoofoo'").list();
    s.createQuery("from Simple s where repeat(s.name, 3) = 'foofoofoo'").list();
    s.createQuery("from Simple s where repeat( lower(s.name), 3 + (1-1) / 2) = 'foofoofoo'").list();
  }
  assertTrue(s.createQuery("from Simple s where upper( s.name ) ='SIMPLE 1'").list().size() == 1);
  if (!(getDialect() instanceof HSQLDialect)) {
    assertTrue(s.createQuery("from Simple s where not( upper( s.name ) ='yada' or 1=2 or 'foo'='bar' or not('foo'='foo') or 'foo' like 'bar' )").list().size() == 1);
  }
  if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof SybaseDialect) && !(getDialect() instanceof SQLServerDialect)&& !(getDialect() instanceof MckoiDialect)&& !(getDialect() instanceof InterbaseDialect)&& !(getDialect() instanceof TimesTenDialect)) {
    assertTrue(s.createQuery("from Simple s where lower( s.name || ' foo' ) ='simple 1 foo'").list().size() == 1);
  }
  if ((getDialect() instanceof SybaseDialect)) {
    assertTrue(s.createQuery("from Simple s where lower( s.name + ' foo' ) ='simple 1 foo'").list().size() == 1);
  }
  if ((getDialect() instanceof MckoiDialect) || (getDialect() instanceof TimesTenDialect)) {
    assertTrue(s.createQuery("from Simple s where lower( concat(s.name, ' foo') ) ='simple 1 foo'").list().size() == 1);
  }
  Simple other=new Simple(Long.valueOf(20));
  other.setName("Simple 2");
  other.setCount(12);
  simple.setOther(other);
  s.save(other);
  assertTrue(s.createQuery("from Simple s where upper( s.other.name ) ='SIMPLE 2'").list().size() == 1);
  assertTrue(s.createQuery("from Simple s where not ( upper( s.other.name ) ='SIMPLE 2' )").list().size() == 0);
  assertTrue(s.createQuery("select distinct s from Simple s where ( ( s.other.count + 3 ) = (15*2)/2 and s.count = 69) or ( ( s.other.count + 2 ) / 7 ) = 2").list().size() == 1);
  assertTrue(s.createQuery("select s from Simple s where ( ( s.other.count + 3 ) = (15*2)/2 and s.count = 69) or ( ( s.other.count + 2 ) / 7 ) = 2 order by s.other.count").list().size() == 1);
  Simple min=new Simple(Long.valueOf(30));
  min.setCount(-1);
  s.save(min);
  if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect)) {
    assertTrue(s.createQuery("from Simple s where s.count > ( select min(sim.count) from Simple sim )").list().size() == 2);
    t.commit();
    t=s.beginTransaction();
    assertTrue(s.createQuery("from Simple s where s = some( select sim from Simple sim where sim.count>=0 ) and s.count >= 0").list().size() == 2);
    assertTrue(s.createQuery("from Simple s where s = some( select sim from Simple sim where sim.other.count=s.other.count ) and s.other.count > 0").list().size() == 1);
  }
  Iterator iter=s.createQuery("select sum(s.count) from Simple s group by s.count having sum(s.count) > 10").iterate();
  assertTrue(iter.hasNext());
  assertEquals(Long.valueOf(12),iter.next());
  assertTrue(!iter.hasNext());
  if (!(getDialect() instanceof MySQLDialect)) {
    iter=s.createQuery("select s.count from Simple s group by s.count having s.count = 12").iterate();
    assertTrue(iter.hasNext());
  }
  s.createQuery("select s.id, s.count, count(t), max(t.date) from Simple s, Simple t where s.count = t.count group by s.id, s.count order by s.count").iterate();
  Query q=s.createQuery("from Simple s");
  q.setMaxResults(10);
  assertTrue(q.list().size() == 3);
  q=s.createQuery("from Simple s");
  q.setMaxResults(1);
  assertTrue(q.list().size() == 1);
  q=s.createQuery("from Simple s");
  assertTrue(q.list().size() == 3);
  q=s.createQuery("from Simple s where s.name = ?");
  q.setString(0,"Simple 1");
  assertTrue(q.list().size() == 1);
  q=s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?");
  q.setString(1,"SIMPLE 1");
  q.setString(0,"Simple 1");
  q.setFirstResult(0);
  assertTrue(q.iterate().hasNext());
  q=s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1");
  q.setParameter("bar","SIMPLE 1");
  q.setString("foo","Simple 1");
  q.setInteger("count",69);
  q.setFirstResult(0);
  assertTrue(q.iterate().hasNext());
  q=s.createQuery("select s.id from Simple s");
  q.setFirstResult(1);
  q.setMaxResults(2);
  iter=q.iterate();
  int i=0;
  while (iter.hasNext()) {
    assertTrue(iter.next() instanceof Long);
    i++;
  }
  assertTrue(i == 2);
  q=s.createQuery("select all s, s.other from Simple s where s = :s");
  q.setParameter("s",simple);
  assertTrue(q.list().size() == 1);
  q=s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count");
  HashSet set=new HashSet();
  set.add("Simple 1");
  set.add("foo");
  q.setParameterList("name_list",set);
  q.setParameter("count",Integer.valueOf(-1));
  assertTrue(q.list().size() == 1);
  ScrollableResults sr=s.createQuery("from Simple s").scroll();
  sr.next();
  sr.get(0);
  sr.close();
  s.delete(other);
  s.delete(simple);
  s.delete(min);
  t.commit();
  s.close();
}
