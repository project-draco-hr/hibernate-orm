{
  Session s=openSession();
  s.setCacheMode(CacheMode.IGNORE);
  Transaction t=s.beginTransaction();
  DataPoint dp=new DataPoint();
  dp.setDescription("original");
  dp.setX(new BigDecimal(0.1d).setScale(19,BigDecimal.ROUND_DOWN));
  dp.setY(new BigDecimal(Math.cos(dp.getX().doubleValue())).setScale(19,BigDecimal.ROUND_DOWN));
  s.save(dp);
  t.commit();
  s.close();
  s=openSession();
  s.setCacheMode(CacheMode.IGNORE);
  t=s.beginTransaction();
  s.setDefaultReadOnly(true);
  dp=(DataPoint)s.load(DataPoint.class,dp.getId());
  assertTrue(s.isReadOnly(dp));
  assertFalse(Hibernate.isInitialized(dp));
  s.refresh(dp);
  assertFalse(Hibernate.isInitialized(dp));
  assertTrue(s.isReadOnly(dp));
  s.setDefaultReadOnly(false);
  s.refresh(dp);
  assertFalse(Hibernate.isInitialized(dp));
  assertTrue(s.isReadOnly(dp));
  assertEquals("original",dp.getDescription());
  assertTrue(Hibernate.isInitialized(dp));
  dp.setDescription("changed");
  assertEquals("changed",dp.getDescription());
  assertTrue(s.isReadOnly(dp));
  assertTrue(s.isReadOnly(((HibernateProxy)dp).getHibernateLazyInitializer().getImplementation()));
  s.refresh(dp);
  assertEquals("original",dp.getDescription());
  assertTrue(s.isReadOnly(dp));
  assertTrue(s.isReadOnly(((HibernateProxy)dp).getHibernateLazyInitializer().getImplementation()));
  s.setDefaultReadOnly(true);
  dp.setDescription("changed");
  assertEquals("changed",dp.getDescription());
  s.refresh(dp);
  assertTrue(s.isReadOnly(dp));
  assertTrue(s.isReadOnly(((HibernateProxy)dp).getHibernateLazyInitializer().getImplementation()));
  assertEquals("original",dp.getDescription());
  dp.setDescription("changed");
  t.commit();
  s.clear();
  t=s.beginTransaction();
  dp=(DataPoint)s.get(DataPoint.class,dp.getId());
  assertEquals("original",dp.getDescription());
  s.delete(dp);
  t.commit();
  s.close();
}
