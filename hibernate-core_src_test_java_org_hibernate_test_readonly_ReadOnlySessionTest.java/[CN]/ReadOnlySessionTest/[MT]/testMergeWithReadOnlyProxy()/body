{
  Session s=openSession();
  s.setCacheMode(CacheMode.IGNORE);
  Transaction t=s.beginTransaction();
  DataPoint dp=new DataPoint();
  dp.setX(new BigDecimal(0.1d).setScale(19,BigDecimal.ROUND_DOWN));
  dp.setY(new BigDecimal(Math.cos(dp.getX().doubleValue())).setScale(19,BigDecimal.ROUND_DOWN));
  s.save(dp);
  t.commit();
  s.close();
  dp.setDescription("description");
  s=openSession();
  s.setCacheMode(CacheMode.IGNORE);
  t=s.beginTransaction();
  s.setDefaultReadOnly(true);
  DataPoint dpProxy=(DataPoint)s.load(DataPoint.class,new Long(dp.getId()));
  assertTrue(s.isReadOnly(dpProxy));
  assertFalse(Hibernate.isInitialized(dpProxy));
  s.evict(dpProxy);
  dpProxy=(DataPoint)s.merge(dpProxy);
  assertTrue(s.isReadOnly(dpProxy));
  assertFalse(Hibernate.isInitialized(dpProxy));
  dpProxy=(DataPoint)s.merge(dp);
  assertTrue(s.isReadOnly(dpProxy));
  assertTrue(Hibernate.isInitialized(dpProxy));
  assertEquals("description",dpProxy.getDescription());
  s.evict(dpProxy);
  dpProxy=(DataPoint)s.merge(dpProxy);
  assertTrue(s.isReadOnly(dpProxy));
  assertTrue(Hibernate.isInitialized(dpProxy));
  assertEquals("description",dpProxy.getDescription());
  dpProxy.setDescription(null);
  dpProxy=(DataPoint)s.merge(dp);
  assertTrue(s.isReadOnly(dpProxy));
  assertTrue(Hibernate.isInitialized(dpProxy));
  assertEquals("description",dpProxy.getDescription());
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  dp=(DataPoint)s.get(DataPoint.class,new Long(dp.getId()));
  assertNull(dp.getDescription());
  s.delete(dp);
  t.commit();
  s.close();
}
