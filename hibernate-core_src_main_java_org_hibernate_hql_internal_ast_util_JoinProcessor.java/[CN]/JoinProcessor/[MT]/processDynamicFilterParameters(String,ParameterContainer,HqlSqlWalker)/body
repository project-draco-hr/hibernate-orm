{
  if (walker.getEnabledFilters().isEmpty() && (!hasDynamicFilterParam(sqlFragment)) && (!(hasCollectionFilterParam(sqlFragment)))) {
    return;
  }
  Dialect dialect=walker.getSessionFactoryHelper().getFactory().getDialect();
  String symbols=new StringBuffer().append(ParserHelper.HQL_SEPARATORS).append(dialect.openQuote()).append(dialect.closeQuote()).toString();
  StringTokenizer tokens=new StringTokenizer(sqlFragment,symbols,true);
  StringBuffer result=new StringBuffer();
  while (tokens.hasMoreTokens()) {
    final String token=tokens.nextToken();
    if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) {
      final String filterParameterName=token.substring(1);
      final String[] parts=LoadQueryInfluencers.parseFilterParameterName(filterParameterName);
      final FilterImpl filter=(FilterImpl)walker.getEnabledFilters().get(parts[0]);
      final Object value=filter.getParameter(parts[1]);
      final Type type=filter.getFilterDefinition().getParameterType(parts[1]);
      final String typeBindFragment=StringHelper.join(",",ArrayHelper.fillArray("?",type.getColumnSpan(walker.getSessionFactoryHelper().getFactory())));
      final String bindFragment=(value != null && Collection.class.isInstance(value)) ? StringHelper.join(",",ArrayHelper.fillArray(typeBindFragment,((Collection)value).size())) : typeBindFragment;
      result.append(bindFragment);
      container.addEmbeddedParameter(new DynamicFilterParameterSpecification(parts[0],parts[1],type));
    }
 else {
      result.append(token);
    }
  }
  container.setText(result.toString());
}
