{
  final Map merged=new HashMap();
  if (persistenceUnit.getProperties() != null) {
    merged.putAll(persistenceUnit.getProperties());
  }
  merged.put(AvailableSettings.PERSISTENCE_UNIT_NAME,persistenceUnit.getName());
  final ValueHolder<ConfigLoader> configLoaderHolder=new ValueHolder<ConfigLoader>(new ValueHolder.DeferredInitializer<ConfigLoader>(){
    @Override public ConfigLoader initialize(){
      return new ConfigLoader(bootstrapServiceRegistry);
    }
  }
);
{
    final String cfgXmlResourceName=(String)merged.remove(AvailableSettings.CFG_FILE);
    if (StringHelper.isNotEmpty(cfgXmlResourceName)) {
      JaxbHibernateConfiguration configurationElement=configLoaderHolder.getValue().loadConfigXmlResource(cfgXmlResourceName);
      processHibernateConfigurationElement(configurationElement,merged);
    }
  }
{
    final String cfgXmlResourceName=(String)integrationSettings.get(AvailableSettings.CFG_FILE);
    if (StringHelper.isNotEmpty(cfgXmlResourceName)) {
      integrationSettings.remove(AvailableSettings.CFG_FILE);
      JaxbHibernateConfiguration configurationElement=configLoaderHolder.getValue().loadConfigXmlResource(cfgXmlResourceName);
      processHibernateConfigurationElement(configurationElement,merged);
    }
  }
  merged.putAll(integrationSettings);
  if (!merged.containsKey(AvailableSettings.VALIDATION_MODE)) {
    if (persistenceUnit.getValidationMode() != null) {
      merged.put(AvailableSettings.VALIDATION_MODE,persistenceUnit.getValidationMode());
    }
  }
  if (!merged.containsKey(AvailableSettings.SHARED_CACHE_MODE)) {
    if (persistenceUnit.getSharedCacheMode() != null) {
      merged.put(AvailableSettings.SHARED_CACHE_MODE,persistenceUnit.getSharedCacheMode());
    }
  }
  Iterator itr=merged.entrySet().iterator();
  while (itr.hasNext()) {
    final Map.Entry entry=(Map.Entry)itr.next();
    if (entry.getValue() == null) {
      itr.remove();
    }
  }
  return merged;
}
