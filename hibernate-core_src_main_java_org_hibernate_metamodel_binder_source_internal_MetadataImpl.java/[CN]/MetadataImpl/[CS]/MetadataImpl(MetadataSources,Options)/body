{
  this.serviceRegistry=metadataSources.getServiceRegistry();
  this.options=options;
  this.mappingDefaults=new MappingDefaultsImpl();
  final SourceProcessor[] sourceProcessors;
  if (options.getSourceProcessingOrder() == SourceProcessingOrder.HBM_FIRST) {
    sourceProcessors=new SourceProcessor[]{new HbmSourceProcessorImpl(this),new AnnotationsSourceProcessor(this)};
  }
 else {
    sourceProcessors=new SourceProcessor[]{new AnnotationsSourceProcessor(this),new HbmSourceProcessorImpl(this)};
  }
  this.classLoaderService=new org.hibernate.internal.util.Value<ClassLoaderService>(new org.hibernate.internal.util.Value.DeferredInitializer<ClassLoaderService>(){
    @Override public ClassLoaderService initialize(){
      return serviceRegistry.getService(ClassLoaderService.class);
    }
  }
);
  this.persisterClassResolverService=new org.hibernate.internal.util.Value<PersisterClassResolver>(new org.hibernate.internal.util.Value.DeferredInitializer<PersisterClassResolver>(){
    @Override public PersisterClassResolver initialize(){
      return serviceRegistry.getService(PersisterClassResolver.class);
    }
  }
);
  final ArrayList<String> processedEntityNames=new ArrayList<String>();
  prepare(sourceProcessors,metadataSources);
  bindIndependentMetadata(sourceProcessors,metadataSources);
  bindTypeDependentMetadata(sourceProcessors,metadataSources);
  bindMappingMetadata(sourceProcessors,metadataSources,processedEntityNames);
  bindMappingDependentMetadata(sourceProcessors,metadataSources);
  new EntityReferenceResolver(this).resolve();
  new AttributeTypeResolver(this).resolve();
}
