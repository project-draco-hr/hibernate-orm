{
  if (!hibernateExtension.enhance.shouldApply()) {
    return;
  }
  for (  final SourceSet sourceSet : hibernateExtension.getSourceSets()) {
    project.getLogger().debug("Applying Hibernate enhancement action to SourceSet.{}",sourceSet.getName());
    final Task compileTask=project.getTasks().findByName(sourceSet.getCompileJavaTaskName());
    compileTask.doLast(new Action<Task>(){
      @Override public void execute(      Task task){
        project.getLogger().debug("Starting Hibernate enhancement on SourceSet.{}",sourceSet.getName());
        final ClassLoader classLoader=toClassLoader(sourceSet.getRuntimeClasspath());
        EnhancementContext enhancementContext=new DefaultEnhancementContext(){
          @Override public ClassLoader getLoadingClassLoader(){
            return classLoader;
          }
          @Override public boolean doBiDirectionalAssociationManagement(          CtField field){
            return hibernateExtension.enhance.getEnableAssociationManagement();
          }
          @Override public boolean doDirtyCheckingInline(          CtClass classDescriptor){
            return hibernateExtension.enhance.getEnableDirtyTracking();
          }
          @Override public boolean hasLazyLoadableAttributes(          CtClass classDescriptor){
            return hibernateExtension.enhance.getEnableLazyInitialization();
          }
          @Override public boolean isLazyLoadable(          CtField field){
            return hibernateExtension.enhance.getEnableLazyInitialization();
          }
          @Override public boolean doExtendedEnhancement(          CtClass classDescriptor){
            return hibernateExtension.enhance.getEnableFieldAccessEnhancement();
          }
        }
;
        if (hibernateExtension.enhance.getEnableFieldAccessEnhancement()) {
          logger.warn("Extended enhancement is enabled. Classes other than entities may be modified. You should consider access the entities using getter/setter methods and disable this property. Use at your own risk.");
        }
        final Enhancer enhancer=new Enhancer(enhancementContext);
        final ClassPool classPool=new ClassPool(false);
        final FileTree fileTree=project.fileTree(sourceSet.getOutput().getClassesDir());
        for (        File file : fileTree) {
          if (!file.getName().endsWith(".class")) {
            continue;
          }
          final CtClass ctClass=toCtClass(file,classPool);
          if (!enhancementContext.isEntityClass(ctClass) && !enhancementContext.isCompositeClass(ctClass)) {
            logger.info("Skipping class [" + file.getAbsolutePath() + "], not an entity nor embeddable");
            continue;
          }
          final byte[] enhancedBytecode=doEnhancement(ctClass,enhancer);
          writeOutEnhancedClass(enhancedBytecode,ctClass,file);
          logger.info("Successfully enhanced class [" + ctClass.getName() + "]");
        }
      }
    }
);
  }
}
