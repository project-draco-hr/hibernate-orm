{
  super();
  registerColumnType(GeoDBGeometryTypeDescriptor.INSTANCE.getSqlType(),GeoDBGeometryTypeDescriptor.INSTANCE.getTypeName());
  registerFunction("geometrytype",new StandardSQLFunction("GeometryType",StandardBasicTypes.STRING));
  registerFunction("srid",new StandardSQLFunction("ST_SRID",StandardBasicTypes.INTEGER));
  registerFunction("envelope",new StandardSQLFunction("ST_Envelope",JTSGeometryType.INSTANCE));
  registerFunction("astext",new StandardSQLFunction("ST_AsText",StandardBasicTypes.STRING));
  registerFunction("asbinary",new StandardSQLFunction("ST_AsEWKB",StandardBasicTypes.BINARY));
  registerFunction("isempty",new StandardSQLFunction("ST_IsEmpty",StandardBasicTypes.BOOLEAN));
  registerFunction("issimple",new StandardSQLFunction("ST_IsSimple",StandardBasicTypes.BOOLEAN));
  registerFunction("overlaps",new StandardSQLFunction("ST_Overlaps",StandardBasicTypes.BOOLEAN));
  registerFunction("intersects",new StandardSQLFunction("ST_Intersects",StandardBasicTypes.BOOLEAN));
  registerFunction("equals",new StandardSQLFunction("ST_Equals",StandardBasicTypes.BOOLEAN));
  registerFunction("contains",new StandardSQLFunction("ST_Contains",StandardBasicTypes.BOOLEAN));
  registerFunction("crosses",new StandardSQLFunction("ST_Crosses",StandardBasicTypes.BOOLEAN));
  registerFunction("disjoint",new StandardSQLFunction("ST_Disjoint",StandardBasicTypes.BOOLEAN));
  registerFunction("touches",new StandardSQLFunction("ST_Touches",StandardBasicTypes.BOOLEAN));
  registerFunction("within",new StandardSQLFunction("ST_Within",StandardBasicTypes.BOOLEAN));
  registerFunction("distance",new StandardSQLFunction("ST_Distance",StandardBasicTypes.DOUBLE));
  registerFunction("buffer",new StandardSQLFunction("ST_Buffer",JTSGeometryType.INSTANCE));
  registerFunction("dwithin",new StandardSQLFunction("ST_DWithin",StandardBasicTypes.BOOLEAN));
}
