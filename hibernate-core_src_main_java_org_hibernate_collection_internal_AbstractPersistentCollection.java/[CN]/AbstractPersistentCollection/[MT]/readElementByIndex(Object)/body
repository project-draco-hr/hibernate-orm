{
  if (!initialized) {
class ExtraLazyElementByIndexReader implements LazyInitializationWork {
      private boolean isExtraLazy;
      private Object element;
      @Override public Object doWork(){
        CollectionEntry entry=session.getPersistenceContext().getCollectionEntry(AbstractPersistentCollection.this);
        CollectionPersister persister=entry.getLoadedPersister();
        isExtraLazy=persister.isExtraLazy();
        if (isExtraLazy) {
          if (hasQueuedOperations()) {
            session.flush();
          }
          element=persister.getElementByIndex(entry.getLoadedKey(),index,session,owner);
        }
 else {
          read();
        }
        return null;
      }
    }
    ExtraLazyElementByIndexReader reader=new ExtraLazyElementByIndexReader();
    withTemporarySessionIfNeeded(reader);
    if (reader.isExtraLazy) {
      return reader.element;
    }
  }
  return UNKNOWN;
}
