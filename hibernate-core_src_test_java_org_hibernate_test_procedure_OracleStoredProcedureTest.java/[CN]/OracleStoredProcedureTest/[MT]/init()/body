{
  EntityManager entityManager=createEntityManager();
  entityManager.getTransaction().begin();
  try {
    Session session=entityManager.unwrap(Session.class);
    session.doWork(new Work(){
      @Override public void execute(      Connection connection) throws SQLException {
        Statement statement=null;
        try {
          statement=connection.createStatement();
          statement.executeUpdate("CREATE OR REPLACE PROCEDURE sp_count_phones (  " + "   personId IN NUMBER,  " + "   phoneCount OUT NUMBER )  "+ "AS  "+ "BEGIN  "+ "    SELECT COUNT(*) INTO phoneCount  "+ "    FROM phone  "+ "    WHERE person_id = personId; "+ "END;");
          statement.executeUpdate("CREATE OR REPLACE PROCEDURE sp_person_phones ( " + "   personId IN NUMBER, " + "   personPhones OUT SYS_REFCURSOR ) "+ "AS  "+ "BEGIN "+ "    OPEN personPhones FOR "+ "    SELECT *"+ "    FROM phone "+ "    WHERE person_id = personId; "+ "END;");
          statement.executeUpdate("CREATE OR REPLACE FUNCTION fn_count_phones ( " + "    personId IN NUMBER ) " + "    RETURN NUMBER "+ "IS "+ "    phoneCount NUMBER; "+ "BEGIN "+ "    SELECT COUNT(*) INTO phoneCount "+ "    FROM phone "+ "    WHERE person_id = personId; "+ "    RETURN( phoneCount ); "+ "END;");
          statement.executeUpdate("CREATE OR REPLACE FUNCTION fn_person_and_phones ( " + "    personId IN NUMBER ) " + "    RETURN SYS_REFCURSOR "+ "IS "+ "    personAndPhones SYS_REFCURSOR; "+ "BEGIN "+ "   OPEN personAndPhones FOR "+ "        SELECT "+ "            pr.id AS \"pr.id\", "+ "            pr.name AS \"pr.name\", "+ "            pr.nickName AS \"pr.nickName\", "+ "            pr.address AS \"pr.address\", "+ "            pr.createdOn AS \"pr.createdOn\", "+ "            pr.version AS \"pr.version\", "+ "            ph.id AS \"ph.id\", "+ "            ph.person_id AS \"ph.person_id\", "+ "            ph.phone_number AS \"ph.phone_number\" "+ "       FROM person pr "+ "       JOIN phone ph ON pr.id = ph.person_id "+ "       WHERE pr.id = personId; "+ "   RETURN personAndPhones; "+ "END;");
        }
  finally {
          if (statement != null) {
            statement.close();
          }
        }
      }
    }
);
  }
  finally {
    entityManager.getTransaction().rollback();
    entityManager.close();
  }
  entityManager=createEntityManager();
  entityManager.getTransaction().begin();
  try {
    Person person1=new Person("John Doe");
    person1.setNickName("JD");
    person1.setAddress("Earth");
    person1.setCreatedOn(Timestamp.from(LocalDateTime.of(2000,1,1,0,0,0).toInstant(ZoneOffset.UTC)));
    entityManager.persist(person1);
    Phone phone1=new Phone("123-456-7890");
    phone1.setId(1L);
    person1.addPhone(phone1);
    Phone phone2=new Phone("098_765-4321");
    phone2.setId(2L);
    person1.addPhone(phone2);
    entityManager.getTransaction().commit();
  }
  finally {
    entityManager.close();
  }
}
