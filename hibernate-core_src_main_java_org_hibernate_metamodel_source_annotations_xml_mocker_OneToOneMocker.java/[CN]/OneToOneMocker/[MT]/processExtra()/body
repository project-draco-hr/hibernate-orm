{
  List<AnnotationValue> annotationValueList=new ArrayList<AnnotationValue>();
  MockHelper.classValue("targetEntity",oneToOne.getTargetEntity(),annotationValueList,indexBuilder.getServiceRegistry());
  MockHelper.enumValue("fetch",FETCH_TYPE,oneToOne.getFetch(),annotationValueList);
  MockHelper.booleanValue("optional",oneToOne.isOptional(),annotationValueList);
  MockHelper.booleanValue("orphanRemoval",oneToOne.isOrphanRemoval(),annotationValueList);
  MockHelper.stringValue("mappedBy",oneToOne.getMappedBy(),annotationValueList);
  MockHelper.cascadeValue("cascade",oneToOne.getCascade(),isDefaultCascadePersist(),annotationValueList);
  create(ONE_TO_ONE,annotationValueList);
  parserPrimaryKeyJoinColumnList(oneToOne.getPrimaryKeyJoinColumn(),getTarget());
  parserJoinColumnList(oneToOne.getJoinColumn(),getTarget());
  parserJoinTable(oneToOne.getJoinTable(),getTarget());
  if (oneToOne.getMapsId() != null) {
    create(MAPS_ID,MockHelper.stringValueArray("value",oneToOne.getMapsId()));
  }
  if (oneToOne.isId() != null && oneToOne.isId()) {
    create(ID);
  }
}
