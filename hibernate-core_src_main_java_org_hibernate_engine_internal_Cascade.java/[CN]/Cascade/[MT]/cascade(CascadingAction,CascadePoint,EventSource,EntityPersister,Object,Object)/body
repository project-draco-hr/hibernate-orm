{
  if (persister.hasCascades() || action.requiresNoCascadeChecking()) {
    final boolean traceEnabled=LOG.isTraceEnabled();
    if (traceEnabled) {
      LOG.tracev("Processing cascade {0} for: {1}",action,persister.getEntityName());
    }
    final Type[] types=persister.getPropertyTypes();
    final String[] propertyNames=persister.getPropertyNames();
    final CascadeStyle[] cascadeStyles=persister.getPropertyCascadeStyles();
    final boolean hasUninitializedLazyProperties=persister.hasUninitializedLazyProperties(parent);
    final int componentPathStackDepth=0;
    for (int i=0; i < types.length; i++) {
      final CascadeStyle style=cascadeStyles[i];
      final String propertyName=propertyNames[i];
      if (style.doCascade(action)) {
        Object child;
        if (hasUninitializedLazyProperties && persister.getPropertyLaziness()[i] && action.performOnLazyProperty()) {
          LazyAttributeLoadingInterceptor interceptor=persister.getInstrumentationMetadata().extractInterceptor(parent);
          child=interceptor.fetchAttribute(parent,propertyName);
        }
 else {
          child=persister.getPropertyValue(parent,i);
        }
        cascadeProperty(action,cascadePoint,eventSource,componentPathStackDepth,parent,child,types[i],style,propertyName,anything,false);
      }
 else       if (action.requiresNoCascadeChecking()) {
        action.noCascade(eventSource,parent,persister,types[i],i);
      }
    }
    if (traceEnabled) {
      LOG.tracev("Done processing cascade {0} for: {1}",action,persister.getEntityName());
    }
  }
}
