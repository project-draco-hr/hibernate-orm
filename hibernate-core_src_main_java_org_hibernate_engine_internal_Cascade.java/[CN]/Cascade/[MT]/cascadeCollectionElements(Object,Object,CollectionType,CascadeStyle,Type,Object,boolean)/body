{
  boolean reallyDoCascade=style.reallyDoCascade(action) && child != CollectionType.UNFETCHED_COLLECTION;
  if (reallyDoCascade) {
    final boolean traceEnabled=LOG.isTraceEnabled();
    if (traceEnabled) {
      LOG.tracev("Cascade {0} for collection: {1}",action,collectionType.getRole());
    }
    Iterator iter=action.getCascadableChildrenIterator(eventSource,collectionType,child);
    while (iter.hasNext()) {
      cascadeProperty(parent,iter.next(),elemType,style,null,anything,isCascadeDeleteEnabled);
    }
    if (traceEnabled) {
      LOG.tracev("Done cascade {0} for collection: {1}",action,collectionType.getRole());
    }
  }
  final boolean deleteOrphans=style.hasOrphanDelete() && action.deleteOrphans() && elemType.isEntityType()&& child instanceof PersistentCollection;
  if (deleteOrphans) {
    final boolean traceEnabled=LOG.isTraceEnabled();
    if (traceEnabled) {
      LOG.tracev("Deleting orphans for collection: {0}",collectionType.getRole());
    }
    final String entityName=collectionType.getAssociatedEntityName(eventSource.getFactory());
    deleteOrphans(entityName,(PersistentCollection)child);
    if (traceEnabled) {
      LOG.tracev("Done deleting orphans for collection: {0}",collectionType.getRole());
    }
  }
}
