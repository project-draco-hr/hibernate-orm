{
  final String queryName=prefix + namedQueryBinding.getName();
  final NamedSQLQueryDefinitionBuilder builder=new NamedSQLQueryDefinitionBuilder().setName(queryName).setComment(namedQueryBinding.getComment()).setCacheable(namedQueryBinding.isCacheable()).setCacheMode(namedQueryBinding.getCacheMode()).setCacheRegion(namedQueryBinding.getCacheRegion()).setTimeout(namedQueryBinding.getTimeout()).setReadOnly(namedQueryBinding.isReadOnly()).setFlushMode(namedQueryBinding.getFlushMode()).setFetchSize(namedQueryBinding.getFetchSize()).setCallable(namedQueryBinding.isCallable()).setResultSetRef(namedQueryBinding.getResultsetRef());
  final ImplicitResultSetMappingDefinition.Builder implicitResultSetMappingBuilder=new ImplicitResultSetMappingDefinition.Builder(queryName);
  boolean foundQuery=false;
  for (  Object content : namedQueryBinding.getContent()) {
    final boolean wasQuery=processNamedQueryContentItem(content,builder,implicitResultSetMappingBuilder,namedQueryBinding,context);
    if (wasQuery) {
      foundQuery=true;
    }
  }
  if (!foundQuery) {
    throw new org.hibernate.boot.MappingException(String.format("Named native query [%s] did not specify query string",namedQueryBinding.getName()),context.getOrigin());
  }
  if (implicitResultSetMappingBuilder.hasAnyReturns()) {
    if (StringHelper.isNotEmpty(namedQueryBinding.getResultsetRef())) {
      throw new org.hibernate.boot.MappingException(String.format("Named native query [%s] specified both a resultset-ref and an inline mapping of results",namedQueryBinding.getName()),context.getOrigin());
    }
    final ImplicitResultSetMappingDefinition implicitResultSetMappingDefinition=implicitResultSetMappingBuilder.build();
    builder.setResultSetRef(implicitResultSetMappingDefinition.getName());
    context.getMetadataCollector().addSecondPass(new SecondPass(){
      @Override public void doSecondPass(      Map persistentClasses) throws MappingException {
        ResultSetMappingDefinition resultSetMappingDefinition=ResultSetMappingBinder.bind(implicitResultSetMappingDefinition,context);
        context.getMetadataCollector().addResultSetMapping(resultSetMappingDefinition);
        NativeSQLQueryReturn[] newQueryReturns=resultSetMappingDefinition.getQueryReturns();
        if (newQueryReturns != null && newQueryReturns.length > 0) {
          List<NativeSQLQueryReturn> queryReturnList=new ArrayList<NativeSQLQueryReturn>();
          NamedSQLQueryDefinition queryDefinition=context.getMetadataCollector().getNamedNativeQueryDefinition(queryName);
          NativeSQLQueryReturn[] existingQueryReturns=queryDefinition.getQueryReturns();
          if (existingQueryReturns != null && existingQueryReturns.length > 0) {
            for (            NativeSQLQueryReturn queryReturn : existingQueryReturns) {
              queryReturnList.add(queryReturn);
            }
          }
          for (          NativeSQLQueryReturn queryReturn : newQueryReturns) {
            queryReturnList.add(queryReturn);
          }
          NativeSQLQueryReturn[] allQueryReturns=queryReturnList.toArray(new NativeSQLQueryReturn[queryReturnList.size()]);
          queryDefinition.setQueryReturns(allQueryReturns);
        }
      }
    }
);
  }
  context.getMetadataCollector().addNamedNativeQuery(builder.createNamedQueryDefinition());
}
