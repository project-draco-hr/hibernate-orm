{
  CascadeStyles.registerCascadeStyle("persist",new PersistCascadeStyle());
  final EventListenerRegistry eventListenerRegistry=serviceRegistry.getService(EventListenerRegistry.class);
  eventListenerRegistry.addDuplicationStrategy(JPA_DUPLICATION_STRATEGY);
  eventListenerRegistry.setListeners(EventType.AUTO_FLUSH,JpaAutoFlushEventListener.INSTANCE);
  eventListenerRegistry.setListeners(EventType.DELETE,new JpaDeleteEventListener());
  eventListenerRegistry.setListeners(EventType.FLUSH_ENTITY,new JpaFlushEntityEventListener());
  eventListenerRegistry.setListeners(EventType.FLUSH,JpaFlushEventListener.INSTANCE);
  eventListenerRegistry.setListeners(EventType.MERGE,new JpaMergeEventListener());
  eventListenerRegistry.setListeners(EventType.PERSIST,new JpaPersistEventListener());
  eventListenerRegistry.setListeners(EventType.PERSIST_ONFLUSH,new JpaPersistOnFlushEventListener());
  eventListenerRegistry.setListeners(EventType.SAVE,new JpaSaveEventListener());
  eventListenerRegistry.setListeners(EventType.SAVE_UPDATE,new JpaSaveOrUpdateEventListener());
  eventListenerRegistry.prependListeners(EventType.POST_DELETE,new JpaPostDeleteEventListener());
  eventListenerRegistry.prependListeners(EventType.POST_INSERT,new JpaPostInsertEventListener());
  eventListenerRegistry.prependListeners(EventType.POST_LOAD,new JpaPostLoadEventListener());
  eventListenerRegistry.prependListeners(EventType.POST_UPDATE,new JpaPostUpdateEventListener());
  final ConfigurationService cfgService=serviceRegistry.getService(ConfigurationService.class);
  for (  Map.Entry entry : ((Map<?,?>)cfgService.getSettings()).entrySet()) {
    if (!String.class.isInstance(entry.getKey())) {
      continue;
    }
    final String propertyName=(String)entry.getKey();
    if (!propertyName.startsWith(AvailableSettings.EVENT_LISTENER_PREFIX)) {
      continue;
    }
    final String eventTypeName=propertyName.substring(AvailableSettings.EVENT_LISTENER_PREFIX.length() + 1);
    final EventType eventType=EventType.resolveEventTypeByName(eventTypeName);
    final EventListenerGroup eventListenerGroup=eventListenerRegistry.getEventListenerGroup(eventType);
    for (    String listenerImpl : ((String)entry.getValue()).split(" ,")) {
      eventListenerGroup.appendListener(instantiate(listenerImpl,serviceRegistry));
    }
  }
  final ReflectionManager reflectionManager=((MetadataImpl)metadata).getMetadataBuildingOptions().getReflectionManager();
  this.callbackRegistry=new CallbackRegistryImpl();
  this.jpaListenerFactory=ListenerFactoryBuilder.buildListenerFactory(sessionFactory.getSessionFactoryOptions());
  this.callbackBuilder=new CallbackBuilderLegacyImpl(jpaListenerFactory,reflectionManager);
  for (  PersistentClass persistentClass : metadata.getEntityBindings()) {
    if (persistentClass.getClassName() == null) {
      continue;
    }
    callbackBuilder.buildCallbacksForEntity(persistentClass.getClassName(),callbackRegistry);
  }
  for (  EventType eventType : EventType.values()) {
    final EventListenerGroup eventListenerGroup=eventListenerRegistry.getEventListenerGroup(eventType);
    for (    Object listener : eventListenerGroup.listeners()) {
      if (CallbackRegistryConsumer.class.isInstance(listener)) {
        ((CallbackRegistryConsumer)listener).injectCallbackRegistry(callbackRegistry);
      }
    }
  }
}
