{
  final boolean traceEnabled=LOG.isTraceEnabled();
  if (traceEnabled) {
    LOG.trace("Wrapping up metadata context...");
  }
  boolean staticMetamodelScanEnabled=JpaStaticMetaModelPopulationSetting.determineJpaMetaModelPopulationSetting(sessionFactory.getProperties()) != JpaStaticMetaModelPopulationSetting.DISABLED;
  for (  Object mapping : orderedMappings) {
    if (PersistentClass.class.isAssignableFrom(mapping.getClass())) {
      @SuppressWarnings("unchecked") final PersistentClass safeMapping=(PersistentClass)mapping;
      if (traceEnabled) {
        LOG.trace("Starting entity [" + safeMapping.getEntityName() + ']');
      }
      try {
        final EntityTypeImpl<?> jpa2Mapping=entityTypesByPersistentClass.get(safeMapping);
        applyIdMetadata(safeMapping,jpa2Mapping);
        applyVersionAttribute(safeMapping,jpa2Mapping);
        Iterator<Property> properties=safeMapping.getDeclaredPropertyIterator();
        while (properties.hasNext()) {
          final Property property=properties.next();
          if (property.getValue() == safeMapping.getIdentifierMapper()) {
            continue;
          }
          if (safeMapping.isVersioned() && property == safeMapping.getVersion()) {
            continue;
          }
          final Attribute attribute=attributeFactory.buildAttribute(jpa2Mapping,property);
          if (attribute != null) {
            jpa2Mapping.getBuilder().addAttribute(attribute);
          }
        }
        jpa2Mapping.lock();
        if (staticMetamodelScanEnabled) {
          populateStaticMetamodel(jpa2Mapping);
        }
      }
  finally {
        if (traceEnabled) {
          LOG.trace("Completed entity [" + safeMapping.getEntityName() + ']');
        }
      }
    }
 else     if (MappedSuperclass.class.isAssignableFrom(mapping.getClass())) {
      @SuppressWarnings("unchecked") final MappedSuperclass safeMapping=(MappedSuperclass)mapping;
      if (traceEnabled) {
        LOG.trace("Starting mapped superclass [" + safeMapping.getMappedClass().getName() + ']');
      }
      try {
        final MappedSuperclassTypeImpl<?> jpa2Mapping=mappedSuperclassByMappedSuperclassMapping.get(safeMapping);
        applyIdMetadata(safeMapping,jpa2Mapping);
        applyVersionAttribute(safeMapping,jpa2Mapping);
        Iterator<Property> properties=safeMapping.getDeclaredPropertyIterator();
        while (properties.hasNext()) {
          final Property property=properties.next();
          if (safeMapping.isVersioned() && property == safeMapping.getVersion()) {
            continue;
          }
          final Attribute attribute=attributeFactory.buildAttribute(jpa2Mapping,property);
          if (attribute != null) {
            jpa2Mapping.getBuilder().addAttribute(attribute);
          }
        }
        jpa2Mapping.lock();
        if (staticMetamodelScanEnabled) {
          populateStaticMetamodel(jpa2Mapping);
        }
      }
  finally {
        if (traceEnabled) {
          LOG.trace("Completed mapped superclass [" + safeMapping.getMappedClass().getName() + ']');
        }
      }
    }
 else {
      throw new AssertionFailure("Unexpected mapping type: " + mapping.getClass());
    }
  }
  if (staticMetamodelScanEnabled) {
    for (    EmbeddableTypeImpl embeddable : embeddables.values()) {
      populateStaticMetamodel(embeddable);
    }
  }
}
