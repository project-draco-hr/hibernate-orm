{
  super(source);
  if (entityPersister == null) {
    throw new IllegalArgumentException("EntityPersister is required for loading");
  }
  if (!entityPersister.hasNaturalIdentifier()) {
    throw new HibernateException("Entity did not define a natural-id");
  }
  if (naturalIdValues == null || naturalIdValues.isEmpty()) {
    throw new IllegalArgumentException("natural-id to load is required");
  }
  if (entityPersister.getNaturalIdentifierProperties().length != naturalIdValues.size()) {
    throw new HibernateException(String.format("Entity [%s] defines its natural-id with %d properties but only %d were specified",entityPersister.getEntityName(),entityPersister.getNaturalIdentifierProperties().length,naturalIdValues.size()));
  }
  if (lockOptions.getLockMode() == LockMode.WRITE) {
    throw new IllegalArgumentException("Invalid lock mode for loading");
  }
 else   if (lockOptions.getLockMode() == null) {
    lockOptions.setLockMode(DEFAULT_LOCK_MODE);
  }
  this.entityPersister=entityPersister;
  this.naturalIdValues=naturalIdValues;
  this.lockOptions=lockOptions;
  int[] naturalIdPropertyPositions=entityPersister.getNaturalIdentifierProperties();
  orderedNaturalIdValues=new Object[naturalIdPropertyPositions.length];
  int i=0;
  for (  int position : naturalIdPropertyPositions) {
    final String propertyName=entityPersister.getPropertyNames()[position];
    if (!naturalIdValues.containsKey(propertyName)) {
      throw new HibernateException(String.format("No value specified for natural-id property %s#%s",getEntityName(),propertyName));
    }
    orderedNaturalIdValues[i++]=naturalIdValues.get(entityPersister.getPropertyNames()[position]);
  }
}
