{
  Statistics stats=sessionFactory().getStatistics();
  stats.setStatisticsEnabled(true);
  stats.clear();
  assertEquals("Cache hits should be empty",0,stats.getNaturalIdCacheHitCount());
  assertEquals("Cache misses should be empty",0,stats.getNaturalIdCacheMissCount());
  assertEquals("Cache put should be empty",0,stats.getNaturalIdCachePutCount());
  assertEquals("Query count should be empty",0,stats.getNaturalIdQueryExecutionCount());
  Building b1=new Building();
  b1.setName("Computer Science");
  b1.setAddress("1210 W. Dayton St.");
  b1.setCity("Madison");
  b1.setState("WI");
  Session s=openSession();
  Transaction tx=s.beginTransaction();
  s.persist(b1);
  tx.commit();
  s.close();
  assertEquals("Cache hits should be empty",0,stats.getNaturalIdCacheHitCount());
  assertEquals("Cache misses should be empty",0,stats.getNaturalIdCacheMissCount());
  assertEquals("Cache put should be one afterQuery insert",1,stats.getNaturalIdCachePutCount());
  assertEquals("Query count should be empty",0,stats.getNaturalIdQueryExecutionCount());
  s=openSession();
  tx=s.beginTransaction();
  s.getSessionFactory().getCache().evictNaturalIdRegions();
  stats.clear();
  NaturalIdLoadAccess naturalIdLoader=s.byNaturalId(Building.class);
  naturalIdLoader.using("address","1210 W. Dayton St.").using("city","Madison").using("state","WI");
  Building building=(Building)naturalIdLoader.load();
  assertNotNull(building);
  assertEquals("Cache hits should be empty",0,stats.getNaturalIdCacheHitCount());
  assertEquals("Cache misses should be one afterQuery first query",1,stats.getNaturalIdCacheMissCount());
  assertEquals("Cache put should be one afterQuery first query",1,stats.getNaturalIdCachePutCount());
  assertEquals("Query count should be one afterQuery first query",1,stats.getNaturalIdQueryExecutionCount());
  tx.rollback();
  s.close();
  s=openSession();
  tx=s.beginTransaction();
  naturalIdLoader=s.byNaturalId(Building.class);
  naturalIdLoader.using("address","1210 W. Dayton St.").using("city","Madison").using("state","WI");
  building=(Building)naturalIdLoader.load();
  assertNotNull(building);
  assertEquals("Cache hits should be one afterQuery second query",1,stats.getNaturalIdCacheHitCount());
  assertEquals("Cache misses should be one afterQuery second query",1,stats.getNaturalIdCacheMissCount());
  assertEquals("Cache put should be one afterQuery second query",1,stats.getNaturalIdCachePutCount());
  assertEquals("Query count should be one afterQuery second query",1,stats.getNaturalIdQueryExecutionCount());
  s.delete(building);
  building=(Building)naturalIdLoader.load();
  assertNull(building);
  assertEquals("Cache hits should be one afterQuery second query",1,stats.getNaturalIdCacheHitCount());
  assertEquals("Cache misses should be two afterQuery second query",2,stats.getNaturalIdCacheMissCount());
  assertEquals("Cache put should be one afterQuery second query",2,stats.getNaturalIdCachePutCount());
  assertEquals("Query count should be two afterQuery second query",2,stats.getNaturalIdQueryExecutionCount());
  tx.commit();
  s.close();
  s=openSession();
  tx=s.beginTransaction();
  naturalIdLoader=s.byNaturalId(Building.class);
  naturalIdLoader.using("address","1210 W. Dayton St.").using("city","Madison").using("state","WI");
  building=(Building)naturalIdLoader.load();
  assertNull(building);
  assertEquals("Cache hits should be one afterQuery third query",1,stats.getNaturalIdCacheHitCount());
  assertEquals("Cache misses should be one afterQuery third query",3,stats.getNaturalIdCacheMissCount());
  assertEquals("Cache put should be one afterQuery third query",2,stats.getNaturalIdCachePutCount());
  assertEquals("Query count should be one afterQuery third query",3,stats.getNaturalIdQueryExecutionCount());
  tx.rollback();
  s.close();
}
