{
  if (text == null) {
    throw new IllegalIdentifierException("Object name to parse must be specified, but found null");
  }
  String catalogName=null;
  String schemaName=null;
  String name;
  boolean catalogWasQuoted=false;
  boolean schemaWasQuoted=false;
  boolean nameWasQuoted;
  boolean wasQuotedInEntirety=text.startsWith("`") && text.endsWith("`");
  if (wasQuotedInEntirety) {
    text=unquote(text);
  }
  final String[] tokens=text.split("\\.");
  if (tokens.length == 0 || tokens.length == 1) {
    name=text;
  }
 else   if (tokens.length == 2) {
    schemaName=tokens[0];
    name=tokens[1];
  }
 else   if (tokens.length == 3) {
    schemaName=tokens[0];
    catalogName=tokens[1];
    name=tokens[2];
  }
 else {
    throw new HibernateException("Unable to parse object name: " + text);
  }
  nameWasQuoted=Identifier.isQuoted(name);
  if (nameWasQuoted) {
    name=unquote(name);
  }
  if (schemaName != null) {
    schemaWasQuoted=Identifier.isQuoted(schemaName);
    if (schemaWasQuoted) {
      schemaName=unquote(schemaName);
    }
  }
 else   if (defaultSchema != null) {
    schemaName=defaultSchema.getText();
    schemaWasQuoted=defaultSchema.isQuoted();
  }
  if (catalogName != null) {
    catalogWasQuoted=Identifier.isQuoted(catalogName);
    if (catalogWasQuoted) {
      catalogName=unquote(catalogName);
    }
  }
 else   if (defaultCatalog != null) {
    catalogName=defaultCatalog.getText();
    catalogWasQuoted=defaultCatalog.isQuoted();
  }
  return new NameParts(Identifier.toIdentifier(catalogName,wasQuotedInEntirety || catalogWasQuoted),Identifier.toIdentifier(schemaName,wasQuotedInEntirety || schemaWasQuoted),Identifier.toIdentifier(name,wasQuotedInEntirety || nameWasQuoted));
}
