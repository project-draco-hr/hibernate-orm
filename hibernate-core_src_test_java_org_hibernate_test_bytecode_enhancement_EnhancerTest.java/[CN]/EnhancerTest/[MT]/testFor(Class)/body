{
  Enhancer enhancer=new Enhancer(enhancementContext);
  CtClass entityCtClass=generateCtClassForAnEntity(entityClassToEnhance);
  byte[] original=entityCtClass.toBytecode();
  byte[] enhanced=enhancer.enhance(entityCtClass.getName(),original);
  assertFalse("entity was not enhanced",Arrays.equals(original,enhanced));
  ClassLoader cl=new ClassLoader(){
  }
;
  ClassPool cp=new ClassPool(false);
  cp.appendClassPath(new LoaderClassPath(cl));
  CtClass enhancedCtClass=cp.makeClass(new ByteArrayInputStream(enhanced));
  Class entityClass=enhancedCtClass.toClass(cl,this.getClass().getProtectionDomain());
  Object entityInstance=entityClass.newInstance();
  assertTyping(ManagedEntity.class,entityInstance);
  Method setter=entityClass.getMethod(Enhancer.ENTITY_ENTRY_SETTER_NAME,EntityEntry.class);
  Method getter=entityClass.getMethod(Enhancer.ENTITY_ENTRY_GETTER_NAME);
  assertNull(getter.invoke(entityInstance));
  setter.invoke(entityInstance,makeEntityEntry());
  assertNotNull(getter.invoke(entityInstance));
  setter.invoke(entityInstance,new Object[]{null});
  assertNull(getter.invoke(entityInstance));
  Method entityInstanceGetter=entityClass.getMethod(Enhancer.ENTITY_INSTANCE_GETTER_NAME);
  assertSame(entityInstance,entityInstanceGetter.invoke(entityInstance));
  Method previousGetter=entityClass.getMethod(Enhancer.PREVIOUS_GETTER_NAME);
  Method previousSetter=entityClass.getMethod(Enhancer.PREVIOUS_SETTER_NAME,ManagedEntity.class);
  previousSetter.invoke(entityInstance,entityInstance);
  assertSame(entityInstance,previousGetter.invoke(entityInstance));
  Method nextGetter=entityClass.getMethod(Enhancer.PREVIOUS_GETTER_NAME);
  Method nextSetter=entityClass.getMethod(Enhancer.PREVIOUS_SETTER_NAME,ManagedEntity.class);
  nextSetter.invoke(entityInstance,entityInstance);
  assertSame(entityInstance,nextGetter.invoke(entityInstance));
  Method interceptorGetter=entityClass.getMethod(Enhancer.INTERCEPTOR_GETTER_NAME);
  Method interceptorSetter=entityClass.getMethod(Enhancer.INTERCEPTOR_SETTER_NAME,PersistentAttributeInterceptor.class);
  assertNull(interceptorGetter.invoke(entityInstance));
  entityClass.getMethod("getId").invoke(entityInstance);
  interceptorSetter.invoke(entityInstance,new LocalPersistentAttributeInterceptor());
  assertNotNull(interceptorGetter.invoke(entityInstance));
  entityClass.getMethod("getId").invoke(entityInstance);
  entityClass.getMethod("setId",Long.class).invoke(entityInstance,entityClass.getMethod("getId").invoke(entityInstance));
  entityClass.getMethod("setId",Long.class).invoke(entityInstance,1L);
  entityClass.getMethod("isActive").invoke(entityInstance);
  entityClass.getMethod("setActive",boolean.class).invoke(entityInstance,entityClass.getMethod("isActive").invoke(entityInstance));
  entityClass.getMethod("setActive",boolean.class).invoke(entityInstance,true);
  entityClass.getMethod("getSomeNumber").invoke(entityInstance);
  entityClass.getMethod("setSomeNumber",long.class).invoke(entityInstance,entityClass.getMethod("getSomeNumber").invoke(entityInstance));
  entityClass.getMethod("setSomeNumber",long.class).invoke(entityInstance,1L);
}
