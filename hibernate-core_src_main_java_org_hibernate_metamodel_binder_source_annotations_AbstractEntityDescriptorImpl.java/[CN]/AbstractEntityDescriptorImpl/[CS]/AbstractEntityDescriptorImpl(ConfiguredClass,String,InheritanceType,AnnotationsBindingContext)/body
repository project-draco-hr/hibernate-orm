{
  this.configuredClass=configuredClass;
  this.superEntityName=superEntityName;
  this.inheritanceType=inheritanceType;
  this.bindingContext=bindingContext;
  final AnnotationInstance jpaEntityAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),JPADotNames.ENTITY);
  final AnnotationValue explicitJpaEntityName=jpaEntityAnnotation.value("name");
  if (explicitJpaEntityName == null) {
    jpaEntityName=configuredClass.getName();
  }
 else {
    jpaEntityName=explicitJpaEntityName.asString();
  }
  final AnnotationInstance hibernateEntityAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.ENTITY);
  this.dynamicInsert=hibernateEntityAnnotation != null && hibernateEntityAnnotation.value("dynamicInsert") != null && hibernateEntityAnnotation.value("dynamicInsert").asBoolean();
  this.dynamicUpdate=hibernateEntityAnnotation != null && hibernateEntityAnnotation.value("dynamicUpdate") != null && hibernateEntityAnnotation.value("dynamicUpdate").asBoolean();
  this.selectBeforeUpdate=hibernateEntityAnnotation != null && hibernateEntityAnnotation.value("selectBeforeUpdate") != null && hibernateEntityAnnotation.value("selectBeforeUpdate").asBoolean();
  final AnnotationInstance sqlLoaderAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.LOADER);
  this.customLoaderName=sqlLoaderAnnotation == null ? null : sqlLoaderAnnotation.value("namedQuery").asString();
  final AnnotationInstance sqlInsertAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.SQL_INSERT);
  this.customInsert=createCustomSQL(sqlInsertAnnotation);
  final AnnotationInstance sqlUpdateAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.SQL_UPDATE);
  this.customUpdate=createCustomSQL(sqlUpdateAnnotation);
  final AnnotationInstance sqlDeleteAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.SQL_DELETE);
  this.customDelete=createCustomSQL(sqlDeleteAnnotation);
  final AnnotationInstance batchSizeAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.BATCH_SIZE);
  this.batchSize=batchSizeAnnotation == null ? -1 : batchSizeAnnotation.value("size").asInt();
  final AnnotationInstance hibernateProxyAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.PROXY);
  if (hibernateProxyAnnotation != null) {
    this.lazy=hibernateProxyAnnotation.value("lazy") == null || hibernateProxyAnnotation.value("lazy").asBoolean();
    final AnnotationValue proxyClassValue=hibernateProxyAnnotation.value("proxyClass");
    if (proxyClassValue == null) {
      this.proxyInterfaceName=null;
    }
 else {
      this.proxyInterfaceName=bindingContext.locateClassByName(proxyClassValue.asString()).getName();
    }
  }
 else {
    this.lazy=true;
    this.proxyInterfaceName=configuredClass.getName();
  }
  final AnnotationInstance persisterAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.PERSISTER);
  if (persisterAnnotation == null || persisterAnnotation.value("impl") == null) {
    if (hibernateEntityAnnotation != null && hibernateEntityAnnotation.value("persister") != null) {
      this.entityPersisterClass=bindingContext.locateClassByName(hibernateEntityAnnotation.value("persister").asString());
    }
 else {
      this.entityPersisterClass=null;
    }
  }
 else {
    if (hibernateEntityAnnotation != null && hibernateEntityAnnotation.value("persister") != null) {
    }
    this.entityPersisterClass=bindingContext.locateClassByName(persisterAnnotation.value("impl").asString());
  }
  final AnnotationInstance pojoTuplizerAnnotation=locatePojoTuplizerAnnotation();
  if (pojoTuplizerAnnotation == null) {
    tuplizerClass=null;
  }
 else {
    tuplizerClass=bindingContext.locateClassByName(pojoTuplizerAnnotation.value("impl").asString());
  }
  final AnnotationInstance synchronizeAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.SYNCHRONIZE);
  if (synchronizeAnnotation != null) {
    synchronizedTableNames=new HashSet<String>();
    final String[] tableNames=synchronizeAnnotation.value().asStringArray();
    synchronizedTableNames.addAll(Arrays.asList(tableNames));
  }
 else {
    synchronizedTableNames=java.util.Collections.emptySet();
  }
}
