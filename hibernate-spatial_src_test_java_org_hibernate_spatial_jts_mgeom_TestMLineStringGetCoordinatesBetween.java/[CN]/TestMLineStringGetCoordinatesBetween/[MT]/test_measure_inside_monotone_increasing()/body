{
  CoordinateSequence[] result;
  result=incrLine.getCoordinatesBetween(0.5,3.5);
  assertEquals(1,result.length);
  Coordinate[] crds=result[0].toCoordinateArray();
  assertEquals(5,crds.length);
  assertEquals(MCoordinate.create2dWithMeasure(0.5,0.0,0.5),crds[0]);
  assertEquals(MCoordinate.create2dWithMeasure(3.5,0.0,3.5),crds[crds.length - 1]);
  result=incrLine.getCoordinatesBetween(1.0,3.0);
  assertEquals(1,result.length);
  crds=result[0].toCoordinateArray();
  assertEquals(3,crds.length);
  assertEquals(MCoordinate.create2dWithMeasure(1.0,0.0,1.0),crds[0]);
  assertEquals(MCoordinate.create2dWithMeasure(2.0,0.0,2.0),crds[1]);
  assertEquals(MCoordinate.create2dWithMeasure(3.0,0.0,3.0),crds[2]);
  result=incrLine.getCoordinatesBetween(0.0,4.0);
  assertEquals(1,result.length);
  crds=result[0].toCoordinateArray();
  assertEquals(5,crds.length);
  assertEquals(MCoordinate.create2dWithMeasure(0.0,0.0,0.0),crds[0]);
  assertEquals(MCoordinate.create2dWithMeasure(1.0,0.0,1.0),crds[1]);
  assertEquals(MCoordinate.create2dWithMeasure(4.0,0.0,4.0),crds[4]);
  result=incrLine.getCoordinatesBetween(0.5,1.5);
  assertEquals(1,result.length);
  crds=result[0].toCoordinateArray();
  assertEquals(3,crds.length);
  assertEquals(MCoordinate.create2dWithMeasure(0.5,0.0,0.5),crds[0]);
  assertEquals(MCoordinate.create2dWithMeasure(1.5,0.0,1.5),crds[crds.length - 1]);
  result=incrLine.getCoordinatesBetween(3.5,4.0);
  assertEquals(1,result.length);
  crds=result[0].toCoordinateArray();
  assertEquals(2,crds.length);
  assertEquals(MCoordinate.create2dWithMeasure(3.5,0.0,3.5),crds[0]);
  assertEquals(MCoordinate.create2dWithMeasure(4.0,0.0,4.5),crds[crds.length - 1]);
  result=incrLine.getCoordinatesBetween(3.5,3.7);
  assertEquals(1,result.length);
  crds=result[0].toCoordinateArray();
  assertEquals(2,crds.length);
  assertEquals(MCoordinate.create2dWithMeasure(3.5,0.0,3.5),crds[0]);
  assertEquals(MCoordinate.create2dWithMeasure(3.7,0.0,3.7),crds[1]);
  result=incrLine.getCoordinatesBetween(0.5,0.7);
  assertEquals(1,result.length);
  crds=result[0].toCoordinateArray();
  assertEquals(2,crds.length);
  assertEquals(MCoordinate.create2dWithMeasure(0.5,0.0,0.5),crds[0]);
  assertEquals(MCoordinate.create2dWithMeasure(0.7,0.0,0.7),crds[1]);
  result=incrLine.getCoordinatesBetween(-0.5,0.7);
  assertEquals(1,result.length);
  crds=result[0].toCoordinateArray();
  assertEquals(2,crds.length);
  assertEquals(MCoordinate.create2dWithMeasure(0.0,0.0,0.0),crds[0]);
  assertEquals(MCoordinate.create2dWithMeasure(0.7,0.0,0.7),crds[1]);
  result=incrLine.getCoordinatesBetween(3.5,4.7);
  assertEquals(1,result.length);
  crds=result[0].toCoordinateArray();
  assertEquals(2,crds.length);
  assertEquals(MCoordinate.create2dWithMeasure(3.5,0.0,3.5),crds[0]);
  assertEquals(MCoordinate.create2dWithMeasure(4.0,0.0,4.0),crds[1]);
}
