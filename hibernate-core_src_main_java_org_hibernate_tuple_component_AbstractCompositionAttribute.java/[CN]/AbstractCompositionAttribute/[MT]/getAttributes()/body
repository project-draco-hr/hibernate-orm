{
  return new Iterable<AttributeDefinition>(){
    @Override public Iterator<AttributeDefinition> iterator(){
      return new Iterator<AttributeDefinition>(){
        private final int numberOfAttributes=getType().getSubtypes().length;
        private int currentSubAttributeNumber=0;
        private int currentColumnPosition=0;
        @Override public boolean hasNext(){
          return currentSubAttributeNumber < numberOfAttributes;
        }
        @Override public AttributeDefinition next(){
          final int subAttributeNumber=currentSubAttributeNumber;
          currentSubAttributeNumber++;
          final String name=getType().getPropertyNames()[subAttributeNumber];
          final Type type=getType().getSubtypes()[subAttributeNumber];
          int columnPosition=currentColumnPosition;
          currentColumnPosition+=type.getColumnSpan(sessionFactory());
          if (type.isAssociationType()) {
            final AssociationKey associationKey;
            final AssociationType aType=(AssociationType)type;
            final Joinable joinable=aType.getAssociatedJoinable(sessionFactory());
            if (aType.isAnyType()) {
              associationKey=new AssociationKey(JoinHelper.getLHSTableName(aType,attributeNumber(),(OuterJoinLoadable)getSource()),JoinHelper.getLHSColumnNames(aType,attributeNumber(),0,(OuterJoinLoadable)getSource(),sessionFactory()));
            }
 else             if (aType.getForeignKeyDirection() == ForeignKeyDirection.FOREIGN_KEY_FROM_PARENT) {
              final String lhsTableName;
              final String[] lhsColumnNames;
              if (joinable.isCollection()) {
                final QueryableCollection collectionPersister=(QueryableCollection)joinable;
                lhsTableName=collectionPersister.getTableName();
                lhsColumnNames=collectionPersister.getElementColumnNames();
              }
 else {
                final OuterJoinLoadable entityPersister=(OuterJoinLoadable)locateOwningPersister();
                lhsTableName=getLHSTableName(aType,attributeNumber(),entityPersister);
                lhsColumnNames=getLHSColumnNames(aType,attributeNumber(),entityPersister,sessionFactory());
              }
              associationKey=new AssociationKey(lhsTableName,lhsColumnNames);
            }
 else {
              associationKey=new AssociationKey(joinable.getTableName(),getRHSColumnNames(aType,sessionFactory()));
            }
            final CompositeType cType=getType();
            final boolean nullable=cType.getPropertyNullability() == null || cType.getPropertyNullability()[subAttributeNumber];
            return new CompositeBasedAssociationAttribute(AbstractCompositionAttribute.this,sessionFactory(),subAttributeNumber,name,(AssociationType)type,new BaselineAttributeInformation.Builder().setInsertable(AbstractCompositionAttribute.this.isInsertable()).setUpdateable(AbstractCompositionAttribute.this.isUpdateable()).setInsertGenerated(AbstractCompositionAttribute.this.isInsertGenerated()).setUpdateGenerated(AbstractCompositionAttribute.this.isUpdateGenerated()).setNullable(nullable).setDirtyCheckable(true).setVersionable(AbstractCompositionAttribute.this.isVersionable()).setCascadeStyle(getType().getCascadeStyle(subAttributeNumber)).setFetchMode(getType().getFetchMode(subAttributeNumber)).createInformation(),AbstractCompositionAttribute.this.attributeNumber(),associationKey);
          }
 else           if (type.isComponentType()) {
            return new CompositionBasedCompositionAttribute(AbstractCompositionAttribute.this,sessionFactory(),subAttributeNumber,name,(CompositeType)type,new BaselineAttributeInformation.Builder().setInsertable(AbstractCompositionAttribute.this.isInsertable()).setUpdateable(AbstractCompositionAttribute.this.isUpdateable()).setInsertGenerated(AbstractCompositionAttribute.this.isInsertGenerated()).setUpdateGenerated(AbstractCompositionAttribute.this.isUpdateGenerated()).setNullable(getType().getPropertyNullability()[subAttributeNumber]).setDirtyCheckable(true).setVersionable(AbstractCompositionAttribute.this.isVersionable()).setCascadeStyle(getType().getCascadeStyle(subAttributeNumber)).setFetchMode(getType().getFetchMode(subAttributeNumber)).createInformation());
          }
 else {
            final CompositeType cType=getType();
            final boolean nullable=cType.getPropertyNullability() == null || cType.getPropertyNullability()[subAttributeNumber];
            return new CompositeBasedBasicAttribute(AbstractCompositionAttribute.this,sessionFactory(),subAttributeNumber,name,type,new BaselineAttributeInformation.Builder().setInsertable(AbstractCompositionAttribute.this.isInsertable()).setUpdateable(AbstractCompositionAttribute.this.isUpdateable()).setInsertGenerated(AbstractCompositionAttribute.this.isInsertGenerated()).setUpdateGenerated(AbstractCompositionAttribute.this.isUpdateGenerated()).setNullable(nullable).setDirtyCheckable(true).setVersionable(AbstractCompositionAttribute.this.isVersionable()).setCascadeStyle(getType().getCascadeStyle(subAttributeNumber)).setFetchMode(getType().getFetchMode(subAttributeNumber)).createInformation());
          }
        }
        @Override public void remove(){
          throw new UnsupportedOperationException("Remove operation not supported here");
        }
      }
;
    }
  }
;
}
