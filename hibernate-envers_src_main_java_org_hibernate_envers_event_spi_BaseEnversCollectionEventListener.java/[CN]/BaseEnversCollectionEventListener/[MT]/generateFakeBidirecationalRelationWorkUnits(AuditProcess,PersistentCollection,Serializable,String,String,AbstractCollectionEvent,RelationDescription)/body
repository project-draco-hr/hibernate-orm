{
  final List<PersistentCollectionChangeData> collectionChanges=getEnversService().getEntitiesConfigurations().get(collectionEntityName).getPropertyMapper().mapCollectionChanges(event.getSession(),referencingPropertyName,newColl,oldColl,event.getAffectedOwnerIdOrNull());
  final String relatedEntityName=rd.getToEntityName();
  final IdMapper relatedIdMapper=getEnversService().getEntitiesConfigurations().get(relatedEntityName).getIdMapper();
  for (  PersistentCollectionChangeData changeData : collectionChanges) {
    final Object relatedObj=changeData.getChangedElement();
    final Serializable relatedId=(Serializable)relatedIdMapper.mapToIdFromEntity(relatedObj);
    final RevisionType revType=(RevisionType)changeData.getData().get(getEnversService().getAuditEntitiesConfiguration().getRevisionTypePropName());
    final String realRelatedEntityName=event.getSession().bestGuessEntityName(relatedObj);
    final AuditWorkUnit nestedWorkUnit=new CollectionChangeWorkUnit(event.getSession(),realRelatedEntityName,rd.getMappedByPropertyName(),getEnversService(),relatedId,relatedObj);
    auditProcess.addWorkUnit(new FakeBidirectionalRelationWorkUnit(event.getSession(),realRelatedEntityName,getEnversService(),relatedId,referencingPropertyName,event.getAffectedOwnerOrNull(),rd,revType,changeData.getChangedElementIndex(),nestedWorkUnit));
  }
  auditProcess.addWorkUnit(new CollectionChangeWorkUnit(event.getSession(),collectionEntityName,referencingPropertyName,getEnversService(),event.getAffectedOwnerIdOrNull(),event.getAffectedOwnerOrNull()));
}
