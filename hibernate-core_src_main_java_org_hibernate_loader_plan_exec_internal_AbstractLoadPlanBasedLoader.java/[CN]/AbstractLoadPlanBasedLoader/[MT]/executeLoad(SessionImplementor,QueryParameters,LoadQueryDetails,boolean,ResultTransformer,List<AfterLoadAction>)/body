{
  final PersistenceContext persistenceContext=session.getPersistenceContext();
  final boolean defaultReadOnlyOrig=persistenceContext.isDefaultReadOnly();
  if (queryParameters.isReadOnlyInitialized()) {
    persistenceContext.setDefaultReadOnly(queryParameters.isReadOnly());
  }
 else {
    queryParameters.setReadOnly(persistenceContext.isDefaultReadOnly());
  }
  persistenceContext.beforeLoad();
  try {
    List results=null;
    final String sql=loadQueryDetails.getSqlStatement();
    SqlStatementWrapper wrapper=null;
    try {
      wrapper=executeQueryStatement(sql,queryParameters,false,afterLoadActions,session);
      results=loadQueryDetails.getResultSetProcessor().extractResults(wrapper.getResultSet(),session,queryParameters,new NamedParameterContext(){
        @Override public int[] getNamedParameterLocations(        String name){
          return AbstractLoadPlanBasedLoader.this.getNamedParameterLocs(name);
        }
      }
,returnProxies,queryParameters.isReadOnly(),forcedResultTransformer,afterLoadActions);
    }
  finally {
      if (wrapper != null) {
        session.getJdbcCoordinator().getResourceRegistry().release(wrapper.getResultSet(),wrapper.getStatement());
        session.getJdbcCoordinator().getResourceRegistry().release(wrapper.getStatement());
        session.getJdbcCoordinator().afterStatementExecution();
      }
      persistenceContext.afterLoad();
    }
    persistenceContext.initializeNonLazyCollections();
    return results;
  }
  finally {
    persistenceContext.setDefaultReadOnly(defaultReadOnlyOrig);
  }
}
