{
  try {
    SessionFactoryImplementor factory=persister.getFactory();
    Set<String> collectionRoles=factory.getCollectionRolesByEntityParticipant(persister.getEntityName());
    if (collectionRoles == null || collectionRoles.isEmpty()) {
      return;
    }
    for (    String role : collectionRoles) {
      final CollectionPersister collectionPersister=factory.getCollectionPersister(role);
      if (!collectionPersister.hasCache()) {
        continue;
      }
      String mappedBy=collectionPersister.getMappedByProperty();
      if (!collectionPersister.isManyToMany() && mappedBy != null && !mappedBy.isEmpty()) {
        int i=persister.getEntityMetamodel().getPropertyIndex(mappedBy);
        Serializable oldId=null;
        if (oldState != null) {
          oldId=getIdentifier(session,oldState[i]);
        }
        Object ref=persister.getPropertyValue(entity,i);
        Serializable id=getIdentifier(session,ref);
        if ((id != null && !id.equals(oldId)) || (oldId != null && !oldId.equals(id))) {
          if (id != null) {
            evict(id,collectionPersister,session);
          }
          if (oldId != null) {
            evict(oldId,collectionPersister,session);
          }
        }
      }
 else {
        LOG.debug("Evict CollectionRegion " + role);
        final SoftLock softLock=collectionPersister.getCacheAccessStrategy().lockRegion();
        session.getActionQueue().registerProcess(new AfterTransactionCompletionProcess(){
          @Override public void doAfterTransactionCompletion(          boolean success,          SessionImplementor session){
            collectionPersister.getCacheAccessStrategy().unlockRegion(softLock);
          }
        }
);
      }
    }
  }
 catch (  Exception e) {
    if (PROPAGATE_EXCEPTION) {
      throw new IllegalStateException(e);
    }
    LOG.error("",e);
  }
}
