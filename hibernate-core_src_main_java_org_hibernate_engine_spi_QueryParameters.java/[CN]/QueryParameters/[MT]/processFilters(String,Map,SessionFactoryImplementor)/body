{
  if (filters.size() == 0 || !sql.contains(ParserHelper.HQL_VARIABLE_PREFIX)) {
    processedPositionalParameterValues=getPositionalParameterValues();
    processedPositionalParameterTypes=getPositionalParameterTypes();
    processedSQL=sql;
  }
 else {
    final StringTokenizer tokens=new StringTokenizer(sql,SYMBOLS,true);
    StringBuilder result=new StringBuilder();
    List parameters=new ArrayList();
    List parameterTypes=new ArrayList();
    int positionalIndex=0;
    while (tokens.hasMoreTokens()) {
      final String token=tokens.nextToken();
      if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) {
        final String filterParameterName=token.substring(1);
        final String[] parts=LoadQueryInfluencers.parseFilterParameterName(filterParameterName);
        final FilterImpl filter=(FilterImpl)filters.get(parts[0]);
        final Object value=filter.getParameter(parts[1]);
        final Type type=filter.getFilterDefinition().getParameterType(parts[1]);
        if (value != null && Collection.class.isAssignableFrom(value.getClass())) {
          Iterator itr=((Collection)value).iterator();
          while (itr.hasNext()) {
            final Object elementValue=itr.next();
            result.append('?');
            parameters.add(elementValue);
            parameterTypes.add(type);
            if (itr.hasNext()) {
              result.append(", ");
            }
          }
        }
 else {
          result.append('?');
          parameters.add(value);
          parameterTypes.add(type);
        }
      }
 else {
        result.append(token);
        if ("?".equals(token) && positionalIndex < getPositionalParameterValues().length) {
          final Type type=getPositionalParameterTypes()[positionalIndex];
          if (type.isComponentType()) {
            int paramIndex=1;
            final int numberOfParametersCoveredBy=getNumberOfParametersCoveredBy(((ComponentType)type).getSubtypes());
            while (paramIndex < numberOfParametersCoveredBy) {
              final String nextToken=tokens.nextToken();
              if ("?".equals(nextToken)) {
                paramIndex++;
              }
              result.append(nextToken);
            }
          }
          parameters.add(getPositionalParameterValues()[positionalIndex]);
          parameterTypes.add(type);
          positionalIndex++;
        }
      }
    }
    processedPositionalParameterValues=parameters.toArray();
    processedPositionalParameterTypes=(Type[])parameterTypes.toArray(new Type[parameterTypes.size()]);
    processedSQL=result.toString();
  }
}
