{
  super(name,type,annotations);
  this.isDiscriminator=isDiscriminator;
  AnnotationInstance idAnnotation=JandexHelper.getSingleAnnotation(annotations,JPADotNames.ID);
  AnnotationInstance embeddedIdAnnotation=JandexHelper.getSingleAnnotation(annotations,JPADotNames.EMBEDDED_ID);
  isId=!(idAnnotation == null && embeddedIdAnnotation == null);
  AnnotationInstance versionAnnotation=JandexHelper.getSingleAnnotation(annotations,JPADotNames.VERSION);
  isVersioned=versionAnnotation != null;
  if (isDiscriminator) {
    columnValues=new DiscriminatorColumnValues(annotations);
  }
 else {
    AnnotationInstance columnAnnotation=JandexHelper.getSingleAnnotation(annotations,JPADotNames.COLUMN);
    columnValues=new ColumnValues(columnAnnotation);
  }
  if (isId) {
    columnValues.setUnique(true);
    columnValues.setNullable(false);
  }
  this.isOptimisticLockable=checkOptimisticLockAnnotation();
  checkBasicAnnotation();
  checkGeneratedAnnotation();
  String[] readWrite;
  List<AnnotationInstance> columnTransformerAnnotations=getAllColumnTransformerAnnotations();
  readWrite=createCustomReadWrite(columnTransformerAnnotations);
  this.customReadFragment=readWrite[0];
  this.customWriteFragment=readWrite[1];
  this.checkCondition=parseCheckAnnotation();
}
