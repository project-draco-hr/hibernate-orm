{
  final Serializable id=getId();
  final EntityPersister persister=getPersister();
  final SharedSessionContractImplementor session=getSession();
  final Object instance=getInstance();
  final boolean veto=preDelete();
  Object version=this.version;
  if (persister.isVersionPropertyGenerated()) {
    version=persister.getVersion(instance);
  }
  final Object ck;
  if (persister.hasCache()) {
    final EntityRegionAccessStrategy cache=persister.getCacheAccessStrategy();
    ck=cache.generateCacheKey(id,persister,session.getFactory(),session.getTenantIdentifier());
    lock=cache.lockItem(session,ck,version);
  }
 else {
    ck=null;
  }
  if (!isCascadeDeleteEnabled && !veto) {
    persister.delete(id,version,instance,session);
  }
  final PersistenceContext persistenceContext=session.getPersistenceContext();
  final EntityEntry entry=persistenceContext.removeEntry(instance);
  if (entry == null) {
    throw new AssertionFailure("possible nonthreadsafe access to session");
  }
  entry.postDelete();
  persistenceContext.removeEntity(entry.getEntityKey());
  persistenceContext.removeProxy(entry.getEntityKey());
  if (persister.hasCache()) {
    persister.getCacheAccessStrategy().remove(session,ck);
  }
  persistenceContext.getNaturalIdHelper().removeSharedNaturalIdCrossReference(persister,id,naturalIdValues);
  postDelete();
  if (getSession().getFactory().getStatistics().isStatisticsEnabled() && !veto) {
    getSession().getFactory().getStatistics().deleteEntity(getPersister().getEntityName());
  }
}
