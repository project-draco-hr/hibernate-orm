{
  this.uuid=UUID.randomUUID();
  this.options=options;
  this.typeResolver=typeResolver;
  this.identifierGeneratorFactory=options.getServiceRegistry().getService(MutableIdentifierGeneratorFactory.class);
  for (  AttributeConverterDefinition attributeConverterDefinition : options.getAttributeConverters()) {
    addAttributeConverter(attributeConverterDefinition);
  }
  for (  Map.Entry<String,SQLFunction> sqlFunctionEntry : options.getSqlFunctions().entrySet()) {
    if (sqlFunctionMap == null) {
      sqlFunctionMap=new ConcurrentHashMap<String,SQLFunction>(16,.75f,1);
    }
    sqlFunctionMap.put(sqlFunctionEntry.getKey(),sqlFunctionEntry.getValue());
  }
  for (  AuxiliaryDatabaseObject auxiliaryDatabaseObject : options.getAuxiliaryDatabaseObjectList()) {
    getDatabase().addAuxiliaryDatabaseObject(auxiliaryDatabaseObject);
  }
}
