{
  EntityBinding entityBinding=new EntityBinding();
  entityBinding.setInheritanceType(InheritanceType.NO_INHERITANCE);
  entityBinding.setRoot(true);
  doBasicEntityBinding(entityBinding);
  final AnnotationInstance hibernateEntityAnnotation=JandexHelper.getSingleAnnotation(entityClass.getClassInfo(),HibernateDotNames.ENTITY);
  PolymorphismType polymorphism=PolymorphismType.IMPLICIT;
  if (hibernateEntityAnnotation != null && hibernateEntityAnnotation.value("polymorphism") != null) {
    polymorphism=PolymorphismType.valueOf(hibernateEntityAnnotation.value("polymorphism").asEnum());
  }
  entityBinding.setExplicitPolymorphism(polymorphism == PolymorphismType.EXPLICIT);
  OptimisticLockType optimisticLockType=OptimisticLockType.VERSION;
  if (hibernateEntityAnnotation != null && hibernateEntityAnnotation.value("optimisticLock") != null) {
    optimisticLockType=OptimisticLockType.valueOf(hibernateEntityAnnotation.value("optimisticLock").asEnum());
  }
  entityBinding.setOptimisticLockStyle(OptimisticLockStyle.valueOf(optimisticLockType.name()));
  final AnnotationInstance hibernateImmutableAnnotation=JandexHelper.getSingleAnnotation(entityClass.getClassInfo(),HibernateDotNames.IMMUTABLE);
  final boolean mutable=hibernateImmutableAnnotation == null && hibernateEntityAnnotation != null && hibernateEntityAnnotation.value("mutable") != null && hibernateEntityAnnotation.value("mutable").asBoolean();
  entityBinding.setMutable(mutable);
  final AnnotationInstance whereAnnotation=JandexHelper.getSingleAnnotation(entityClass.getClassInfo(),HibernateDotNames.WHERE);
  entityBinding.setWhereFilter(whereAnnotation != null && whereAnnotation.value("clause") != null ? whereAnnotation.value("clause").asString() : null);
  final AnnotationInstance rowIdAnnotation=JandexHelper.getSingleAnnotation(entityClass.getClassInfo(),HibernateDotNames.ROW_ID);
  entityBinding.setRowId(rowIdAnnotation != null && rowIdAnnotation.value() != null ? rowIdAnnotation.value().asString() : null);
  entityBinding.setCaching(interpretCaching(entityClass,bindingContext));
  bindPrimaryTable(entityBinding);
  bindId(entityBinding);
  if (entityBinding.getInheritanceType() == InheritanceType.SINGLE_TABLE) {
    bindDiscriminatorColumn(entityBinding);
  }
  return entityBinding;
}
