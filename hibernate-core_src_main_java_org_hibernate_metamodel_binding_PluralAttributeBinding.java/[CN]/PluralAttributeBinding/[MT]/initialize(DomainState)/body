{
  super.initialize(state);
  fetchMode=state.getFetchMode();
  extraLazy=state.isExtraLazy();
  collectionElement=state.getCollectionElement(this);
  inverse=state.isInverse();
  mutable=state.isMutable();
  subselectLoadable=state.isSubselectLoadable();
  if (isSubselectLoadable()) {
    getEntityBinding().setSubselectLoadableCollections(true);
  }
  cacheConcurrencyStrategy=state.getCacheConcurrencyStrategy();
  cacheRegionName=state.getCacheRegionName();
  orderBy=state.getOrderBy();
  where=state.getWhere();
  referencedPropertyName=state.getReferencedPropertyName();
  sorted=state.isSorted();
  comparator=state.getComparator();
  comparatorClassName=state.getComparatorClassName();
  orphanDelete=state.isOrphanDelete();
  batchSize=state.getBatchSize();
  embedded=state.isEmbedded();
  optimisticLocked=state.isOptimisticLocked();
  collectionPersisterClass=state.getCollectionPersisterClass();
  typeName=state.getTypeName();
  filters.putAll(state.getFilters());
  synchronizedTables.addAll(state.getSynchronizedTables());
  customSQLInsert=state.getCustomSQLInsert();
  customSQLUpdate=state.getCustomSQLUpdate();
  customSQLDelete=state.getCustomSQLDelete();
  customSQLDeleteAll=state.getCustomSQLDeleteAll();
  loaderName=state.getLoaderName();
}
