{
  super.fromHbmXml(defaults,element,attribute);
  inverse=DomHelper.extractBooleanAttributeValue(element,"inverse",false);
  mutable=DomHelper.extractBooleanAttributeValue(element,"mutable",true);
  if ("subselect".equals(element.attributeValue("fetch"))) {
    subselectLoadable=true;
    getEntityBinding().setSubselectLoadableCollections(true);
  }
  orderBy=DomHelper.extractAttributeValue(element,"order-by",null);
  where=DomHelper.extractAttributeValue(element,"where",null);
  batchSize=DomHelper.extractIntAttributeValue(element,"batch-size",0);
  embedded=DomHelper.extractBooleanAttributeValue(element,"embed-xml",true);
  try {
    collectionPersisterClass=DomHelper.extractClassAttributeValue(element,"persister");
  }
 catch (  ClassNotFoundException cnfe) {
    throw new MappingException("Could not find collection persister class: " + element.attributeValue("persister"));
  }
  String sortString=DomHelper.extractAttributeValue(element,"sort","unsorted");
  sorted=(!"unsorted".equals(sortString));
  if (sorted && !"natural".equals(sortString)) {
    comparatorClassName=sortString;
  }
  String cascadeString=DomHelper.extractAttributeValue(element,"cascade","none");
  orphanDelete=(cascadeString.indexOf("delete-orphan") >= 0);
  customSQLInsert=HbmHelper.getCustomSql(element.element("sql-insert"));
  customSQLDelete=HbmHelper.getCustomSql(element.element("sql-delete"));
  customSQLUpdate=HbmHelper.getCustomSql(element.element("sql-update"));
  customSQLDeleteAll=HbmHelper.getCustomSql(element.element("sql-delete-all"));
  Iterator tables=element.elementIterator("synchronize");
  while (tables.hasNext()) {
    synchronizedTables.add(((Element)tables.next()).attributeValue("table"));
  }
  loaderName=DomHelper.extractAttributeValue(element.element("loader"),"query-ref");
  referencedPropertyName=element.element("key").attributeValue("property-ref");
  Element cacheElement=element.element("cache");
  if (cacheElement != null) {
    cacheConcurrencyStrategy=cacheElement.attributeValue("usage");
    cacheRegionName=cacheElement.attributeValue("region");
  }
  Attribute fetchNode=element.attribute("fetch");
  if (fetchNode != null) {
    fetchMode="join".equals(fetchNode.getValue()) ? FetchMode.JOIN : FetchMode.SELECT;
  }
 else {
    Attribute jfNode=element.attribute("outer-join");
    String jfNodeValue=(jfNode == null ? "auto" : jfNode.getValue());
    if ("auto".equals(jfNodeValue)) {
      fetchMode=FetchMode.DEFAULT;
    }
 else     if ("true".equals(jfNodeValue)) {
      fetchMode=FetchMode.JOIN;
    }
 else {
      fetchMode=FetchMode.SELECT;
    }
  }
  String lazyString=DomHelper.extractAttributeValue(element,"lazy");
  extraLazy=("extra".equals(lazyString));
  if (extraLazy && !isLazy()) {
    setLazy(true);
  }
}
