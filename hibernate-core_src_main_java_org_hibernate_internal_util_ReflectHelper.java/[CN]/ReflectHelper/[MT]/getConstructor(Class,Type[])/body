{
  final Constructor[] candidates=clazz.getConstructors();
  for (int i=0; i < candidates.length; i++) {
    final Constructor constructor=candidates[i];
    final Class[] params=constructor.getParameterTypes();
    if (params.length == types.length) {
      boolean found=true;
      for (int j=0; j < params.length; j++) {
        final boolean ok=params[j].isAssignableFrom(types[j].getReturnedClass()) || (types[j] instanceof PrimitiveType && params[j] == ((PrimitiveType)types[j]).getPrimitiveClass());
        if (!ok) {
          found=false;
          break;
        }
      }
      if (found) {
        if (!isPublic(clazz,constructor)) {
          constructor.setAccessible(true);
        }
        return constructor;
      }
    }
  }
  throw new PropertyNotFoundException("no appropriate constructor in class: " + clazz.getName());
}
