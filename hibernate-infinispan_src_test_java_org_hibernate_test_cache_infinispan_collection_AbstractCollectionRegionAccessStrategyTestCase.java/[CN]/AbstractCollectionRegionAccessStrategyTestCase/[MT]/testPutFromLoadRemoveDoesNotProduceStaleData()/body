{
  final CountDownLatch pferLatch=new CountDownLatch(1);
  final CountDownLatch removeLatch=new CountDownLatch(1);
  final TransactionManager remoteTm=remoteCollectionRegion.getTransactionManager();
  PutFromLoadValidator validator=new PutFromLoadValidator(remoteTm){
    @Override public boolean acquirePutFromLoadLock(    Object key){
      boolean acquired=super.acquirePutFromLoadLock(key);
      try {
        removeLatch.countDown();
        pferLatch.await(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        log.debug("Interrupted");
        Thread.currentThread().interrupt();
      }
catch (      Exception e) {
        log.error("Error",e);
        throw new RuntimeException("Error",e);
      }
      return acquired;
    }
  }
;
  final TransactionalAccessDelegate delegate=new TransactionalAccessDelegate(localCollectionRegion,validator);
  final TransactionManager localTm=localCollectionRegion.getTransactionManager();
  Callable<Void> pferCallable=new Callable<Void>(){
    public Void call() throws Exception {
      delegate.putFromLoad("k1","v1",0,null);
      return null;
    }
  }
;
  Callable<Void> removeCallable=new Callable<Void>(){
    public Void call() throws Exception {
      removeLatch.await();
      CacheHelper.withinTx(localTm,new Callable<Void>(){
        @Override public Void call() throws Exception {
          delegate.remove("k1");
          return null;
        }
      }
);
      pferLatch.countDown();
      return null;
    }
  }
;
  ExecutorService executorService=Executors.newCachedThreadPool();
  Future<Void> pferFuture=executorService.submit(pferCallable);
  Future<Void> removeFuture=executorService.submit(removeCallable);
  pferFuture.get();
  removeFuture.get();
  assertFalse(localCollectionRegion.getCacheAdapter().containsKey("k1"));
}
