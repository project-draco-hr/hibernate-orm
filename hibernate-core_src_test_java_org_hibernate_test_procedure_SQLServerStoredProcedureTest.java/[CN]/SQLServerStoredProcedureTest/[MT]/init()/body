{
  EntityManager entityManager=createEntityManager();
  entityManager.getTransaction().begin();
  Session session=entityManager.unwrap(Session.class);
  session.doWork(new Work(){
    @Override public void execute(    Connection connection) throws SQLException {
      Statement statement=null;
      try {
        statement=connection.createStatement();
        statement.executeUpdate("DROP PROCEDURE sp_count_phones");
      }
 catch (      SQLException ignore) {
      }
 finally {
        if (statement != null) {
          statement.close();
        }
      }
    }
  }
);
  entityManager.getTransaction().commit();
  entityManager.close();
  entityManager=createEntityManager();
  entityManager.getTransaction().begin();
  session=entityManager.unwrap(Session.class);
  session.doWork(new Work(){
    @Override public void execute(    Connection connection) throws SQLException {
      Statement statement=null;
      try {
        statement=connection.createStatement();
        statement.executeUpdate("DROP FUNCTION fn_count_phones");
      }
 catch (      SQLException ignore) {
      }
 finally {
        if (statement != null) {
          statement.close();
        }
      }
    }
  }
);
  entityManager.getTransaction().commit();
  entityManager.close();
  entityManager=createEntityManager();
  entityManager.getTransaction().begin();
  session=entityManager.unwrap(Session.class);
  session.doWork(new Work(){
    @Override public void execute(    Connection connection) throws SQLException {
      Statement statement=null;
      try {
        statement=connection.createStatement();
        statement.executeUpdate("DROP PROCEDURE sp_phones");
      }
 catch (      SQLException ignore) {
      }
 finally {
        if (statement != null) {
          statement.close();
        }
      }
    }
  }
);
  entityManager.getTransaction().commit();
  entityManager.close();
  entityManager=createEntityManager();
  entityManager.getTransaction().begin();
  session=entityManager.unwrap(Session.class);
  session.doWork(new Work(){
    @Override public void execute(    Connection connection) throws SQLException {
      Statement statement=null;
      try {
        statement=connection.createStatement();
        statement.executeUpdate("CREATE PROCEDURE sp_count_phones " + "   @personId INT, " + "   @phoneCount INT OUTPUT "+ "AS "+ "BEGIN "+ "   SELECT @phoneCount = COUNT(*)  "+ "   FROM phone  "+ "   WHERE person_id = @personId "+ "END");
        statement.executeUpdate("CREATE FUNCTION fn_count_phones (@personId INT)  " + "RETURNS INT  " + "AS  "+ "BEGIN  "+ "    DECLARE @phoneCount int;  "+ "    SELECT @phoneCount = COUNT(*) "+ "    FROM phone   "+ "    WHERE person_id = @personId;  "+ "    RETURN(@phoneCount);  "+ "END");
        statement.executeUpdate("CREATE PROCEDURE sp_phones " + "    @personId INT, " + "    @phones CURSOR VARYING OUTPUT "+ "AS "+ "    SET NOCOUNT ON; "+ "    SET @phones = CURSOR "+ "    FORWARD_ONLY STATIC FOR "+ "        SELECT *  "+ "        FROM phone   "+ "        WHERE person_id = @personId;  "+ "    OPEN @phones;");
      }
  finally {
        if (statement != null) {
          statement.close();
        }
      }
    }
  }
);
  entityManager.getTransaction().commit();
  entityManager.close();
  entityManager=createEntityManager();
  entityManager.getTransaction().begin();
  Person person1=new Person("John Doe");
  person1.setNickName("JD");
  person1.setAddress("Earth");
  person1.setCreatedOn(Timestamp.from(LocalDateTime.of(2000,1,1,0,0,0).toInstant(ZoneOffset.UTC)));
  entityManager.persist(person1);
  Phone phone1=new Phone("123-456-7890");
  phone1.setId(1L);
  person1.addPhone(phone1);
  Phone phone2=new Phone("098_765-4321");
  phone2.setId(2L);
  person1.addPhone(phone2);
  entityManager.getTransaction().commit();
  entityManager.close();
}
