{
  final String methodName=method.getName();
  if ("getDatabaseProductName".equals(methodName)) {
    return databaseName;
  }
  if ("getDatabaseMajorVersion".equals(methodName)) {
    return Integer.valueOf(majorVersion);
  }
  if ("getDatabaseMinorVersion".equals(methodName)) {
    return Integer.valueOf(minorVersion);
  }
  if ("getConnection".equals(methodName)) {
    return connectionProxy;
  }
  if ("toString".equals(methodName)) {
    return "DatabaseMetaData proxy [db-name=" + databaseName + ", version="+ majorVersion+ "]";
  }
  if ("hashCode".equals(methodName)) {
    return Integer.valueOf(this.hashCode());
  }
  if ("supportsNamedParameters".equals(methodName)) {
    return true;
  }
  if ("supportsResultSetType".equals(methodName)) {
    return true;
  }
  if ("supportsGetGeneratedKeys".equals(methodName)) {
    return true;
  }
  if ("supportsBatchUpdates".equals(methodName)) {
    return true;
  }
  if ("dataDefinitionIgnoredInTransactions".equals(methodName)) {
    return false;
  }
  if ("dataDefinitionCausesTransactionCommit".equals(methodName)) {
    return false;
  }
  if ("getSQLKeywords".equals(methodName)) {
    return "after,ansi,append,attach,audit,before,bitmap,boolean,buffered,byte,cache,call,cluster,clustersize,codeset,database,datafiles,dataskip,datetime,dba,dbdate,dbmoney,debug,define,delimiter,deluxe,detach,dirty,distributions,document,each,elif,exclusive,exit,explain,express,expression,extend,extent,file,fillfactor,foreach,format,fraction,fragment,gk,hash,high,hold,hybrid,if,index,init,labeleq,labelge,labelgt,labelle,labellt,let,listing,lock,log,low,matches,maxerrors,medium,mode,modify,money,mounting,new,nvarchar,off,old,operational,optical,optimization,page,pdqpriority,pload,private,raise,range,raw,recordend,recover,referencing,rejectfile,release,remainder,rename,reserve,resolution,resource,resume,return,returning,returns,ridlist,robin,rollforward,round,row,rowids,sameas,samples,schedule,scratch,serial,share,skall,skinhibit,skshow,smallfloat,stability,standard,start,static,statistics,stdev,step,sync,synonym,system,temp,text,timeout,trace,trigger,units,unlock,variance,wait,while,xload,xunload";
  }
  if ("getSQLStateType".equals(methodName)) {
    return DatabaseMetaData.sqlStateXOpen;
  }
  if ("locatorsUpdateCopy".equals(methodName)) {
    return false;
  }
  if ("getTypeInfo".equals(methodName)) {
    com.sun.rowset.CachedRowSetImpl rowSet=new com.sun.rowset.CachedRowSetImpl();
    return rowSet;
  }
  if ("storesLowerCaseIdentifiers".equals(methodName)) {
    return true;
  }
  if ("storesUpperCaseIdentifiers".equals(methodName)) {
    return false;
  }
  if ("getCatalogSeparator".equals(methodName)) {
    return ":";
  }
  if ("isCatalogAtStart".equals(methodName)) {
    return true;
  }
  if (canThrowSQLException(method)) {
    throw new SQLException();
  }
 else {
    throw new UnsupportedOperationException();
  }
}
