{
  checkNotNull(revision,"Entity revision");
  checkPositive(revision,"Entity revision");
  checkSession();
  if (!verCfg.getGlobalCfg().isTrackEntitiesChangedInRevisionEnabled()) {
    throw new AuditException("This query is designed for Envers default mechanism of tracking entities modified in a given revision." + " Extend DefaultTrackingModifiedTypesRevisionEntity, utilize @ModifiedEntityTypes annotation or set " + "'org.hibernate.envers.track_entities_changed_in_revision' parameter to true.");
  }
  Set<Number> revisions=new HashSet<Number>(1);
  revisions.add(revision);
  Criteria query=verCfg.getRevisionInfoQueryCreator().getRevisionsQuery(session,revisions);
  Object revisionInfo=query.uniqueResult();
  if (revisionInfo != null) {
    if (modifiedEntityTypesProperty == null) {
      modifiedEntityTypesProperty=(Member)ReflectionTools.getAnnotatedMembers(revisionInfo.getClass(),ModifiedEntityTypes.class).toArray()[0];
    }
    Set<String> modifiedEntityTypes=(Set<String>)ReflectionTools.getPropertyValue(modifiedEntityTypesProperty,revisionInfo);
    Set<Class> result=new HashSet<Class>(modifiedEntityTypes.size());
    for (    String entityClassName : modifiedEntityTypes) {
      try {
        result.add(Class.forName(entityClassName));
      }
 catch (      ClassNotFoundException e) {
        throw new RuntimeException(e);
      }
    }
    return result;
  }
  return Collections.EMPTY_SET;
}
