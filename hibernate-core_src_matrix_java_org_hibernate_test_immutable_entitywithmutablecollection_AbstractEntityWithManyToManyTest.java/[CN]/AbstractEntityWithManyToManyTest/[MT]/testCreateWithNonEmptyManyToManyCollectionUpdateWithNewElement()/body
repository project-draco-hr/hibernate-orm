{
  clearCounts();
  Plan p=new Plan("plan");
  Contract c=new Contract(null,"gail","phone");
  p.addContract(c);
  Session s=openSession();
  Transaction t=s.beginTransaction();
  s.persist(p);
  t.commit();
  s.close();
  assertInsertCount(2);
  assertUpdateCount(0);
  clearCounts();
  Contract newC=new Contract(null,"sherman","telepathy");
  p.addContract(newC);
  s=openSession();
  t=s.beginTransaction();
  s.update(p);
  t.commit();
  s.close();
  assertInsertCount(1);
  assertUpdateCount(isContractVersioned ? 1 : 0);
  clearCounts();
  s=openSession();
  t=s.beginTransaction();
  p=(Plan)s.createCriteria(Plan.class).uniqueResult();
  assertEquals(2,p.getContracts().size());
  for (Iterator it=p.getContracts().iterator(); it.hasNext(); ) {
    Contract aContract=(Contract)it.next();
    if (aContract.getId() == c.getId()) {
      assertEquals("gail",aContract.getCustomerName());
    }
 else     if (aContract.getId() == newC.getId()) {
      assertEquals("sherman",aContract.getCustomerName());
    }
 else {
      fail("unknown contract");
    }
    if (isPlanContractsBidirectional) {
      assertSame(p,aContract.getPlans().iterator().next());
    }
  }
  s.delete(p);
  assertEquals(new Long(0),s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult());
  assertEquals(new Long(0),s.createCriteria(Plan.class).setProjection(Projections.rowCount()).uniqueResult());
  t.commit();
  s.close();
  assertUpdateCount(0);
  assertDeleteCount(3);
}
