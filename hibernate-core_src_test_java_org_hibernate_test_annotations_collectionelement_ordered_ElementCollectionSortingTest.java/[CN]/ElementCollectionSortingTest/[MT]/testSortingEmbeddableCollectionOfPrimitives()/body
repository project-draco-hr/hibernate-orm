{
  final Session session=openSession();
  session.beginTransaction();
  final Person steve=new Person();
  steve.setName("Steve");
  steve.getNickNamesAscendingNaturalSort().add("sebersole");
  steve.getNickNamesAscendingNaturalSort().add("ebersole");
  steve.getNickNamesDescendingNaturalSort().add("ebersole");
  steve.getNickNamesDescendingNaturalSort().add("sebersole");
  final Person lukasz=new Person();
  lukasz.setName("Lukasz");
  lukasz.getNickNamesAscendingNaturalSort().add("antoniak");
  lukasz.getNickNamesAscendingNaturalSort().add("lantoniak");
  lukasz.getNickNamesDescendingNaturalSort().add("lantoniak");
  lukasz.getNickNamesDescendingNaturalSort().add("antoniak");
  session.save(steve);
  session.save(lukasz);
  session.flush();
  session.clear();
  final List<String> lukaszNamesAsc=Arrays.asList("antoniak","lantoniak");
  final List<String> lukaszNamesDesc=Arrays.asList("lantoniak","antoniak");
  final List<String> steveNamesAsc=Arrays.asList("ebersole","sebersole");
  final List<String> steveNamesDesc=Arrays.asList("sebersole","ebersole");
  checkPersonNickNames(lukaszNamesAsc,lukaszNamesDesc,(Person)session.get(Person.class,lukasz.getId()));
  checkPersonNickNames(steveNamesAsc,steveNamesDesc,(Person)session.get(Person.class,steve.getId()));
  session.clear();
  final List<Person> result=session.createQuery("select distinct p from Person p join fetch p.nickNamesAscendingNaturalSort join fetch p.nickNamesDescendingNaturalSort order by p.name").list();
  Assert.assertEquals(2,result.size());
  checkPersonNickNames(lukaszNamesAsc,lukaszNamesDesc,result.get(0));
  checkPersonNickNames(steveNamesAsc,steveNamesDesc,result.get(1));
  checkSQLOrderBy(session,Person.class.getName(),"nickNamesAscendingNaturalSort","asc");
  checkSQLOrderBy(session,Person.class.getName(),"nickNamesDescendingNaturalSort","desc");
  session.getTransaction().rollback();
  session.close();
}
