{
  if (property.isArray()) {
    if (property.getElementClass().isPrimitive()) {
      return new PrimitiveArrayBinder();
    }
 else {
      return new ArrayBinder();
    }
  }
 else   if (property.isCollection()) {
    Class returnedClass=property.getCollectionClass();
    if (java.util.Set.class.equals(returnedClass)) {
      if (property.isAnnotationPresent(CollectionId.class)) {
        throw new AnnotationException("Set do not support @CollectionId: " + StringHelper.qualify(entityName,property.getName()));
      }
      return new SetBinder();
    }
 else     if (java.util.SortedSet.class.equals(returnedClass)) {
      if (property.isAnnotationPresent(CollectionId.class)) {
        throw new AnnotationException("Set do not support @CollectionId: " + StringHelper.qualify(entityName,property.getName()));
      }
      return new SetBinder(true);
    }
 else     if (java.util.Map.class.equals(returnedClass)) {
      if (property.isAnnotationPresent(CollectionId.class)) {
        throw new AnnotationException("Map do not support @CollectionId: " + StringHelper.qualify(entityName,property.getName()));
      }
      return new MapBinder();
    }
 else     if (java.util.SortedMap.class.equals(returnedClass)) {
      if (property.isAnnotationPresent(CollectionId.class)) {
        throw new AnnotationException("Map do not support @CollectionId: " + StringHelper.qualify(entityName,property.getName()));
      }
      return new MapBinder(true);
    }
 else     if (java.util.Collection.class.equals(returnedClass)) {
      if (property.isAnnotationPresent(CollectionId.class)) {
        return new IdBagBinder();
      }
 else {
        return new BagBinder();
      }
    }
 else     if (java.util.List.class.equals(returnedClass)) {
      if (isIndexed) {
        if (property.isAnnotationPresent(CollectionId.class)) {
          throw new AnnotationException("List do not support @CollectionId and @OrderColumn (or @IndexColumn) at the same time: " + StringHelper.qualify(entityName,property.getName()));
        }
        return new ListBinder();
      }
 else       if (property.isAnnotationPresent(CollectionId.class)) {
        return new IdBagBinder();
      }
 else {
        return new BagBinder();
      }
    }
 else {
      throw new AnnotationException(returnedClass.getName() + " collection not yet supported: " + StringHelper.qualify(entityName,property.getName()));
    }
  }
 else {
    throw new AnnotationException("Illegal attempt to map a non collection as a @OneToMany, @ManyToMany or @CollectionOfElements: " + StringHelper.qualify(entityName,property.getName()));
  }
}
