{
  final SessionImplementor source=event.getSession();
  final boolean useCache=persister.hasCache() && source.getCacheMode().isGetEnabled() && event.getLockMode().lessThan(LockMode.READ);
  if (!useCache) {
    return null;
  }
  final SessionFactoryImplementor factory=source.getFactory();
  final EntityRegionAccessStrategy cache=persister.getCacheAccessStrategy();
  final Object ck=cache.generateCacheKey(event.getEntityId(),persister,factory,source.getTenantIdentifier());
  final Object ce=CacheHelper.fromSharedCache(source,ck,persister.getCacheAccessStrategy());
  if (factory.getStatistics().isStatisticsEnabled()) {
    if (ce == null) {
      factory.getStatisticsImplementor().secondLevelCacheMiss(cache.getRegion().getName());
    }
 else {
      factory.getStatisticsImplementor().secondLevelCacheHit(cache.getRegion().getName());
    }
  }
  if (ce == null) {
    return null;
  }
  CacheEntry entry=(CacheEntry)persister.getCacheEntryStructure().destructure(ce,factory);
  final Object entity;
  if (entry.isReferenceEntry()) {
    if (event.getInstanceToLoad() != null) {
      throw new HibernateException(String.format("Attempt to load entity [%s] from cache using provided object instance, but cache " + "is storing references: " + event.getEntityId()));
    }
 else {
      entity=convertCacheReferenceEntryToEntity((ReferenceCacheEntryImpl)entry,event.getEntityId(),persister,event.getSession(),entityKey,event);
    }
  }
 else {
    entity=convertCacheEntryToEntity(entry,event.getEntityId(),persister,event,entityKey);
  }
  if (!persister.isInstance(entity)) {
    throw new WrongClassException("loaded object was of wrong class " + entity.getClass(),event.getEntityId(),persister.getEntityName());
  }
  return entity;
}
