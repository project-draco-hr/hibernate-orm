{
  final Object optionalObject=event.getInstanceToLoad();
  final EventSource session=event.getSession();
  final SessionFactoryImplementor factory=session.getFactory();
  if (LOG.isTraceEnabled())   LOG.trace("Assembling entity from second-level cache: " + MessageHelper.infoString(persister,id,factory));
  EntityPersister subclassPersister=factory.getEntityPersister(entry.getSubclass());
  Object result=optionalObject == null ? session.instantiate(subclassPersister,id) : optionalObject;
  final EntityKey entityKey=session.generateEntityKey(id,subclassPersister);
  TwoPhaseLoad.addUninitializedCachedEntity(entityKey,result,subclassPersister,LockMode.NONE,entry.areLazyPropertiesUnfetched(),entry.getVersion(),session);
  Type[] types=subclassPersister.getPropertyTypes();
  Object[] values=entry.assemble(result,id,subclassPersister,session.getInterceptor(),session);
  TypeHelper.deepCopy(values,types,subclassPersister.getPropertyUpdateability(),values,session);
  Object version=Versioning.getVersion(values,subclassPersister);
  if (LOG.isTraceEnabled())   LOG.trace("Cached Version: " + version);
  final PersistenceContext persistenceContext=session.getPersistenceContext();
  boolean isReadOnly=session.isDefaultReadOnly();
  if (persister.isMutable()) {
    Object proxy=persistenceContext.getProxy(entityKey);
    if (proxy != null) {
      isReadOnly=((HibernateProxy)proxy).getHibernateLazyInitializer().isReadOnly();
    }
  }
 else {
    isReadOnly=true;
  }
  persistenceContext.addEntry(result,(isReadOnly ? Status.READ_ONLY : Status.MANAGED),values,null,id,version,LockMode.NONE,true,subclassPersister,false,entry.areLazyPropertiesUnfetched());
  subclassPersister.afterInitialize(result,entry.areLazyPropertiesUnfetched(),session);
  persistenceContext.initializeNonLazyCollections();
  PostLoadEvent postLoadEvent=new PostLoadEvent(session).setEntity(result).setId(id).setPersister(persister);
  for (  PostLoadEventListener listener : postLoadEventListeners(session)) {
    listener.onPostLoad(postLoadEvent);
  }
  return result;
}
