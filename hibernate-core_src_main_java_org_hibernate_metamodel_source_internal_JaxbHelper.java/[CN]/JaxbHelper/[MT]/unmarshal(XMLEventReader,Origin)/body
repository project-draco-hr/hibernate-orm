{
  XMLEvent event;
  try {
    event=staxEventReader.peek();
    while (event != null && !event.isStartElement()) {
      staxEventReader.nextEvent();
      event=staxEventReader.peek();
    }
  }
 catch (  Exception e) {
    throw new MappingException("Error accessing stax stream",e,origin);
  }
  if (event == null) {
    throw new MappingException("Could not locate root element",origin);
  }
  final Schema validationSchema;
  final Class jaxbTarget;
  final String elementName=event.asStartElement().getName().getLocalPart();
  if ("entity-mappings".equals(elementName)) {
    final Attribute attribute=event.asStartElement().getAttributeByName(ORM_VERSION_ATTRIBUTE_QNAME);
    final String explicitVersion=attribute == null ? null : attribute.getValue();
    validationSchema=resolveSupportedOrmXsd(explicitVersion);
    jaxbTarget=JaxbEntityMappings.class;
  }
 else {
    validationSchema=hbmSchema();
    jaxbTarget=JaxbHibernateMapping.class;
  }
  final Object target;
  final ContextProvidingValidationEventHandler handler=new ContextProvidingValidationEventHandler();
  try {
    JAXBContext jaxbContext=JAXBContext.newInstance(jaxbTarget);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    unmarshaller.setSchema(validationSchema);
    unmarshaller.setEventHandler(handler);
    target=unmarshaller.unmarshal(staxEventReader);
  }
 catch (  JAXBException e) {
    StringBuilder builder=new StringBuilder();
    builder.append("Unable to perform unmarshalling at line number ");
    builder.append(handler.getLineNumber());
    builder.append(" and column ");
    builder.append(handler.getColumnNumber());
    builder.append(". Message: ");
    builder.append(handler.getMessage());
    throw new MappingException(builder.toString(),e,origin);
  }
  return new JaxbRoot(target,origin);
}
