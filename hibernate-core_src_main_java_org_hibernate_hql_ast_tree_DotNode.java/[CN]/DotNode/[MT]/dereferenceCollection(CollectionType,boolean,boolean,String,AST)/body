{
  dereferenceType=DEREF_COLLECTION;
  String role=collectionType.getRole();
  boolean isSizeProperty=getNextSibling() != null && CollectionProperties.isAnyCollectionProperty(getNextSibling().getText());
  if (isSizeProperty)   indexed=true;
  QueryableCollection queryableCollection=getSessionFactoryHelper().requireQueryableCollection(role);
  String propName=getPath();
  FromClause currentFromClause=getWalker().getCurrentFromClause();
  if (getWalker().getStatementType() != SqlTokenTypes.SELECT && indexed && classAlias == null) {
    String alias=getLhs().getFromElement().getQueryable().getTableName();
    columns=getFromElement().toColumns(alias,propertyPath,false,true);
  }
  FromElementFactory factory=new FromElementFactory(currentFromClause,getLhs().getFromElement(),propName,classAlias,getColumns(),implicitJoin);
  FromElement elem=factory.createCollection(queryableCollection,role,joinType,fetch,indexed);
  LOG.dereferenceCollection(propName,elem);
  setImpliedJoin(elem);
  setFromElement(elem);
  if (isSizeProperty) {
    elem.setText("");
    elem.setUseWhereFragment(false);
  }
  if (!implicitJoin) {
    EntityPersister entityPersister=elem.getEntityPersister();
    if (entityPersister != null) {
      getWalker().addQuerySpaces(entityPersister.getQuerySpaces());
    }
  }
  getWalker().addQuerySpaces(queryableCollection.getCollectionSpaces());
}
