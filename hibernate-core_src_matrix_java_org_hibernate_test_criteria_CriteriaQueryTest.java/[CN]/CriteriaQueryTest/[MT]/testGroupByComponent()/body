{
  Session s=openSession();
  Transaction t=s.beginTransaction();
  Course course=new Course();
  course.setCourseCode("HIB");
  course.setDescription("Hibernate Training");
  s.save(course);
  Student gavin=new Student();
  gavin.setName("Gavin King");
  gavin.setStudentNumber(667);
  gavin.setCityState(new CityState("Odessa","WA"));
  s.save(gavin);
  Student xam=new Student();
  xam.setName("Max Rydahl Andersen");
  xam.setStudentNumber(101);
  xam.setPreferredCourse(course);
  xam.setCityState(new CityState("Odessa","WA"));
  s.save(xam);
  Enrolment enrolment=new Enrolment();
  enrolment.setCourse(course);
  enrolment.setCourseCode(course.getCourseCode());
  enrolment.setSemester((short)1);
  enrolment.setYear((short)1999);
  enrolment.setStudent(xam);
  enrolment.setStudentNumber(xam.getStudentNumber());
  xam.getEnrolments().add(enrolment);
  s.save(enrolment);
  enrolment=new Enrolment();
  enrolment.setCourse(course);
  enrolment.setCourseCode(course.getCourseCode());
  enrolment.setSemester((short)3);
  enrolment.setYear((short)1998);
  enrolment.setStudent(gavin);
  enrolment.setStudentNumber(gavin.getStudentNumber());
  gavin.getEnrolments().add(enrolment);
  s.save(enrolment);
  s.flush();
  Object result=s.createCriteria(Student.class).setProjection(Projections.groupProperty("cityState")).uniqueResult();
  assertTrue(result instanceof CityState);
  assertEquals(((CityState)result).getCity(),"Odessa");
  assertEquals(((CityState)result).getState(),"WA");
  result=s.createCriteria(Student.class,"st").setProjection(Projections.groupProperty("st.cityState")).uniqueResult();
  assertTrue(result instanceof CityState);
  assertEquals(((CityState)result).getCity(),"Odessa");
  assertEquals(((CityState)result).getState(),"WA");
  result=s.createCriteria(Student.class,"st").setProjection(Projections.groupProperty("st.cityState")).addOrder(Order.asc("cityState")).uniqueResult();
  assertTrue(result instanceof CityState);
  assertEquals(((CityState)result).getCity(),"Odessa");
  assertEquals(((CityState)result).getState(),"WA");
  result=s.createCriteria(Student.class,"st").setProjection(Projections.groupProperty("st.cityState").as("cityState")).addOrder(Order.asc("cityState")).uniqueResult();
  assertTrue(result instanceof CityState);
  assertEquals(((CityState)result).getCity(),"Odessa");
  assertEquals(((CityState)result).getState(),"WA");
  result=s.createCriteria(Student.class,"st").setProjection(Projections.groupProperty("st.cityState").as("cityState")).addOrder(Order.asc("cityState")).uniqueResult();
  assertTrue(result instanceof CityState);
  assertEquals(((CityState)result).getCity(),"Odessa");
  assertEquals(((CityState)result).getState(),"WA");
  result=s.createCriteria(Student.class,"st").setProjection(Projections.groupProperty("st.cityState").as("cityState")).add(Restrictions.eq("st.cityState",new CityState("Odessa","WA"))).addOrder(Order.asc("cityState")).uniqueResult();
  assertTrue(result instanceof CityState);
  assertEquals(((CityState)result).getCity(),"Odessa");
  assertEquals(((CityState)result).getState(),"WA");
  List list=s.createCriteria(Enrolment.class).createAlias("student","st").createAlias("course","co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group()).add(Property.forName("st.cityState").group()).add(Property.forName("year").group())).list();
  s.delete(gavin);
  s.delete(xam);
  s.delete(course);
  t.commit();
  s.close();
}
