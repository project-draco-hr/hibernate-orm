{
  LOG.checkingQueryResults(cacheRegion.getName());
  List cacheable=(List)cacheRegion.get(key);
  logCachedResultDetails(key,spaces,returnTypes,cacheable);
  if (cacheable == null) {
    LOG.queryResultsNotFound();
    return null;
  }
  Long timestamp=(Long)cacheable.get(0);
  if (!isNaturalKeyLookup && !isUpToDate(spaces,timestamp)) {
    LOG.queryResultsNotUpToDate();
    return null;
  }
  LOG.returningQueryResults();
  for (int i=1; i < cacheable.size(); i++) {
    if (returnTypes.length == 1) {
      returnTypes[0].beforeAssemble((Serializable)cacheable.get(i),session);
    }
 else {
      TypeHelper.beforeAssemble((Serializable[])cacheable.get(i),returnTypes,session);
    }
  }
  List result=new ArrayList(cacheable.size() - 1);
  for (int i=1; i < cacheable.size(); i++) {
    try {
      if (returnTypes.length == 1) {
        result.add(returnTypes[0].assemble((Serializable)cacheable.get(i),session,null));
      }
 else {
        result.add(TypeHelper.assemble((Serializable[])cacheable.get(i),returnTypes,session,null));
      }
      logCachedResultRowDetails(returnTypes,result.get(i - 1));
    }
 catch (    RuntimeException ex) {
      if (isNaturalKeyLookup && (UnresolvableObjectException.class.isInstance(ex) || EntityNotFoundException.class.isInstance(ex))) {
        LOG.unableToReassembleResultSet();
        cacheRegion.evict(key);
        return null;
      }
 else {
        throw ex;
      }
    }
  }
  return result;
}
