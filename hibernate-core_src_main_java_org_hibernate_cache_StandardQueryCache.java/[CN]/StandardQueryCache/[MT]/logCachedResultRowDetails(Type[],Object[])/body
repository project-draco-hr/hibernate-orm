{
  if (!LOG.isTraceEnabled())   return;
  if (tuple == null) {
    LOG.nullTuple(returnTypes == null ? "null" : "Type[" + returnTypes.length + "]");
    if (returnTypes != null && returnTypes.length > 1)     LOG.unexpectedNullTupleResult(returnTypes.length);
  }
 else {
    if (returnTypes == null || returnTypes.length == 0)     LOG.unexpectedNonNullTupleResult(returnTypes == null ? "null" : "empty");
    LOG.tupleAndReturnTypes(tuple.length,returnTypes.length);
    if (tuple.length != returnTypes.length)     LOG.unexpectedTupleCount(returnTypes.length,tuple.length);
 else     for (int j=0; j < tuple.length; j++) {
      if (tuple[j] != null && !returnTypes[j].getReturnedClass().isInstance(tuple[j]))       LOG.unexpectedTupleValueType(returnTypes[j].getReturnedClass().getName(),tuple[j].getClass().getName());
    }
  }
}
