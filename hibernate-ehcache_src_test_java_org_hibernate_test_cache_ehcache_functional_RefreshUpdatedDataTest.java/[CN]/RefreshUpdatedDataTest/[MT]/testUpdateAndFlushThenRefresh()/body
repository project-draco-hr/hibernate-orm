{
  Session s=openSession();
  s.beginTransaction();
  final String BEFORE="before";
  ReadWriteCacheableItem readWriteCacheableItem=new ReadWriteCacheableItem(BEFORE);
  readWriteCacheableItem.getTags().add("Hibernate");
  readWriteCacheableItem.getTags().add("ORM");
  s.persist(readWriteCacheableItem);
  ReadWriteVersionedCacheableItem readWriteVersionedCacheableItem=new ReadWriteVersionedCacheableItem(BEFORE);
  readWriteVersionedCacheableItem.getTags().add("Hibernate");
  readWriteVersionedCacheableItem.getTags().add("ORM");
  s.persist(readWriteVersionedCacheableItem);
  NonStrictReadWriteCacheableItem nonStrictReadWriteCacheableItem=new NonStrictReadWriteCacheableItem(BEFORE);
  nonStrictReadWriteCacheableItem.getTags().add("Hibernate");
  nonStrictReadWriteCacheableItem.getTags().add("ORM");
  s.persist(nonStrictReadWriteCacheableItem);
  NonStrictReadWriteVersionedCacheableItem nonStrictReadWriteVersionedCacheableItem=new NonStrictReadWriteVersionedCacheableItem(BEFORE);
  nonStrictReadWriteVersionedCacheableItem.getTags().add("Hibernate");
  nonStrictReadWriteVersionedCacheableItem.getTags().add("ORM");
  s.persist(nonStrictReadWriteVersionedCacheableItem);
  s.getTransaction().commit();
  s.close();
  Session s1=openSession();
  s1.beginTransaction();
  final String AFTER="after";
  ReadWriteCacheableItem readWriteCacheableItem1=s1.get(ReadWriteCacheableItem.class,readWriteCacheableItem.getId());
  readWriteCacheableItem1.setName(AFTER);
  readWriteCacheableItem1.getTags().remove("ORM");
  ReadWriteVersionedCacheableItem readWriteVersionedCacheableItem1=s1.get(ReadWriteVersionedCacheableItem.class,readWriteVersionedCacheableItem.getId());
  readWriteVersionedCacheableItem1.setName(AFTER);
  readWriteVersionedCacheableItem1.getTags().remove("ORM");
  NonStrictReadWriteCacheableItem nonStrictReadWriteCacheableItem1=s1.get(NonStrictReadWriteCacheableItem.class,nonStrictReadWriteCacheableItem.getId());
  nonStrictReadWriteCacheableItem1.setName(AFTER);
  nonStrictReadWriteCacheableItem1.getTags().remove("ORM");
  NonStrictReadWriteVersionedCacheableItem nonStrictReadWriteVersionedCacheableItem1=s1.get(NonStrictReadWriteVersionedCacheableItem.class,nonStrictReadWriteVersionedCacheableItem.getId());
  nonStrictReadWriteVersionedCacheableItem1.setName(AFTER);
  nonStrictReadWriteVersionedCacheableItem1.getTags().remove("ORM");
  s1.flush();
  s1.refresh(readWriteCacheableItem1);
  s1.refresh(readWriteVersionedCacheableItem1);
  s1.refresh(nonStrictReadWriteCacheableItem1);
  s1.refresh(nonStrictReadWriteVersionedCacheableItem1);
  assertEquals(AFTER,readWriteCacheableItem1.getName());
  assertEquals(1,readWriteCacheableItem1.getTags().size());
  assertEquals(AFTER,readWriteVersionedCacheableItem1.getName());
  assertEquals(1,readWriteVersionedCacheableItem1.getTags().size());
  assertEquals(AFTER,nonStrictReadWriteCacheableItem1.getName());
  assertEquals(1,nonStrictReadWriteCacheableItem1.getTags().size());
  assertEquals(AFTER,nonStrictReadWriteVersionedCacheableItem1.getName());
  assertEquals(1,nonStrictReadWriteVersionedCacheableItem1.getTags().size());
  Session s2=sessionFactory().openSession();
  try {
    s2.beginTransaction();
    ReadWriteCacheableItem readWriteCacheableItem2=s2.get(ReadWriteCacheableItem.class,readWriteCacheableItem.getId());
    ReadWriteVersionedCacheableItem readWriteVersionedCacheableItem2=s2.get(ReadWriteVersionedCacheableItem.class,readWriteVersionedCacheableItem.getId());
    NonStrictReadWriteCacheableItem nonStrictReadWriteCacheableItem2=s2.get(NonStrictReadWriteCacheableItem.class,nonStrictReadWriteCacheableItem.getId());
    NonStrictReadWriteVersionedCacheableItem nonStrictReadWriteVersionedCacheableItem2=s2.get(NonStrictReadWriteVersionedCacheableItem.class,nonStrictReadWriteVersionedCacheableItem.getId());
    assertEquals(BEFORE,readWriteCacheableItem2.getName());
    assertEquals(2,readWriteCacheableItem2.getTags().size());
    assertEquals(BEFORE,readWriteVersionedCacheableItem2.getName());
    assertEquals(2,readWriteVersionedCacheableItem2.getTags().size());
    assertEquals(BEFORE,nonStrictReadWriteCacheableItem2.getName());
    assertEquals(1,nonStrictReadWriteCacheableItem2.getTags().size());
    assertEquals(BEFORE,nonStrictReadWriteVersionedCacheableItem2.getName());
    assertEquals(1,nonStrictReadWriteVersionedCacheableItem2.getTags().size());
    s2.getTransaction().commit();
  }
  finally {
    if (s2.getTransaction().getStatus().canRollback()) {
      s2.getTransaction().rollback();
    }
    s2.close();
  }
  s1.getTransaction().rollback();
  s1.close();
  s=openSession();
  s.beginTransaction();
  s.delete(readWriteCacheableItem);
  s.delete(readWriteVersionedCacheableItem);
  s.delete(nonStrictReadWriteCacheableItem);
  s.delete(nonStrictReadWriteVersionedCacheableItem);
  s.getTransaction().commit();
  s.close();
}
