{
  Join join=new Join();
  join.setPersistentClass(persistentClass);
  final String schema;
  final String catalog;
  final SecondaryTableNameSource secondaryTableNameContext;
  final Object joinColumns;
  final List<UniqueConstraintHolder> uniqueConstraintHolders;
  if (secondaryTable != null) {
    schema=secondaryTable.schema();
    catalog=secondaryTable.catalog();
    secondaryTableNameContext=new SecondaryTableNameSource(secondaryTable.name());
    joinColumns=secondaryTable.pkJoinColumns();
    uniqueConstraintHolders=TableBinder.buildUniqueConstraintHolders(secondaryTable.uniqueConstraints());
  }
 else   if (joinTable != null) {
    schema=joinTable.schema();
    catalog=joinTable.catalog();
    secondaryTableNameContext=new SecondaryTableNameSource(joinTable.name());
    joinColumns=joinTable.joinColumns();
    uniqueConstraintHolders=TableBinder.buildUniqueConstraintHolders(joinTable.uniqueConstraints());
  }
 else {
    throw new AssertionFailure("Both JoinTable and SecondaryTable are null");
  }
  final Table table=TableBinder.buildAndFillTable(schema,catalog,secondaryTableNameContext,SEC_TBL_NS_HELPER,false,uniqueConstraintHolders,null,null,mappings,null);
  if (secondaryTable != null) {
    TableBinder.addIndexes(table,secondaryTable.indexes(),mappings);
  }
  join.setTable(table);
  LOG.debugf("Adding secondary table to entity %s -> %s",persistentClass.getEntityName(),join.getTable().getName());
  org.hibernate.annotations.Table matchingTable=findMatchingComplimentTableAnnotation(join);
  if (matchingTable != null) {
    join.setSequentialSelect(FetchMode.JOIN != matchingTable.fetch());
    join.setInverse(matchingTable.inverse());
    join.setOptional(matchingTable.optional());
    if (!BinderHelper.isEmptyAnnotationValue(matchingTable.sqlInsert().sql())) {
      join.setCustomSQLInsert(matchingTable.sqlInsert().sql().trim(),matchingTable.sqlInsert().callable(),ExecuteUpdateResultCheckStyle.fromExternalName(matchingTable.sqlInsert().check().toString().toLowerCase()));
    }
    if (!BinderHelper.isEmptyAnnotationValue(matchingTable.sqlUpdate().sql())) {
      join.setCustomSQLUpdate(matchingTable.sqlUpdate().sql().trim(),matchingTable.sqlUpdate().callable(),ExecuteUpdateResultCheckStyle.fromExternalName(matchingTable.sqlUpdate().check().toString().toLowerCase()));
    }
    if (!BinderHelper.isEmptyAnnotationValue(matchingTable.sqlDelete().sql())) {
      join.setCustomSQLDelete(matchingTable.sqlDelete().sql().trim(),matchingTable.sqlDelete().callable(),ExecuteUpdateResultCheckStyle.fromExternalName(matchingTable.sqlDelete().check().toString().toLowerCase()));
    }
  }
 else {
    join.setSequentialSelect(false);
    join.setInverse(false);
    join.setOptional(true);
  }
  if (noDelayInPkColumnCreation) {
    createPrimaryColumnsToSecondaryTable(joinColumns,propertyHolder,join);
  }
 else {
    secondaryTables.put(table.getQuotedName(),join);
    secondaryTableJoins.put(table.getQuotedName(),joinColumns);
  }
  return join;
}
