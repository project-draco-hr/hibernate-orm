{
  persistentClass.setAbstract(annotatedClass.isAbstract());
  persistentClass.setClassName(annotatedClass.getName());
  persistentClass.setNodeName(name);
  persistentClass.setJpaEntityName(name);
  persistentClass.setEntityName(annotatedClass.getName());
  bindDiscriminatorValue();
  persistentClass.setLazy(lazy);
  if (proxyClass != null) {
    persistentClass.setProxyInterfaceName(proxyClass.getName());
  }
  persistentClass.setDynamicInsert(dynamicInsert);
  persistentClass.setDynamicUpdate(dynamicUpdate);
  if (persistentClass instanceof RootClass) {
    RootClass rootClass=(RootClass)persistentClass;
    boolean mutable=true;
    if (annotatedClass.isAnnotationPresent(Immutable.class)) {
      mutable=false;
    }
 else {
      org.hibernate.annotations.Entity entityAnn=annotatedClass.getAnnotation(org.hibernate.annotations.Entity.class);
      if (entityAnn != null) {
        mutable=entityAnn.mutable();
      }
    }
    rootClass.setMutable(mutable);
    rootClass.setExplicitPolymorphism(isExplicitPolymorphism(polymorphismType));
    if (StringHelper.isNotEmpty(where))     rootClass.setWhere(where);
    if (cacheConcurrentStrategy != null) {
      rootClass.setCacheConcurrencyStrategy(cacheConcurrentStrategy);
      rootClass.setCacheRegionName(cacheRegion);
      rootClass.setLazyPropertiesCacheable(cacheLazyProperty);
    }
    rootClass.setNaturalIdCacheRegionName(naturalIdCacheRegion);
    boolean forceDiscriminatorInSelects=forceDiscriminator == null ? mappings.forceDiscriminatorInSelectsByDefault() : forceDiscriminator;
    rootClass.setForceDiscriminator(forceDiscriminatorInSelects);
    if (insertableDiscriminator != null) {
      rootClass.setDiscriminatorInsertable(insertableDiscriminator);
    }
  }
 else {
    if (explicitHibernateEntityAnnotation) {
      LOG.entityAnnotationOnNonRoot(annotatedClass.getName());
    }
    if (annotatedClass.isAnnotationPresent(Immutable.class)) {
      LOG.immutableAnnotationOnNonRoot(annotatedClass.getName());
    }
  }
  persistentClass.setOptimisticLockMode(getVersioning(optimisticLockType));
  persistentClass.setSelectBeforeUpdate(selectBeforeUpdate);
  Persister persisterAnn=annotatedClass.getAnnotation(Persister.class);
  Class persister=null;
  if (persisterAnn != null) {
    persister=persisterAnn.impl();
  }
 else {
    org.hibernate.annotations.Entity entityAnn=annotatedClass.getAnnotation(org.hibernate.annotations.Entity.class);
    if (entityAnn != null && !BinderHelper.isEmptyAnnotationValue(entityAnn.persister())) {
      try {
        persister=ReflectHelper.classForName(entityAnn.persister());
      }
 catch (      ClassNotFoundException cnfe) {
        throw new AnnotationException("Could not find persister class: " + persister);
      }
    }
  }
  if (persister != null) {
    persistentClass.setEntityPersisterClass(persister);
  }
  persistentClass.setBatchSize(batchSize);
  SQLInsert sqlInsert=annotatedClass.getAnnotation(SQLInsert.class);
  SQLUpdate sqlUpdate=annotatedClass.getAnnotation(SQLUpdate.class);
  SQLDelete sqlDelete=annotatedClass.getAnnotation(SQLDelete.class);
  SQLDeleteAll sqlDeleteAll=annotatedClass.getAnnotation(SQLDeleteAll.class);
  Loader loader=annotatedClass.getAnnotation(Loader.class);
  if (sqlInsert != null) {
    persistentClass.setCustomSQLInsert(sqlInsert.sql().trim(),sqlInsert.callable(),ExecuteUpdateResultCheckStyle.fromExternalName(sqlInsert.check().toString().toLowerCase()));
  }
  if (sqlUpdate != null) {
    persistentClass.setCustomSQLUpdate(sqlUpdate.sql(),sqlUpdate.callable(),ExecuteUpdateResultCheckStyle.fromExternalName(sqlUpdate.check().toString().toLowerCase()));
  }
  if (sqlDelete != null) {
    persistentClass.setCustomSQLDelete(sqlDelete.sql(),sqlDelete.callable(),ExecuteUpdateResultCheckStyle.fromExternalName(sqlDelete.check().toString().toLowerCase()));
  }
  if (sqlDeleteAll != null) {
    persistentClass.setCustomSQLDelete(sqlDeleteAll.sql(),sqlDeleteAll.callable(),ExecuteUpdateResultCheckStyle.fromExternalName(sqlDeleteAll.check().toString().toLowerCase()));
  }
  if (loader != null) {
    persistentClass.setLoaderName(loader.namedQuery());
  }
  if (annotatedClass.isAnnotationPresent(Synchronize.class)) {
    Synchronize synchronizedWith=annotatedClass.getAnnotation(Synchronize.class);
    String[] tables=synchronizedWith.value();
    for (    String table : tables) {
      persistentClass.addSynchronizedTable(table);
    }
  }
  if (annotatedClass.isAnnotationPresent(Subselect.class)) {
    Subselect subselect=annotatedClass.getAnnotation(Subselect.class);
    this.subselect=subselect.value();
  }
  if (annotatedClass.isAnnotationPresent(Tuplizers.class)) {
    for (    Tuplizer tuplizer : annotatedClass.getAnnotation(Tuplizers.class).value()) {
      EntityMode mode=EntityMode.parse(tuplizer.entityMode());
      persistentClass.addTuplizer(mode,tuplizer.impl().getName());
    }
  }
  if (annotatedClass.isAnnotationPresent(Tuplizer.class)) {
    Tuplizer tuplizer=annotatedClass.getAnnotation(Tuplizer.class);
    EntityMode mode=EntityMode.parse(tuplizer.entityMode());
    persistentClass.addTuplizer(mode,tuplizer.impl().getName());
  }
  if (!inheritanceState.hasParents()) {
    for (    Map.Entry<String,String> filter : filters.entrySet()) {
      String filterName=filter.getKey();
      String cond=filter.getValue();
      if (BinderHelper.isEmptyAnnotationValue(cond)) {
        FilterDefinition definition=mappings.getFilterDefinition(filterName);
        cond=definition == null ? null : definition.getDefaultFilterCondition();
        if (StringHelper.isEmpty(cond)) {
          throw new AnnotationException("no filter condition found for filter " + filterName + " in "+ this.name);
        }
      }
      persistentClass.addFilter(filterName,cond);
    }
  }
 else   if (filters.size() > 0) {
    LOG.filterAnnotationOnSubclass(persistentClass.getEntityName());
  }
  LOG.debugf("Import with entity name %s",name);
  try {
    mappings.addImport(persistentClass.getEntityName(),name);
    String entityName=persistentClass.getEntityName();
    if (!entityName.equals(name)) {
      mappings.addImport(entityName,entityName);
    }
  }
 catch (  MappingException me) {
    throw new AnnotationException("Use of the same entity name twice: " + name,me);
  }
}
