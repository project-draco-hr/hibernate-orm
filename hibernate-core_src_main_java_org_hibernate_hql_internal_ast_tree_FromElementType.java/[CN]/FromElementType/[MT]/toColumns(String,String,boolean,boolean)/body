{
  checkInitialized();
  PropertyMapping propertyMapping=getPropertyMapping(path);
  if (!inSelect && queryableCollection != null && CollectionProperties.isCollectionProperty(path)) {
    Map enabledFilters=fromElement.getWalker().getEnabledFilters();
    String subquery=CollectionSubqueryFactory.createCollectionSubquery(joinSequence.copy().setUseThetaStyle(true),enabledFilters,propertyMapping.toColumns(tableAlias,path));
    LOG.debugf("toColumns(%s,%s) : subquery = %s",tableAlias,path,subquery);
    return new String[]{"(" + subquery + ")"};
  }
  if (forceAlias) {
    return propertyMapping.toColumns(tableAlias,path);
  }
 else   if (fromElement.getWalker().getStatementType() == HqlSqlTokenTypes.SELECT) {
    return propertyMapping.toColumns(tableAlias,path);
  }
 else   if (fromElement.getWalker().getCurrentClauseType() == HqlSqlTokenTypes.SELECT) {
    return propertyMapping.toColumns(tableAlias,path);
  }
 else   if (fromElement.getWalker().isSubQuery()) {
    if (isCorrelation()) {
      if (isMultiTable())       return propertyMapping.toColumns(tableAlias,path);
      return propertyMapping.toColumns(extractTableName(),path);
    }
    return propertyMapping.toColumns(tableAlias,path);
  }
 else {
    String[] columns=propertyMapping.toColumns(path);
    LOG.tracev("Using non-qualified column reference [{0} -> ({1})]",path,ArrayHelper.toString(columns));
    return columns;
  }
}
