{
  Connection connection=null;
  boolean wasAutoCommit=false;
  try {
    connection=session.getBatcher().openConnection();
    if (transacted) {
      if (connection.getAutoCommit()) {
        wasAutoCommit=true;
        connection.setAutoCommit(false);
      }
    }
    work.doWork(connection);
    if (transacted) {
      connection.commit();
    }
  }
 catch (  Throwable t) {
    try {
      if (transacted && connection != null && !connection.isClosed()) {
        connection.rollback();
      }
    }
 catch (    Throwable ignore) {
      log.trace("unable to release connection on exception [" + ignore + "]");
    }
    if (t instanceof HibernateException) {
      throw (HibernateException)t;
    }
 else     if (t instanceof SQLException) {
      throw JDBCExceptionHelper.convert(session.getFactory().getSQLExceptionConverter(),(SQLException)t,"error performing isolated work");
    }
 else {
      throw new HibernateException("error performing isolated work",t);
    }
  }
 finally {
    if (connection != null) {
      if (transacted && wasAutoCommit) {
        try {
          connection.setAutoCommit(true);
        }
 catch (        Throwable ignore) {
          log.trace("was unable to reset connection back to auto-commit");
        }
      }
      session.getBatcher().closeConnection(connection);
    }
  }
}
