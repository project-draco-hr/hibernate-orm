{
  final Set<String> groupedIndexNameSet=splitNames(groupedIndexNames);
  final boolean hasGroupedIndexes=!groupedIndexNameSet.isEmpty();
  final Set<String> groupedUniqueKeyNameSet=splitNames(groupedUniqueKeyNames);
  final boolean hasGroupedUniqueKeys=!groupedUniqueKeyNameSet.isEmpty();
  if (hasGroupedIndexes && StringHelper.isNotEmpty(columnAttribute)) {
    for (    String name : groupedIndexNameSet) {
      callback.registerIndexColumn(name,logicalTableName,columnAttribute);
    }
  }
  if (hasGroupedUniqueKeys && StringHelper.isNotEmpty(columnAttribute)) {
    for (    String name : groupedUniqueKeyNameSet) {
      callback.registerUniqueKeyColumn(name,logicalTableName,columnAttribute);
    }
  }
  for (  Object oColumn : columns) {
    if (!JaxbHbmColumnType.class.isInstance(oColumn)) {
      continue;
    }
    final JaxbHbmColumnType column=(JaxbHbmColumnType)oColumn;
    if (StringHelper.isNotEmpty(column.getIndex())) {
      callback.registerIndexColumn(column.getIndex(),logicalTableName,column.getName());
    }
    if (hasGroupedIndexes) {
      for (      String name : groupedIndexNameSet) {
        callback.registerIndexColumn(name,logicalTableName,column.getName());
      }
    }
    if (StringHelper.isNotEmpty(column.getUniqueKey())) {
      callback.registerUniqueKeyColumn(column.getUniqueKey(),logicalTableName,column.getName());
    }
    if (hasGroupedUniqueKeys) {
      for (      String name : groupedUniqueKeyNameSet) {
        callback.registerUniqueKeyColumn(name,logicalTableName,column.getName());
      }
    }
  }
}
