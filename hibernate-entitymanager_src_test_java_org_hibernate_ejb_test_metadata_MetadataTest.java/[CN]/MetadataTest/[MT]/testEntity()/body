{
  final EntityType<Fridge> fridgeType=entityManagerFactory().getMetamodel().entity(Fridge.class);
  assertEquals(Fridge.class,fridgeType.getBindableJavaType());
  assertEquals(Bindable.BindableType.ENTITY_TYPE,fridgeType.getBindableType());
  SingularAttribute<Fridge,Integer> wrapped=fridgeType.getDeclaredSingularAttribute("temperature",Integer.class);
  assertNotNull(wrapped);
  SingularAttribute<Fridge,Integer> primitive=fridgeType.getDeclaredSingularAttribute("temperature",int.class);
  assertNotNull(primitive);
  assertNotNull(fridgeType.getDeclaredSingularAttribute("temperature"));
  assertNotNull(fridgeType.getDeclaredAttribute("temperature"));
  final SingularAttribute<Fridge,Long> id=fridgeType.getDeclaredId(Long.class);
  assertNotNull(id);
  assertTrue(id.isId());
  try {
    fridgeType.getDeclaredId(java.util.Date.class);
    fail("expecting failure");
  }
 catch (  IllegalArgumentException ignore) {
  }
  final SingularAttribute<? super Fridge,Long> id2=fridgeType.getId(Long.class);
  assertNotNull(id2);
  assertEquals("Fridge",fridgeType.getName());
  assertEquals(Long.class,fridgeType.getIdType().getJavaType());
  assertTrue(fridgeType.hasSingleIdAttribute());
  assertFalse(fridgeType.hasVersionAttribute());
  assertEquals(Type.PersistenceType.ENTITY,fridgeType.getPersistenceType());
  assertEquals(3,fridgeType.getDeclaredAttributes().size());
  final EntityType<House> houseType=entityManagerFactory().getMetamodel().entity(House.class);
  assertEquals("org.hibernate.ejb.test.metadata.House",houseType.getName());
  assertTrue(houseType.hasSingleIdAttribute());
  final SingularAttribute<House,House.Key> houseId=houseType.getDeclaredId(House.Key.class);
  assertNotNull(houseId);
  assertTrue(houseId.isId());
  assertEquals(Attribute.PersistentAttributeType.EMBEDDED,houseId.getPersistentAttributeType());
  final EntityType<Person> personType=entityManagerFactory().getMetamodel().entity(Person.class);
  assertEquals("Homo",personType.getName());
  assertFalse(personType.hasSingleIdAttribute());
  final Set<SingularAttribute<? super Person,?>> ids=personType.getIdClassAttributes();
  assertNotNull(ids);
  assertEquals(2,ids.size());
  for (  SingularAttribute<? super Person,?> localId : ids) {
    assertTrue(localId.isId());
    assertSame(personType,localId.getDeclaringType());
    assertSame(localId,personType.getDeclaredAttribute(localId.getName()));
    assertSame(localId,personType.getDeclaredSingularAttribute(localId.getName()));
    assertSame(localId,personType.getAttribute(localId.getName()));
    assertSame(localId,personType.getSingularAttribute(localId.getName()));
    assertTrue(personType.getAttributes().contains(localId));
  }
  final EntityType<Giant> giantType=entityManagerFactory().getMetamodel().entity(Giant.class);
  assertEquals("HomoGigantus",giantType.getName());
  assertFalse(giantType.hasSingleIdAttribute());
  final Set<SingularAttribute<? super Giant,?>> giantIds=giantType.getIdClassAttributes();
  assertNotNull(giantIds);
  assertEquals(2,giantIds.size());
  assertEquals(personType.getIdClassAttributes(),giantIds);
  for (  SingularAttribute<? super Giant,?> localGiantId : giantIds) {
    assertTrue(localGiantId.isId());
    try {
      giantType.getDeclaredAttribute(localGiantId.getName());
      fail(localGiantId.getName() + " is a declared attribute, but shouldn't be");
    }
 catch (    IllegalArgumentException ex) {
    }
    try {
      giantType.getDeclaredSingularAttribute(localGiantId.getName());
      fail(localGiantId.getName() + " is a declared singular attribute, but shouldn't be");
    }
 catch (    IllegalArgumentException ex) {
    }
    assertSame(localGiantId,giantType.getAttribute(localGiantId.getName()));
    assertTrue(giantType.getAttributes().contains(localGiantId));
  }
  final EntityType<FoodItem> foodType=entityManagerFactory().getMetamodel().entity(FoodItem.class);
  assertTrue(foodType.hasVersionAttribute());
  final SingularAttribute<? super FoodItem,Long> version=foodType.getVersion(Long.class);
  assertNotNull(version);
  assertTrue(version.isVersion());
  assertEquals(3,foodType.getDeclaredAttributes().size());
}
