{
  final EntityEntry entry=event.getEntityEntry();
  final EventSource session=event.getSession();
  final Object entity=event.getEntity();
  final Status status=entry.getStatus();
  final EntityPersister persister=entry.getPersister();
  final Object[] values=event.getPropertyValues();
  if (LOG.isTraceEnabled()) {
    if (status == Status.DELETED) {
      if (!persister.isMutable()) {
        LOG.tracev("Updating immutable, deleted entity: {0}",MessageHelper.infoString(persister,entry.getId(),session.getFactory()));
      }
 else       if (!entry.isModifiableEntity()) {
        LOG.tracev("Updating non-modifiable, deleted entity: {0}",MessageHelper.infoString(persister,entry.getId(),session.getFactory()));
      }
 else {
        LOG.tracev("Updating deleted entity: ",MessageHelper.infoString(persister,entry.getId(),session.getFactory()));
      }
    }
 else {
      LOG.tracev("Updating entity: {0}",MessageHelper.infoString(persister,entry.getId(),session.getFactory()));
    }
  }
  final boolean intercepted=!entry.isBeingReplicated() && handleInterception(event);
  final Object nextVersion=getNextVersion(event);
  int[] dirtyProperties=event.getDirtyProperties();
  if (event.isDirtyCheckPossible() && dirtyProperties == null) {
    if (!intercepted && !event.hasDirtyCollection()) {
      throw new AssertionFailure("dirty, but no dirty properties");
    }
    dirtyProperties=ArrayHelper.EMPTY_INT_ARRAY;
  }
  new Nullability(session).checkNullability(values,persister,true);
  session.getActionQueue().addAction(new EntityUpdateAction(entry.getId(),values,dirtyProperties,event.hasDirtyCollection(),(status == Status.DELETED && !entry.isModifiableEntity() ? persister.getPropertyValues(entity) : entry.getLoadedState()),entry.getVersion(),nextVersion,entity,entry.getRowId(),persister,session));
  return intercepted;
}
