{
  Iterator<Join> joins=pc.getJoinIterator();
  Map<Join,Element> joinElements=new HashMap<Join,Element>();
  entitiesJoins.put(pc.getEntityName(),joinElements);
  while (joins.hasNext()) {
    Join join=joins.next();
    if (!checkPropertiesAudited(join.getPropertyIterator(),auditingData)) {
      continue;
    }
    String originalTableName=join.getTable().getName();
    String auditTableName=auditingData.getSecondaryTableDictionary().get(originalTableName);
    if (auditTableName == null) {
      auditTableName=verEntCfg.getAuditEntityName(originalTableName);
    }
    String schema=auditingData.getAuditTable().schema();
    if (StringTools.isEmpty(schema)) {
      schema=join.getTable().getSchema();
    }
    String catalog=auditingData.getAuditTable().catalog();
    if (StringTools.isEmpty(catalog)) {
      catalog=join.getTable().getCatalog();
    }
    Element joinElement=MetadataTools.createJoin(parent,auditTableName,schema,catalog);
    joinElements.put(join,joinElement);
    Element joinKey=joinElement.addElement("key");
    MetadataTools.addColumns(joinKey,join.getKey().getColumnIterator());
    MetadataTools.addColumn(joinKey,verEntCfg.getRevisionFieldName(),null,0,0,null);
  }
}
