{
  String name=JandexHelper.getValue(annotation,"name",String.class);
  if (StringHelper.isEmpty(name)) {
    throw new AnnotationException("A named query must have a name when used in class or package level");
  }
  String query=JandexHelper.getValue(annotation,"query",String.class);
  AnnotationInstance[] hints=JandexHelper.getValue(annotation,"hints",AnnotationInstance[].class);
  String cacheRegion=getString(hints,QueryHints.CACHE_REGION);
  if (StringHelper.isEmpty(cacheRegion)) {
    cacheRegion=null;
  }
  Integer timeout=getTimeout(hints,query);
  if (timeout != null && timeout < 0) {
    timeout=null;
  }
  Integer fetchSize=getInteger(hints,QueryHints.FETCH_SIZE,name);
  if (fetchSize != null && fetchSize < 0) {
    fetchSize=null;
  }
  String comment=getString(hints,QueryHints.COMMENT);
  if (StringHelper.isEmpty(comment)) {
    comment=null;
  }
  metadata.addNamedQuery(new NamedQueryDefinitionBuilder().setName(name).setQuery(query).setCacheable(getBoolean(hints,QueryHints.CACHEABLE,name)).setCacheRegion(cacheRegion).setTimeout(timeout).setFetchSize(fetchSize).setFlushMode(getFlushMode(hints,QueryHints.FLUSH_MODE,name)).setCacheMode(getCacheMode(hints,QueryHints.CACHE_MODE,name)).setReadOnly(getBoolean(hints,QueryHints.READ_ONLY,name)).setComment(comment).setParameterTypes(null).createNamedQueryDefinition());
  LOG.debugf("Binding named query: %s => %s",name,query);
}
