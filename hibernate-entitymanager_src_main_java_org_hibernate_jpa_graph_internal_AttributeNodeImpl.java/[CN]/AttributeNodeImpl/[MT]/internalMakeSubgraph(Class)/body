{
  if (attribute.getPersistentAttributeType() == Attribute.PersistentAttributeType.BASIC || attribute.getPersistentAttributeType() == Attribute.PersistentAttributeType.EMBEDDED) {
    throw new IllegalArgumentException(String.format("Attribute [%s] is not of managed type",getAttributeName()));
  }
  if (attribute.getPersistentAttributeType() == Attribute.PersistentAttributeType.ELEMENT_COLLECTION) {
    throw new IllegalArgumentException(String.format("Collection elements [%s] is not of managed type",getAttributeName()));
  }
  if (subgraphMap == null) {
    subgraphMap=new HashMap<Class,Subgraph>();
  }
  final AssociationType attributeType=(AssociationType)Helper.resolveType(sessionFactory(),attribute);
  final Joinable joinable=attributeType.getAssociatedJoinable(sessionFactory());
  if (joinable.isCollection()) {
    final EntityPersister elementEntityPersister=((QueryableCollection)joinable).getElementPersister();
    if (type == null) {
      type=elementEntityPersister.getMappedClass();
    }
 else {
      if (!isTreatableAs(elementEntityPersister,type)) {
        throw new IllegalArgumentException(String.format("Collection elements [%s] cannot be treated as requested type [%s] : %s",getAttributeName(),type.getName(),elementEntityPersister.getMappedClass().getName()));
      }
    }
  }
 else {
    final EntityPersister entityPersister=(EntityPersister)joinable;
    if (type == null) {
      type=entityPersister.getMappedClass();
    }
 else {
      if (!isTreatableAs(entityPersister,type)) {
        throw new IllegalArgumentException(String.format("Attribute [%s] cannot be treated as requested type [%s] : %s",getAttributeName(),type.getName(),entityPersister.getMappedClass().getName()));
      }
    }
  }
  final SubgraphImpl subgraph=new SubgraphImpl(this.entityManagerFactory,attribute.getDeclaringType(),type);
  subgraphMap.put(type,subgraph);
  return subgraph;
}
