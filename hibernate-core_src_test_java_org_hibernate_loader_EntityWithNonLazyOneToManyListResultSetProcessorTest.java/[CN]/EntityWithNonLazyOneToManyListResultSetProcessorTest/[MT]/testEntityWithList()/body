{
  final EntityPersister entityPersister=sessionFactory().getEntityPersister(Poster.class.getName());
  Session session=openSession();
  session.beginTransaction();
  Poster poster=new Poster();
  poster.pid=0;
  poster.name="John Doe";
  Message message1=new Message();
  message1.mid=1;
  message1.msgTxt="Howdy!";
  message1.poster=poster;
  poster.messages.add(message1);
  Message message2=new Message();
  message2.mid=2;
  message2.msgTxt="Bye!";
  message2.poster=poster;
  poster.messages.add(message2);
  session.save(poster);
  session.getTransaction().commit();
  session.close();
  session=openSession();
  session.beginTransaction();
  Poster posterGotten=(Poster)session.get(Poster.class,poster.pid);
  assertEquals(0,posterGotten.pid.intValue());
  assertEquals(poster.name,posterGotten.name);
  assertTrue(Hibernate.isInitialized(posterGotten.messages));
  assertEquals(2,posterGotten.messages.size());
  assertEquals(message1.msgTxt,posterGotten.messages.get(0).msgTxt);
  assertEquals(message2.msgTxt,posterGotten.messages.get(1).msgTxt);
  assertSame(posterGotten,posterGotten.messages.get(0).poster);
  assertSame(posterGotten,posterGotten.messages.get(1).poster);
  session.getTransaction().commit();
  session.close();
{
    final LoadPlan plan=Helper.INSTANCE.buildLoadPlan(sessionFactory(),entityPersister);
    final LoadQueryDetails queryDetails=Helper.INSTANCE.buildLoadQueryDetails(plan,sessionFactory());
    final String sql=queryDetails.getSqlStatement();
    final ResultSetProcessor resultSetProcessor=queryDetails.getResultSetProcessor();
    final List results=new ArrayList();
    final Session workSession=openSession();
    workSession.beginTransaction();
    workSession.doWork(new Work(){
      @Override public void execute(      Connection connection) throws SQLException {
        PreparedStatement ps=connection.prepareStatement(sql);
        ps.setInt(1,0);
        ResultSet resultSet=ps.executeQuery();
        results.addAll(resultSetProcessor.extractResults(resultSet,(SessionImplementor)workSession,new QueryParameters(),new NamedParameterContext(){
          @Override public int[] getNamedParameterLocations(          String name){
            return new int[0];
          }
        }
,true,false,null,null));
        resultSet.close();
        ps.close();
      }
    }
);
    assertEquals(2,results.size());
    Object result1=results.get(0);
    assertNotNull(result1);
    assertSame(result1,results.get(1));
    Poster workPoster=ExtraAssertions.assertTyping(Poster.class,result1);
    assertEquals(0,workPoster.pid.intValue());
    assertEquals(poster.name,workPoster.name);
    assertTrue(Hibernate.isInitialized(workPoster.messages));
    assertEquals(2,workPoster.messages.size());
    assertTrue(Hibernate.isInitialized(posterGotten.messages));
    assertEquals(2,workPoster.messages.size());
    assertEquals(message1.msgTxt,workPoster.messages.get(0).msgTxt);
    assertEquals(message2.msgTxt,workPoster.messages.get(1).msgTxt);
    assertSame(workPoster,workPoster.messages.get(0).poster);
    assertSame(workPoster,workPoster.messages.get(1).poster);
    workSession.getTransaction().commit();
    workSession.close();
  }
  session=openSession();
  session.beginTransaction();
  session.delete(poster);
  session.getTransaction().commit();
  session.close();
}
