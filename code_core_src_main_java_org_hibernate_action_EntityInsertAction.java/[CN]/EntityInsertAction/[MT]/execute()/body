{
  EntityPersister persister=getPersister();
  SessionImplementor session=getSession();
  Object instance=getInstance();
  Serializable id=getId();
  boolean veto=preInsert();
  if (!veto) {
    persister.insert(id,state,instance,session);
    EntityEntry entry=session.getPersistenceContext().getEntry(instance);
    if (entry == null) {
      throw new AssertionFailure("possible nonthreadsafe access to session");
    }
    entry.postInsert();
    if (persister.hasInsertGeneratedProperties()) {
      persister.processInsertGeneratedProperties(id,instance,state,session);
      if (persister.isVersionPropertyGenerated()) {
        version=Versioning.getVersion(state,persister);
      }
      entry.postUpdate(instance,state,version);
    }
  }
  final SessionFactoryImplementor factory=getSession().getFactory();
  if (isCachePutEnabled(persister,session)) {
    CacheEntry ce=new CacheEntry(state,persister,persister.hasUninitializedLazyProperties(instance,session.getEntityMode()),version,session,instance);
    cacheEntry=persister.getCacheEntryStructure().structure(ce);
    final CacheKey ck=new CacheKey(id,persister.getIdentifierType(),persister.getRootEntityName(),session.getEntityMode(),session.getFactory());
    boolean put=persister.getCacheAccessStrategy().insert(ck,cacheEntry,version);
    if (put && factory.getStatistics().isStatisticsEnabled()) {
      factory.getStatisticsImplementor().secondLevelCachePut(getPersister().getCacheAccessStrategy().getRegion().getName());
    }
  }
  postInsert();
  if (factory.getStatistics().isStatisticsEnabled() && !veto) {
    factory.getStatisticsImplementor().insertEntity(getPersister().getEntityName());
  }
}
