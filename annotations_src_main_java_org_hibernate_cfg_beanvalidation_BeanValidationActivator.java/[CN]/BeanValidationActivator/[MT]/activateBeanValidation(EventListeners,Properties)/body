{
  Set<ValidationMode> modes=ValidationMode.getModes(properties.get(MODE_PROPERTY));
  try {
    ReflectHelper.classForName(BV_DISCOVERY_CLASS,BeanValidationActivator.class);
  }
 catch (  ClassNotFoundException e) {
    if (modes.contains(ValidationMode.CALLBACK)) {
      throw new HibernateException("Bean Validation not available in the class path but required in " + MODE_PROPERTY);
    }
 else     if (modes.contains(ValidationMode.AUTO)) {
      return;
    }
  }
  if (properties.getProperty(Environment.CHECK_NULLABILITY) == null) {
    properties.setProperty(Environment.CHECK_NULLABILITY,"false");
  }
  if (!(modes.contains(ValidationMode.CALLBACK) || modes.contains(ValidationMode.AUTO)))   return;
  try {
    Class<?> activator=ReflectHelper.classForName(TYPE_SAFE_ACTIVATOR_CLASS,BeanValidationActivator.class);
    Method activateBeanValidation=activator.getMethod(TYPE_SAFE_ACTIVATOR_METHOD,EventListeners.class,Properties.class);
    activateBeanValidation.invoke(null,eventListeners,properties);
  }
 catch (  NoSuchMethodException e) {
    throw new HibernateException("Unable to get the default Bean Validation factory",e);
  }
catch (  IllegalAccessException e) {
    throw new HibernateException("Unable to get the default Bean Validation factory",e);
  }
catch (  InvocationTargetException e) {
    throw new HibernateException("Unable to get the default Bean Validation factory",e);
  }
catch (  ClassNotFoundException e) {
    throw new HibernateException("Unable to get the default Bean Validation factory",e);
  }
}
