{
  clearCounts();
  Session s=openSession();
  Transaction t=s.beginTransaction();
  DataPoint dp=null;
  for (int i=0; i < 100; i++) {
    dp=new DataPoint();
    dp.setX(new BigDecimal(i * 0.1d).setScale(19,BigDecimal.ROUND_DOWN));
    dp.setY(new BigDecimal(Math.cos(dp.getX().doubleValue())).setScale(19,BigDecimal.ROUND_DOWN));
    s.save(dp);
  }
  t.commit();
  s.close();
  assertInsertCount(100);
  assertUpdateCount(0);
  clearCounts();
  s=openSession();
  t=s.beginTransaction();
  DataPoint dpLast=(DataPoint)s.get(DataPoint.class,dp.getId());
  assertFalse(s.isReadOnly(dpLast));
  int i=0;
  ScrollableResults sr=s.createQuery("from DataPoint dp order by dp.x asc").setReadOnly(true).scroll(ScrollMode.FORWARD_ONLY);
  int nExpectedChanges=0;
  while (sr.next()) {
    dp=(DataPoint)sr.get(0);
    if (dp.getId() == dpLast.getId()) {
      assertFalse(s.isReadOnly(dp));
    }
 else {
      assertTrue(s.isReadOnly(dp));
    }
    if (++i == 50) {
      s.setReadOnly(dp,false);
      nExpectedChanges=(dp == dpLast ? 1 : 2);
    }
    dp.setDescription("done!");
  }
  t.commit();
  s.clear();
  assertInsertCount(0);
  assertUpdateCount(nExpectedChanges);
  clearCounts();
  t=s.beginTransaction();
  List list=s.createQuery("from DataPoint where description='done!'").list();
  assertEquals(list.size(),nExpectedChanges);
  assertEquals(100,s.createQuery("delete from DataPoint").executeUpdate());
  t.commit();
  s.close();
  assertUpdateCount(0);
}
