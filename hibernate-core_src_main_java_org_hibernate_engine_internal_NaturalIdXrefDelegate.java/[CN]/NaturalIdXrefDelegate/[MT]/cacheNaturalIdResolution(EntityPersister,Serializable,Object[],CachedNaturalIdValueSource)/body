{
  persister=locatePersisterForKey(persister);
  validateNaturalId(persister,naturalIdValues);
  Object[] previousNaturalIdValues=valueSource == CachedNaturalIdValueSource.UPDATE ? persistenceContext.getNaturalIdSnapshot(pk,persister) : null;
  NaturalIdResolutionCache entityNaturalIdResolutionCache=naturalIdResolutionCacheMap.get(persister);
  if (entityNaturalIdResolutionCache == null) {
    entityNaturalIdResolutionCache=new NaturalIdResolutionCache(persister);
    naturalIdResolutionCacheMap.put(persister,entityNaturalIdResolutionCache);
  }
  final boolean justAddedToLocalCache=entityNaturalIdResolutionCache.cache(pk,naturalIdValues);
  if (persister.hasNaturalIdCache()) {
    final NaturalIdRegionAccessStrategy naturalIdCacheAccessStrategy=persister.getNaturalIdCacheAccessStrategy();
    final NaturalIdCacheKey naturalIdCacheKey=new NaturalIdCacheKey(naturalIdValues,persister,session());
    final SessionFactoryImplementor factory=session().getFactory();
switch (valueSource) {
case LOAD:
{
        final boolean put=naturalIdCacheAccessStrategy.putFromLoad(naturalIdCacheKey,pk,session().getTimestamp(),null);
        if (put && justAddedToLocalCache && factory.getStatistics().isStatisticsEnabled()) {
          factory.getStatisticsImplementor().naturalIdCachePut(naturalIdCacheAccessStrategy.getRegion().getName());
        }
        break;
      }
case INSERT:
{
      final boolean put=naturalIdCacheAccessStrategy.insert(naturalIdCacheKey,pk);
      if (put && justAddedToLocalCache && factory.getStatistics().isStatisticsEnabled()) {
        factory.getStatisticsImplementor().naturalIdCachePut(naturalIdCacheAccessStrategy.getRegion().getName());
      }
      ((EventSource)session()).getActionQueue().registerProcess(new AfterTransactionCompletionProcess(){
        @Override public void doAfterTransactionCompletion(        boolean success,        SessionImplementor session){
          final boolean put=naturalIdCacheAccessStrategy.afterInsert(naturalIdCacheKey,pk);
          if (put && justAddedToLocalCache && factory.getStatistics().isStatisticsEnabled()) {
            factory.getStatisticsImplementor().naturalIdCachePut(naturalIdCacheAccessStrategy.getRegion().getName());
          }
        }
      }
);
      break;
    }
case UPDATE:
{
    final NaturalIdCacheKey previousCacheKey=new NaturalIdCacheKey(previousNaturalIdValues,persister,session());
    final SoftLock removalLock=naturalIdCacheAccessStrategy.lockItem(previousCacheKey,null);
    naturalIdCacheAccessStrategy.remove(previousCacheKey);
    final SoftLock lock=naturalIdCacheAccessStrategy.lockItem(naturalIdCacheKey,null);
    final boolean put=naturalIdCacheAccessStrategy.update(naturalIdCacheKey,pk);
    if (put && justAddedToLocalCache && factory.getStatistics().isStatisticsEnabled()) {
      factory.getStatisticsImplementor().naturalIdCachePut(naturalIdCacheAccessStrategy.getRegion().getName());
    }
    ((EventSource)session()).getActionQueue().registerProcess(new AfterTransactionCompletionProcess(){
      @Override public void doAfterTransactionCompletion(      boolean success,      SessionImplementor session){
        naturalIdCacheAccessStrategy.unlockRegion(removalLock);
        final boolean put=naturalIdCacheAccessStrategy.afterUpdate(naturalIdCacheKey,pk,lock);
        if (put && justAddedToLocalCache && factory.getStatistics().isStatisticsEnabled()) {
          factory.getStatisticsImplementor().naturalIdCachePut(naturalIdCacheAccessStrategy.getRegion().getName());
        }
        naturalIdCacheAccessStrategy.unlockItem(naturalIdCacheKey,lock);
      }
    }
);
    break;
  }
}
}
}
