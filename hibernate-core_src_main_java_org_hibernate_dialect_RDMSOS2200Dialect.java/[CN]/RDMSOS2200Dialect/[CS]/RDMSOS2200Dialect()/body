{
  super();
  log.info("RDMSOS2200Dialect version: 1.0");
  registerFunction("abs",new StandardSQLFunction("abs"));
  registerFunction("sign",new StandardSQLFunction("sign",StandardBasicTypes.INTEGER));
  registerFunction("ascii",new StandardSQLFunction("ascii",StandardBasicTypes.INTEGER));
  registerFunction("char_length",new StandardSQLFunction("char_length",StandardBasicTypes.INTEGER));
  registerFunction("character_length",new StandardSQLFunction("character_length",StandardBasicTypes.INTEGER));
  registerFunction("concat",new SQLFunctionTemplate(StandardBasicTypes.STRING,"concat(?1, ?2)"));
  registerFunction("instr",new StandardSQLFunction("instr",StandardBasicTypes.STRING));
  registerFunction("lpad",new StandardSQLFunction("lpad",StandardBasicTypes.STRING));
  registerFunction("replace",new StandardSQLFunction("replace",StandardBasicTypes.STRING));
  registerFunction("rpad",new StandardSQLFunction("rpad",StandardBasicTypes.STRING));
  registerFunction("substr",new StandardSQLFunction("substr",StandardBasicTypes.STRING));
  registerFunction("lcase",new StandardSQLFunction("lcase"));
  registerFunction("lower",new StandardSQLFunction("lower"));
  registerFunction("ltrim",new StandardSQLFunction("ltrim"));
  registerFunction("reverse",new StandardSQLFunction("reverse"));
  registerFunction("rtrim",new StandardSQLFunction("rtrim"));
  registerFunction("trim",new SQLFunctionTemplate(StandardBasicTypes.INTEGER,"ltrim(rtrim(?1))"));
  registerFunction("soundex",new StandardSQLFunction("soundex"));
  registerFunction("space",new StandardSQLFunction("space",StandardBasicTypes.STRING));
  registerFunction("ucase",new StandardSQLFunction("ucase"));
  registerFunction("upper",new StandardSQLFunction("upper"));
  registerFunction("acos",new StandardSQLFunction("acos",StandardBasicTypes.DOUBLE));
  registerFunction("asin",new StandardSQLFunction("asin",StandardBasicTypes.DOUBLE));
  registerFunction("atan",new StandardSQLFunction("atan",StandardBasicTypes.DOUBLE));
  registerFunction("cos",new StandardSQLFunction("cos",StandardBasicTypes.DOUBLE));
  registerFunction("cosh",new StandardSQLFunction("cosh",StandardBasicTypes.DOUBLE));
  registerFunction("cot",new StandardSQLFunction("cot",StandardBasicTypes.DOUBLE));
  registerFunction("exp",new StandardSQLFunction("exp",StandardBasicTypes.DOUBLE));
  registerFunction("ln",new StandardSQLFunction("ln",StandardBasicTypes.DOUBLE));
  registerFunction("log",new StandardSQLFunction("log",StandardBasicTypes.DOUBLE));
  registerFunction("log10",new StandardSQLFunction("log10",StandardBasicTypes.DOUBLE));
  registerFunction("pi",new NoArgSQLFunction("pi",StandardBasicTypes.DOUBLE));
  registerFunction("rand",new NoArgSQLFunction("rand",StandardBasicTypes.DOUBLE));
  registerFunction("sin",new StandardSQLFunction("sin",StandardBasicTypes.DOUBLE));
  registerFunction("sinh",new StandardSQLFunction("sinh",StandardBasicTypes.DOUBLE));
  registerFunction("sqrt",new StandardSQLFunction("sqrt",StandardBasicTypes.DOUBLE));
  registerFunction("tan",new StandardSQLFunction("tan",StandardBasicTypes.DOUBLE));
  registerFunction("tanh",new StandardSQLFunction("tanh",StandardBasicTypes.DOUBLE));
  registerFunction("round",new StandardSQLFunction("round"));
  registerFunction("trunc",new StandardSQLFunction("trunc"));
  registerFunction("ceil",new StandardSQLFunction("ceil"));
  registerFunction("floor",new StandardSQLFunction("floor"));
  registerFunction("chr",new StandardSQLFunction("chr",StandardBasicTypes.CHARACTER));
  registerFunction("initcap",new StandardSQLFunction("initcap"));
  registerFunction("user",new NoArgSQLFunction("user",StandardBasicTypes.STRING,false));
  registerFunction("current_date",new NoArgSQLFunction("current_date",StandardBasicTypes.DATE,false));
  registerFunction("current_time",new NoArgSQLFunction("current_timestamp",StandardBasicTypes.TIME,false));
  registerFunction("current_timestamp",new NoArgSQLFunction("current_timestamp",StandardBasicTypes.TIMESTAMP,false));
  registerFunction("curdate",new NoArgSQLFunction("curdate",StandardBasicTypes.DATE));
  registerFunction("curtime",new NoArgSQLFunction("curtime",StandardBasicTypes.TIME));
  registerFunction("days",new StandardSQLFunction("days",StandardBasicTypes.INTEGER));
  registerFunction("dayofmonth",new StandardSQLFunction("dayofmonth",StandardBasicTypes.INTEGER));
  registerFunction("dayname",new StandardSQLFunction("dayname",StandardBasicTypes.STRING));
  registerFunction("dayofweek",new StandardSQLFunction("dayofweek",StandardBasicTypes.INTEGER));
  registerFunction("dayofyear",new StandardSQLFunction("dayofyear",StandardBasicTypes.INTEGER));
  registerFunction("hour",new StandardSQLFunction("hour",StandardBasicTypes.INTEGER));
  registerFunction("last_day",new StandardSQLFunction("last_day",StandardBasicTypes.DATE));
  registerFunction("microsecond",new StandardSQLFunction("microsecond",StandardBasicTypes.INTEGER));
  registerFunction("minute",new StandardSQLFunction("minute",StandardBasicTypes.INTEGER));
  registerFunction("month",new StandardSQLFunction("month",StandardBasicTypes.INTEGER));
  registerFunction("monthname",new StandardSQLFunction("monthname",StandardBasicTypes.STRING));
  registerFunction("now",new NoArgSQLFunction("now",StandardBasicTypes.TIMESTAMP));
  registerFunction("quarter",new StandardSQLFunction("quarter",StandardBasicTypes.INTEGER));
  registerFunction("second",new StandardSQLFunction("second",StandardBasicTypes.INTEGER));
  registerFunction("time",new StandardSQLFunction("time",StandardBasicTypes.TIME));
  registerFunction("timestamp",new StandardSQLFunction("timestamp",StandardBasicTypes.TIMESTAMP));
  registerFunction("week",new StandardSQLFunction("week",StandardBasicTypes.INTEGER));
  registerFunction("year",new StandardSQLFunction("year",StandardBasicTypes.INTEGER));
  registerFunction("atan2",new StandardSQLFunction("atan2",StandardBasicTypes.DOUBLE));
  registerFunction("mod",new StandardSQLFunction("mod",StandardBasicTypes.INTEGER));
  registerFunction("nvl",new StandardSQLFunction("nvl"));
  registerFunction("power",new StandardSQLFunction("power",StandardBasicTypes.DOUBLE));
  registerColumnType(Types.BIT,"SMALLINT");
  registerColumnType(Types.TINYINT,"SMALLINT");
  registerColumnType(Types.BIGINT,"NUMERIC(21,0)");
  registerColumnType(Types.SMALLINT,"SMALLINT");
  registerColumnType(Types.CHAR,"CHARACTER(1)");
  registerColumnType(Types.DOUBLE,"DOUBLE PRECISION");
  registerColumnType(Types.FLOAT,"FLOAT");
  registerColumnType(Types.REAL,"REAL");
  registerColumnType(Types.INTEGER,"INTEGER");
  registerColumnType(Types.NUMERIC,"NUMERIC(21,$l)");
  registerColumnType(Types.DECIMAL,"NUMERIC(21,$l)");
  registerColumnType(Types.DATE,"DATE");
  registerColumnType(Types.TIME,"TIME");
  registerColumnType(Types.TIMESTAMP,"TIMESTAMP");
  registerColumnType(Types.VARCHAR,"CHARACTER($l)");
  registerColumnType(Types.BLOB,"BLOB($l)");
}
