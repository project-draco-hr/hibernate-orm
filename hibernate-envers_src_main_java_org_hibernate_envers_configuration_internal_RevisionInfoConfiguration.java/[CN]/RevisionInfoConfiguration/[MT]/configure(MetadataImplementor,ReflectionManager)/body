{
  boolean revisionEntityFound=false;
  RevisionInfoGenerator revisionInfoGenerator=null;
  Class<?> revisionInfoClass=null;
  for (  PersistentClass persistentClass : metadata.getEntityBindings()) {
    if (persistentClass.getClassName() != null) {
      XClass clazz;
      try {
        clazz=reflectionManager.classForName(persistentClass.getClassName());
      }
 catch (      ClassLoadingException e) {
        throw new MappingException(e);
      }
      final RevisionEntity revisionEntity=clazz.getAnnotation(RevisionEntity.class);
      if (revisionEntity != null) {
        if (revisionEntityFound) {
          throw new MappingException("Only one entity may be annotated with @RevisionEntity!");
        }
        if (clazz.getAnnotation(Audited.class) != null) {
          throw new MappingException("An entity annotated with @RevisionEntity cannot be audited!");
        }
        revisionEntityFound=true;
        final MutableBoolean revisionNumberFound=new MutableBoolean();
        final MutableBoolean revisionTimestampFound=new MutableBoolean();
        final MutableBoolean modifiedEntityNamesFound=new MutableBoolean();
        searchForRevisionInfoCfg(clazz,reflectionManager,revisionNumberFound,revisionTimestampFound,modifiedEntityNamesFound);
        if (!revisionNumberFound.isSet()) {
          throw new MappingException("An entity annotated with @RevisionEntity must have a field annotated " + "with @RevisionNumber!");
        }
        if (!revisionTimestampFound.isSet()) {
          throw new MappingException("An entity annotated with @RevisionEntity must have a field annotated " + "with @RevisionTimestamp!");
        }
        revisionInfoEntityName=persistentClass.getEntityName();
        revisionInfoClass=persistentClass.getMappedClass();
        final Class<? extends RevisionListener> revisionListenerClass=getRevisionListenerClass(revisionEntity.value());
        revisionInfoTimestampType=persistentClass.getProperty(revisionInfoTimestampData.getName()).getType();
        if (globalCfg.isTrackEntitiesChangedInRevision() || (globalCfg.isUseRevisionEntityWithNativeId() && DefaultTrackingModifiedEntitiesRevisionEntity.class.isAssignableFrom(revisionInfoClass)) || (!globalCfg.isUseRevisionEntityWithNativeId() && SequenceIdTrackingModifiedEntitiesRevisionEntity.class.isAssignableFrom(revisionInfoClass))|| modifiedEntityNamesFound.isSet()) {
          revisionInfoGenerator=new DefaultTrackingModifiedEntitiesRevisionInfoGenerator(revisionInfoEntityName,revisionInfoClass,revisionListenerClass,revisionInfoTimestampData,isTimestampAsDate(),modifiedEntityNamesData,metadata.getMetadataBuildingOptions().getServiceRegistry());
          globalCfg.setTrackEntitiesChangedInRevision(true);
        }
 else {
          revisionInfoGenerator=new DefaultRevisionInfoGenerator(revisionInfoEntityName,revisionInfoClass,revisionListenerClass,revisionInfoTimestampData,isTimestampAsDate(),metadata.getMetadataBuildingOptions().getServiceRegistry());
        }
      }
    }
  }
  Document revisionInfoXmlMapping=null;
  final Class<? extends RevisionListener> revisionListenerClass=getRevisionListenerClass(RevisionListener.class);
  if (revisionInfoGenerator == null) {
    if (globalCfg.isTrackEntitiesChangedInRevision()) {
      revisionInfoClass=globalCfg.isUseRevisionEntityWithNativeId() ? DefaultTrackingModifiedEntitiesRevisionEntity.class : SequenceIdTrackingModifiedEntitiesRevisionEntity.class;
      revisionInfoEntityName=revisionInfoClass.getName();
      revisionInfoGenerator=new DefaultTrackingModifiedEntitiesRevisionInfoGenerator(revisionInfoEntityName,revisionInfoClass,revisionListenerClass,revisionInfoTimestampData,isTimestampAsDate(),modifiedEntityNamesData,metadata.getMetadataBuildingOptions().getServiceRegistry());
    }
 else {
      revisionInfoClass=globalCfg.isUseRevisionEntityWithNativeId() ? DefaultRevisionEntity.class : SequenceIdRevisionEntity.class;
      revisionInfoGenerator=new DefaultRevisionInfoGenerator(revisionInfoEntityName,revisionInfoClass,revisionListenerClass,revisionInfoTimestampData,isTimestampAsDate(),metadata.getMetadataBuildingOptions().getServiceRegistry());
    }
    revisionInfoXmlMapping=generateDefaultRevisionInfoXmlMapping();
  }
  return new RevisionInfoConfigurationResult(revisionInfoGenerator,revisionInfoXmlMapping,new RevisionInfoQueryCreator(revisionInfoEntityName,revisionInfoIdData.getName(),revisionInfoTimestampData.getName(),isTimestampAsDate()),generateRevisionInfoRelationMapping(),new RevisionInfoNumberReader(revisionInfoClass,revisionInfoIdData,metadata.getMetadataBuildingOptions().getServiceRegistry()),globalCfg.isTrackEntitiesChangedInRevision() ? new ModifiedEntityNamesReader(revisionInfoClass,modifiedEntityNamesData,metadata.getMetadataBuildingOptions().getServiceRegistry()) : null,revisionInfoEntityName,revisionInfoClass,revisionInfoTimestampData);
}
