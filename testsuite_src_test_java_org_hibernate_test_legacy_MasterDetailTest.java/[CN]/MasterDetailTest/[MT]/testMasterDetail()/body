{
  if (getDialect() instanceof HSQLDialect)   return;
  Session s=openSession();
  Transaction t=s.beginTransaction();
  Master master=new Master();
  assertTrue("save returned native id",s.save(master) != null);
  Serializable mid=s.getIdentifier(master);
  Detail d1=new Detail();
  d1.setMaster(master);
  Serializable did=s.save(d1);
  Detail d2=new Detail();
  d2.setI(12);
  d2.setMaster(master);
  assertTrue("generated id returned",s.save(d2) != null);
  master.addDetail(d1);
  master.addDetail(d2);
  if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof MckoiDialect)&& !(getDialect() instanceof org.hibernate.dialect.TimesTenDialect)) {
    assertTrue("query",s.createQuery("from Detail d, Master m where m = d.master and size(m.outgoing) = 0 and size(m.incoming) = 0").list().size() == 2);
  }
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  master=new Master();
  s.load(master,mid);
  assertTrue(master.getDetails().size() == 2);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  master=(Master)s.load(Master.class,mid);
  Iterator iter=master.getDetails().iterator();
  int i=0;
  while (iter.hasNext()) {
    Detail d=(Detail)iter.next();
    assertTrue("master-detail",d.getMaster() == master);
    i++;
  }
  assertTrue("master-detail",i == 2);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  assertTrue(s.createQuery("select elements(master.details) from Master master").list().size() == 2);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  List list=s.createQuery("from Master m left join fetch m.details").list();
  Master m=(Master)list.get(0);
  assertTrue(Hibernate.isInitialized(m.getDetails()));
  assertTrue(m.getDetails().size() == 2);
  list=s.createQuery("from Detail d inner join fetch d.master").list();
  Detail dt=(Detail)list.get(0);
  Serializable dtid=s.getIdentifier(dt);
  assertTrue(dt.getMaster() == m);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  list=s.createQuery("select m from Master m1, Master m left join fetch m.details where m.name=m1.name").list();
  assertTrue(Hibernate.isInitialized(((Master)list.get(0)).getDetails()));
  dt=(Detail)s.load(Detail.class,dtid);
  assertTrue(((Master)list.get(0)).getDetails().contains(dt));
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  list=s.createQuery("select m, m1.name from Master m1, Master m left join fetch m.details where m.name=m1.name").list();
  assertTrue(Hibernate.isInitialized(((Master)((Object[])list.get(0))[0]).getDetails()));
  dt=(Detail)s.load(Detail.class,dtid);
  assertTrue(((Master)((Object[])list.get(0))[0]).getDetails().contains(dt));
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  Detail dd=(Detail)s.load(Detail.class,did);
  master=dd.getMaster();
  assertTrue("detail-master",master.getDetails().contains(dd));
  assertTrue(s.createFilter(master.getDetails(),"order by this.i desc").list().size() == 2);
  assertTrue(s.createFilter(master.getDetails(),"select this where this.id > -1").list().size() == 2);
  Query q=s.createFilter(master.getDetails(),"where this.id > :id");
  q.setInteger("id",-1);
  assertTrue(q.list().size() == 2);
  q=s.createFilter(master.getDetails(),"where this.id > :id1 and this.id < :id2");
  q.setInteger("id1",-1);
  q.setInteger("id2",99999999);
  assertTrue(q.list().size() == 2);
  q.setInteger("id2",-1);
  assertTrue(q.list().size() == 0);
  q=s.createFilter(master.getDetails(),"where this.id in (:ids)");
  list=new ArrayList();
  list.add(did);
  list.add(new Long(-1));
  q.setParameterList("ids",list);
  assertTrue(q.list().size() == 1);
  assertTrue(q.iterate().hasNext());
  assertTrue(s.createFilter(master.getDetails(),"where this.id > -1").list().size() == 2);
  assertTrue(s.createFilter(master.getDetails(),"select this.master where this.id > -1").list().size() == 2);
  assertTrue(s.createFilter(master.getDetails(),"select m from Master m where this.id > -1 and this.master=m").list().size() == 2);
  assertTrue(s.createFilter(master.getIncoming(),"where this.id > -1 and this.name is not null").list().size() == 0);
  assertTrue(s.createFilter(master.getDetails(),"select max(this.i)").iterate().next() instanceof Integer);
  assertTrue(s.createFilter(master.getDetails(),"select max(this.i) group by this.id").iterate().next() instanceof Integer);
  assertTrue(s.createFilter(master.getDetails(),"select count(*)").iterate().next() instanceof Long);
  assertTrue(s.createFilter(master.getDetails(),"select this.master").list().size() == 2);
  assertTrue(s.createFilter(master.getMoreDetails(),"").list().size() == 0);
  assertTrue(s.createFilter(master.getIncoming(),"").list().size() == 0);
  Query f=s.createFilter(master.getDetails(),"select max(this.i) where this.i < :top and this.i>=:bottom");
  f.setInteger("top",100);
  f.setInteger("bottom",0);
  assertEquals(f.iterate().next(),new Integer(12));
  f.setInteger("top",2);
  assertEquals(f.iterate().next(),new Integer(0));
  f=s.createFilter(master.getDetails(),"select max(this.i) where this.i not in (:list)");
  Collection coll=new ArrayList();
  coll.add(new Integer(-666));
  coll.add(new Integer(22));
  coll.add(new Integer(0));
  f.setParameterList("list",coll);
  assertEquals(f.iterate().next(),new Integer(12));
  f=s.createFilter(master.getDetails(),"select max(this.i) where this.i not in (:list) and this.master.name = :listy2");
  f.setParameterList("list",coll);
  f.setParameter("listy2",master.getName());
  assertEquals(f.iterate().next(),new Integer(12));
  iter=master.getDetails().iterator();
  i=0;
  while (iter.hasNext()) {
    Detail d=(Detail)iter.next();
    assertTrue("master-detail",d.getMaster() == master);
    s.delete(d);
    i++;
  }
  assertTrue("master-detail",i == 2);
  s.delete(master);
  t.commit();
  s.close();
}
