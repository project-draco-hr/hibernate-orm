{
  final Class entityAttributeJavaType=attributeConverterDescriptor.getDomainType();
  final Class databaseColumnJavaType=attributeConverterDescriptor.getJdbcType();
  final JavaTypeDescriptor entityAttributeJavaTypeDescriptor=JavaTypeDescriptorRegistry.INSTANCE.getDescriptor(entityAttributeJavaType);
  int jdbcTypeCode=JdbcTypeJavaClassMappings.INSTANCE.determineJdbcTypeCodeForJavaClass(databaseColumnJavaType);
  if (isLob()) {
    if (LobTypeMappings.INSTANCE.hasCorrespondingLobCode(jdbcTypeCode)) {
      jdbcTypeCode=LobTypeMappings.INSTANCE.getCorrespondingLobCode(jdbcTypeCode);
    }
 else {
      if (Serializable.class.isAssignableFrom(entityAttributeJavaType)) {
        jdbcTypeCode=Types.BLOB;
      }
 else {
        throw new IllegalArgumentException(String.format(Locale.ROOT,"JDBC type-code [%s (%s)] not known to have a corresponding LOB equivalent, and Java type is not Serializable (to use BLOB)",jdbcTypeCode,JdbcTypeNameMapper.getTypeName(jdbcTypeCode)));
      }
    }
  }
  if (isNationalized()) {
    jdbcTypeCode=NationalizedTypeMappings.INSTANCE.getCorrespondingNationalizedCode(jdbcTypeCode);
  }
  final SqlTypeDescriptor sqlTypeDescriptor=SqlTypeDescriptorRegistry.INSTANCE.getDescriptor(jdbcTypeCode);
  final JavaTypeDescriptor intermediateJavaTypeDescriptor=JavaTypeDescriptorRegistry.INSTANCE.getDescriptor(databaseColumnJavaType);
  final SqlTypeDescriptor sqlTypeDescriptorAdapter=new AttributeConverterSqlTypeDescriptorAdapter(attributeConverterDescriptor.getAttributeConverter(),sqlTypeDescriptor,intermediateJavaTypeDescriptor);
  final String name=AttributeConverterTypeAdapter.NAME_PREFIX + attributeConverterDescriptor.getAttributeConverter().getClass().getName();
  final String description=String.format("BasicType adapter for AttributeConverter<%s,%s>",entityAttributeJavaType.getSimpleName(),databaseColumnJavaType.getSimpleName());
  return new AttributeConverterTypeAdapter(name,description,attributeConverterDescriptor.getAttributeConverter(),sqlTypeDescriptorAdapter,entityAttributeJavaType,databaseColumnJavaType,entityAttributeJavaTypeDescriptor);
}
