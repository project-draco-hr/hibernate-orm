{
  final Class entityAttributeJavaType=attributeConverterDefinition.getEntityAttributeType();
  final Class databaseColumnJavaType=attributeConverterDefinition.getDatabaseColumnType();
  final JavaTypeDescriptor entityAttributeJavaTypeDescriptor=JavaTypeDescriptorRegistry.INSTANCE.getDescriptor(entityAttributeJavaType);
  int jdbcTypeCode=JdbcTypeJavaClassMappings.INSTANCE.determineJdbcTypeCodeForJavaClass(databaseColumnJavaType);
  if (isNationalized()) {
    jdbcTypeCode=NationalizedTypeMappings.INSTANCE.getCorrespondingNationalizedCode(jdbcTypeCode);
  }
  final SqlTypeDescriptor sqlTypeDescriptor=SqlTypeDescriptorRegistry.INSTANCE.getDescriptor(jdbcTypeCode);
  final JavaTypeDescriptor intermediateJavaTypeDescriptor=JavaTypeDescriptorRegistry.INSTANCE.getDescriptor(databaseColumnJavaType);
  final SqlTypeDescriptor sqlTypeDescriptorAdapter=new AttributeConverterSqlTypeDescriptorAdapter(attributeConverterDefinition.getAttributeConverter(),sqlTypeDescriptor,intermediateJavaTypeDescriptor);
  final String name=AttributeConverterTypeAdapter.NAME_PREFIX + attributeConverterDefinition.getAttributeConverter().getClass().getName();
  final String description=String.format("BasicType adapter for AttributeConverter<%s,%s>",entityAttributeJavaType.getSimpleName(),databaseColumnJavaType.getSimpleName());
  return new AttributeConverterTypeAdapter(name,description,attributeConverterDefinition.getAttributeConverter(),sqlTypeDescriptorAdapter,entityAttributeJavaType,databaseColumnJavaType,entityAttributeJavaTypeDescriptor);
}
