{
  Container cOrig=createContainer();
  Set expectedInitializedObjects=new HashSet(Arrays.asList(new Object[]{cOrig,cOrig.getNoProxyInfo(),cOrig.getProxyInfo(),cOrig.getNonLazyInfo(),cOrig.getNoProxyOwner(),cOrig.getProxyOwner(),cOrig.getNonLazyOwner(),cOrig.getLazyDataPoints().iterator().next(),cOrig.getNonLazyJoinDataPoints().iterator().next(),cOrig.getNonLazySelectDataPoints().iterator().next()}));
  Set expectedReadOnlyObjects=new HashSet();
  Session s=openSession();
  assertFalse(s.isDefaultReadOnly());
  s.setCacheMode(CacheMode.IGNORE);
  Transaction t=s.beginTransaction();
  s.save(cOrig);
  checkContainer(cOrig,expectedInitializedObjects,expectedReadOnlyObjects,s);
  s.setDefaultReadOnly(true);
  assertTrue(s.isDefaultReadOnly());
  checkContainer(cOrig,expectedInitializedObjects,expectedReadOnlyObjects,s);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  assertFalse(s.isDefaultReadOnly());
  Container c=(Container)s.get(Container.class,cOrig.getId());
  assertNotSame(cOrig,c);
  expectedInitializedObjects=new HashSet(Arrays.asList(new Object[]{c,c.getNonLazyInfo(),c.getNoProxyOwner(),c.getProxyOwner(),c.getNonLazyOwner(),c.getNonLazyJoinDataPoints().iterator().next(),c.getNonLazySelectDataPoints().iterator().next()}));
  expectedReadOnlyObjects=new HashSet();
  List list=(List)s.createFilter(c.getLazyDataPoints(),"").setMaxResults(1).list();
  assertEquals(1,list.size());
  assertFalse(s.isReadOnly(list.get(0)));
  list=(List)s.createFilter(c.getNonLazyJoinDataPoints(),"").setMaxResults(1).list();
  assertEquals(1,list.size());
  assertFalse(s.isReadOnly(list.get(0)));
  list=(List)s.createFilter(c.getNonLazySelectDataPoints(),"").setMaxResults(1).list();
  assertEquals(1,list.size());
  assertFalse(s.isReadOnly(list.get(0)));
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  s.createQuery("delete from DataPoint").executeUpdate();
  s.createQuery("delete from Container").executeUpdate();
  s.createQuery("delete from Info").executeUpdate();
  s.createQuery("delete from Owner").executeUpdate();
  t.commit();
  s.close();
}
