{
  Session s=openSession();
  Transaction t=s.beginTransaction();
  Multi multi=new Multi();
  multi.setExtraProp("extra");
  multi.setName("name");
  Top simp=new Top();
  simp.setDate(new Date());
  simp.setName("simp");
  Serializable mid=s.save(multi);
  Serializable sid=s.save(simp);
  SubMulti sm=new SubMulti();
  sm.setAmount(66.5f);
  Serializable smid=s.save(sm);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  multi.setExtraProp(multi.getExtraProp() + "2");
  multi.setName("new name");
  s.update(multi,mid);
  simp.setName("new name");
  s.update(simp,sid);
  sm.setAmount(456.7f);
  s.update(sm,smid);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  multi=(Multi)s.load(Multi.class,mid);
  assertTrue(multi.getExtraProp().equals("extra2"));
  multi.setExtraProp(multi.getExtraProp() + "3");
  assertTrue(multi.getName().equals("new name"));
  multi.setName("newer name");
  sm=(SubMulti)s.load(SubMulti.class,smid);
  assertTrue(sm.getAmount() == 456.7f);
  sm.setAmount(23423f);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  multi=(Multi)s.load(Top.class,mid);
  simp=(Top)s.load(Top.class,sid);
  assertTrue(!(simp instanceof Multi));
  assertTrue(multi.getExtraProp().equals("extra23"));
  assertTrue(multi.getName().equals("newer name"));
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  Iterator iter=s.iterate("select\n\nt from Top t where t.count>0");
  boolean foundSimp=false;
  boolean foundMulti=false;
  boolean foundSubMulti=false;
  while (iter.hasNext()) {
    Object o=iter.next();
    if ((o instanceof Top) && !(o instanceof Multi))     foundSimp=true;
    if (o instanceof Multi && !(o instanceof SubMulti))     foundMulti=true;
    if (o instanceof SubMulti)     foundSubMulti=true;
  }
  assertTrue(foundSimp && foundMulti && foundSubMulti);
  s.find("from Multi m where m.count>0 and m.extraProp is not null");
  s.find("from Top m where m.count>0 and m.name is not null");
  s.find("from Lower m where m.other is not null");
  s.find("from Multi m where m.other.id = 1");
  s.find("from SubMulti m where m.amount > 0.0");
  assertTrue(s.find("from Multi").size() == 2);
  assertTrue(s.find("from Multi m where m.class = SubMulti").size() == 1);
  assertTrue(s.find("from Top m where m.class = Multi").size() == 1);
  assertTrue(s.find("from Top").size() == 3);
  assertTrue(s.find("from Lower").size() == 0);
  assertTrue(s.find("from SubMulti").size() == 1);
  s.find("from Lower ls join ls.bag s where s.id is not null");
  s.find("from Lower ls join ls.set s where s.id is not null");
  if (!(getDialect() instanceof MySQLDialect))   s.find("from SubMulti sm where exists elements(sm.children)");
  List l=s.createCriteria(Top.class).list();
  assertTrue(l.size() == 3);
  assertTrue(s.createCriteria(SubMulti.class).list().size() == 1);
  assertTrue(s.createCriteria(SubMulti.class).add(Restrictions.lt("amount",new Float(0))).list().size() == 0);
  assertTrue(s.createCriteria(SubMulti.class).add(Restrictions.ge("amount",new Float(0))).list().size() == 1);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  multi=(Multi)s.load(Top.class,mid,LockMode.UPGRADE);
  simp=(Top)s.load(Top.class,sid);
  s.lock(simp,LockMode.UPGRADE_NOWAIT);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  s.update(multi,mid);
  s.delete(multi);
  assertTrue(s.delete("from Top") == 2);
  t.commit();
  s.close();
}
