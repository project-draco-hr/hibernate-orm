{
  clearCounts();
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();
  Session s=openSession();
  Employer emp=new Employer();
  s.persist(emp);
  Node node=new Node("foo");
  Node parent=new Node("bar");
  parent.addChild(node);
  s.persist(parent);
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit();
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();
  s=openSession();
  emp=(Employer)s.get(Employer.class,emp.getId());
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  emp=(Employer)getOldToNewEntityRefMap().get(emp);
  assertTrue(Hibernate.isInitialized(emp));
  assertFalse(Hibernate.isInitialized(emp.getEmployees()));
  node=(Node)s.get(Node.class,node.getName());
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  node=(Node)getOldToNewEntityRefMap().get(node);
  emp=(Employer)getOldToNewEntityRefMap().get(emp);
  assertTrue(Hibernate.isInitialized(node));
  assertFalse(Hibernate.isInitialized(node.getChildren()));
  assertFalse(Hibernate.isInitialized(node.getParent()));
  assertNull(s.get(Node.class,"xyz"));
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit();
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();
  s=openSession();
  emp=(Employer)s.load(Employer.class,emp.getId());
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  emp=(Employer)getOldToNewEntityRefMap().get(emp);
  emp.getId();
  assertFalse(Hibernate.isInitialized(emp));
  node=(Node)s.load(Node.class,node.getName());
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  node=(Node)getOldToNewEntityRefMap().get(node);
  assertEquals(node.getName(),"foo");
  assertFalse(Hibernate.isInitialized(node));
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit();
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();
  s=openSession();
  emp=(Employer)s.get("org.hibernate.test.nonflushedchanges.Employer",emp.getId());
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  emp=(Employer)getOldToNewEntityRefMap().get(emp);
  assertTrue(Hibernate.isInitialized(emp));
  node=(Node)s.get("org.hibernate.test.nonflushedchanges.Node",node.getName());
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  node=(Node)getOldToNewEntityRefMap().get(node);
  assertTrue(Hibernate.isInitialized(node));
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit();
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();
  s=openSession();
  emp=(Employer)s.load("org.hibernate.test.nonflushedchanges.Employer",emp.getId());
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  emp=(Employer)getOldToNewEntityRefMap().get(emp);
  emp.getId();
  assertFalse(Hibernate.isInitialized(emp));
  node=(Node)s.load("org.hibernate.test.nonflushedchanges.Node",node.getName());
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  emp=(Employer)getOldToNewEntityRefMap().get(emp);
  node=(Node)getOldToNewEntityRefMap().get(node);
  assertEquals(node.getName(),"foo");
  assertFalse(Hibernate.isInitialized(node));
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit();
  assertFetchCount(0);
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin();
  s=openSession();
  s.createQuery("delete from Employer").executeUpdate();
  List list=s.createQuery("from Node").list();
  for (  Object aList : list) {
    s.delete(aList);
  }
  TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit();
}
