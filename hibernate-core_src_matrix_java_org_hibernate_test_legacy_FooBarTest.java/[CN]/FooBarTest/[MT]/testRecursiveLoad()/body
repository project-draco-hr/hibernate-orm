{
  Session s=openSession();
  Transaction txn=s.beginTransaction();
  GlarchProxy last=new Glarch();
  s.save(last);
  last.setOrder((short)0);
  for (int i=0; i < 5; i++) {
    GlarchProxy next=new Glarch();
    s.save(next);
    last.setNext(next);
    last=next;
    last.setOrder((short)(i + 1));
  }
  Iterator iter=s.createQuery("from Glarch g").iterate();
  while (iter.hasNext()) {
    iter.next();
  }
  List list=s.createQuery("from Glarch g").list();
  assertTrue("recursive find",list.size() == 6);
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  list=s.createQuery("from Glarch g").list();
  assertTrue("recursive iter",list.size() == 6);
  list=s.createQuery("from Glarch g where g.next is not null").list();
  assertTrue("recursive iter",list.size() == 5);
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  iter=s.createQuery("from Glarch g order by g.order asc").iterate();
  while (iter.hasNext()) {
    GlarchProxy g=(GlarchProxy)iter.next();
    assertTrue("not null",g != null);
    iter.remove();
  }
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  FooProxy flast=new Bar();
  s.save(flast);
  flast.setString("foo0");
  for (int i=0; i < 5; i++) {
    FooProxy foo=new Bar();
    s.save(foo);
    flast.setFoo(foo);
    flast=flast.getFoo();
    flast.setString("foo" + (i + 1));
  }
  iter=s.createQuery("from Foo foo").iterate();
  while (iter.hasNext()) {
    iter.next();
  }
  list=s.createQuery("from Foo foo").list();
  assertTrue("recursive find",list.size() == 6);
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  list=s.createQuery("from Foo foo").list();
  assertTrue("recursive iter",list.size() == 6);
  iter=list.iterator();
  while (iter.hasNext()) {
    assertTrue("polymorphic recursive load",iter.next() instanceof BarProxy);
  }
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  iter=s.createQuery("from Foo foo order by foo.string asc").iterate();
  while (iter.hasNext()) {
    BarProxy bar=(BarProxy)iter.next();
    assertTrue("not null",bar != null);
    iter.remove();
  }
  txn.commit();
  s.close();
}
