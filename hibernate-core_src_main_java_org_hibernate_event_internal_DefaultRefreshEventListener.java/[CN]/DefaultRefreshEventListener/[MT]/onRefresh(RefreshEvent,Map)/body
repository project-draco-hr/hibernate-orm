{
  final EventSource source=event.getSession();
  boolean isTransient=!source.contains(event.getObject());
  if (source.getPersistenceContext().reassociateIfUninitializedProxy(event.getObject())) {
    if (isTransient) {
      source.setReadOnly(event.getObject(),source.isDefaultReadOnly());
    }
    return;
  }
  final Object object=source.getPersistenceContext().unproxyAndReassociate(event.getObject());
  if (refreshedAlready.containsKey(object)) {
    LOG.trace("Already refreshed");
    return;
  }
  final EntityEntry e=source.getPersistenceContext().getEntry(object);
  final EntityPersister persister;
  final Serializable id;
  if (e == null) {
    persister=source.getEntityPersister(null,object);
    id=persister.getIdentifier(object,event.getSession());
    if (LOG.isTraceEnabled())     LOG.trace("Refreshing transient " + MessageHelper.infoString(persister,id,source.getFactory()));
    final EntityKey key=source.generateEntityKey(id,persister);
    if (source.getPersistenceContext().getEntry(key) != null) {
      throw new PersistentObjectException("attempted to refresh transient instance when persistent instance was already associated with the Session: " + MessageHelper.infoString(persister,id,source.getFactory()));
    }
  }
 else {
    if (LOG.isTraceEnabled())     LOG.trace("Refreshing " + MessageHelper.infoString(e.getPersister(),e.getId(),source.getFactory()));
    if (!e.isExistsInDatabase()) {
      throw new HibernateException("this instance does not yet exist as a row in the database");
    }
    persister=e.getPersister();
    id=e.getId();
  }
  refreshedAlready.put(object,object);
  new Cascade(CascadingAction.REFRESH,Cascade.BEFORE_REFRESH,source).cascade(persister,object,refreshedAlready);
  if (e != null) {
    final EntityKey key=source.generateEntityKey(id,persister);
    source.getPersistenceContext().removeEntity(key);
    if (persister.hasCollections())     new EvictVisitor(source).process(object,persister);
  }
  if (persister.hasCache()) {
    final CacheKey ck=source.generateCacheKey(id,persister.getIdentifierType(),persister.getRootEntityName());
    persister.getCacheAccessStrategy().evict(ck);
  }
  evictCachedCollections(persister,id,source.getFactory());
  String previousFetchProfile=source.getFetchProfile();
  source.setFetchProfile("refresh");
  Object result=persister.load(id,object,event.getLockOptions(),source);
  if (result != null) {
    if (!persister.isMutable()) {
      source.setReadOnly(result,true);
    }
 else {
      source.setReadOnly(result,(e == null ? source.isDefaultReadOnly() : e.isReadOnly()));
    }
  }
  source.setFetchProfile(previousFetchProfile);
  UnresolvableObjectException.throwIfNull(result,id,persister.getEntityName());
}
