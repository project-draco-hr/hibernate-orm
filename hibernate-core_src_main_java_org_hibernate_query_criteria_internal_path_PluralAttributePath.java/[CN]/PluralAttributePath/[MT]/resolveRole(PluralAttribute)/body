{
switch (attribute.getDeclaringType().getPersistenceType()) {
case ENTITY:
{
      return attribute.getDeclaringType().getJavaType().getName() + '.' + attribute.getName();
    }
case MAPPED_SUPERCLASS:
{
    if (getPathSource().getModel().getBindableType() == Bindable.BindableType.ENTITY_TYPE) {
      final EntityType entityTypeNearestDeclaringType=locateNearestSubclassEntity((MappedSuperclassType)attribute.getDeclaringType(),(EntityType)getPathSource().getModel());
      return entityTypeNearestDeclaringType.getJavaType().getName() + '.' + attribute.getName();
    }
 else {
      throw new AssertionFailure(String.format("Unexpected BindableType; expected [%s]; instead got [%s]",Bindable.BindableType.ENTITY_TYPE,getPathSource().getModel().getBindableType()));
    }
  }
case EMBEDDABLE:
{
  StringBuilder role=new StringBuilder().append('.').append(attribute.getName());
  PathSource parentPath=getPathSource();
  SingularAttribute singularAttribute;
  do {
    final SingularAttributePath singularAttributePath=(SingularAttributePath)parentPath;
    singularAttribute=singularAttributePath.getAttribute();
    role.insert(0,'.');
    role.insert(1,singularAttributePath.getAttribute().getName());
    parentPath=singularAttributePath.getPathSource();
  }
 while ((SingularAttributePath.class.isInstance(parentPath)));
  final EntityType entityType;
  if (singularAttribute.getDeclaringType().getPersistenceType() == Type.PersistenceType.ENTITY) {
    entityType=(EntityType)singularAttribute.getDeclaringType();
  }
 else   if (singularAttribute.getDeclaringType().getPersistenceType() == Type.PersistenceType.MAPPED_SUPERCLASS) {
    entityType=locateNearestSubclassEntity((MappedSuperclassType)singularAttribute.getDeclaringType(),(EntityType)parentPath.getModel());
  }
 else {
    throw new AssertionFailure(String.format("Unexpected PersistenceType: [%s]",singularAttribute.getDeclaringType().getPersistenceType()));
  }
  return role.insert(0,entityType.getJavaType().getName()).toString();
}
default :
throw new AssertionFailure(String.format("Unexpected PersistenceType: [%s]",attribute.getDeclaringType().getPersistenceType()));
}
}
