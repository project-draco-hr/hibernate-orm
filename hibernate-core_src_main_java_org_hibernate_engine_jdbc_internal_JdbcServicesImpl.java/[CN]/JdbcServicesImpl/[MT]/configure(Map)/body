{
  final JdbcConnectionAccess jdbcConnectionAccess=buildJdbcConnectionAccess(configValues);
  final DialectFactory dialectFactory=serviceRegistry.getService(DialectFactory.class);
  Dialect dialect=null;
  LobCreatorBuilder lobCreatorBuilder=null;
  boolean metaSupportsScrollable=false;
  boolean metaSupportsGetGeneratedKeys=false;
  boolean metaSupportsBatchUpdates=false;
  boolean metaReportsDDLCausesTxnCommit=false;
  boolean metaReportsDDLInTxnSupported=true;
  String extraKeywordsString="";
  int sqlStateType=-1;
  boolean lobLocatorUpdateCopy=false;
  String catalogName=null;
  String schemaName=null;
  LinkedHashSet<TypeInfo> typeInfoSet=new LinkedHashSet<TypeInfo>();
  boolean useJdbcMetadata=ConfigurationHelper.getBoolean("hibernate.temp.use_jdbc_metadata_defaults",configValues,true);
  if (useJdbcMetadata) {
    try {
      Connection connection=jdbcConnectionAccess.obtainConnection();
      try {
        DatabaseMetaData meta=connection.getMetaData();
        if (LOG.isDebugEnabled()) {
          LOG.debugf("Database ->\n" + "       name : %s\n" + "    version : %s\n"+ "      major : %s\n"+ "      minor : %s",meta.getDatabaseProductName(),meta.getDatabaseProductVersion(),meta.getDatabaseMajorVersion(),meta.getDatabaseMinorVersion());
          LOG.debugf("Driver ->\n" + "       name : %s\n" + "    version : %s\n"+ "      major : %s\n"+ "      minor : %s",meta.getDriverName(),meta.getDriverVersion(),meta.getDriverMajorVersion(),meta.getDriverMinorVersion());
          LOG.debugf("JDBC version : %s.%s",meta.getJDBCMajorVersion(),meta.getJDBCMinorVersion());
        }
        metaSupportsScrollable=meta.supportsResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE);
        metaSupportsBatchUpdates=meta.supportsBatchUpdates();
        metaReportsDDLCausesTxnCommit=meta.dataDefinitionCausesTransactionCommit();
        metaReportsDDLInTxnSupported=!meta.dataDefinitionIgnoredInTransactions();
        metaSupportsGetGeneratedKeys=meta.supportsGetGeneratedKeys();
        extraKeywordsString=meta.getSQLKeywords();
        sqlStateType=meta.getSQLStateType();
        lobLocatorUpdateCopy=meta.locatorsUpdateCopy();
        typeInfoSet.addAll(TypeInfoExtracter.extractTypeInfo(meta));
        dialect=dialectFactory.buildDialect(configValues,connection);
        catalogName=connection.getCatalog();
        SchemaNameResolver schemaNameResolver=determineExplicitSchemaNameResolver(configValues);
        if (schemaNameResolver == null) {
        }
        if (schemaNameResolver != null) {
          schemaName=schemaNameResolver.resolveSchemaName(connection);
        }
        lobCreatorBuilder=new LobCreatorBuilder(configValues,connection);
      }
 catch (      SQLException sqle) {
        LOG.unableToObtainConnectionMetadata(sqle.getMessage());
      }
 finally {
        if (connection != null) {
          jdbcConnectionAccess.releaseConnection(connection);
        }
      }
    }
 catch (    SQLException sqle) {
      LOG.unableToObtainConnectionToQueryMetadata(sqle.getMessage());
      dialect=dialectFactory.buildDialect(configValues,null);
    }
catch (    UnsupportedOperationException uoe) {
      dialect=dialectFactory.buildDialect(configValues,null);
    }
  }
 else {
    dialect=dialectFactory.buildDialect(configValues,null);
  }
  final boolean showSQL=ConfigurationHelper.getBoolean(Environment.SHOW_SQL,configValues,false);
  final boolean formatSQL=ConfigurationHelper.getBoolean(Environment.FORMAT_SQL,configValues,false);
  this.dialect=dialect;
  this.lobCreatorBuilder=(lobCreatorBuilder == null ? new LobCreatorBuilder(configValues,null) : lobCreatorBuilder);
  this.sqlStatementLogger=new SqlStatementLogger(showSQL,formatSQL);
  this.extractedMetaDataSupport=new ExtractedDatabaseMetaDataImpl(metaSupportsScrollable,metaSupportsGetGeneratedKeys,metaSupportsBatchUpdates,metaReportsDDLInTxnSupported,metaReportsDDLCausesTxnCommit,parseKeywords(extraKeywordsString),parseSQLStateType(sqlStateType),lobLocatorUpdateCopy,schemaName,catalogName,typeInfoSet);
  SQLExceptionConverter sqlExceptionConverter=dialect.buildSQLExceptionConverter();
  if (sqlExceptionConverter == null) {
    final Dialect finalDialect=dialect;
    final ConversionContext conversionContext=new ConversionContext(){
      private final ViolatedConstraintNameExtracter extracter=finalDialect.getViolatedConstraintNameExtracter();
      @Override public ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter(){
        return extracter;
      }
    }
;
    final StandardSQLExceptionConverter converter=new StandardSQLExceptionConverter();
    sqlExceptionConverter=converter;
    converter.addDelegate(new SQLExceptionTypeDelegate(conversionContext));
    converter.addDelegate(new SQLStateConversionDelegate(conversionContext));
  }
  this.sqlExceptionHelper=new SqlExceptionHelper(sqlExceptionConverter);
}
