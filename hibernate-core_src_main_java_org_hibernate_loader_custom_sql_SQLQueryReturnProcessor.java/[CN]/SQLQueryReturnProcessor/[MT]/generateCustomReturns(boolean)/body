{
  List<Return> customReturns=new ArrayList<Return>();
  Map<String,Return> customReturnsByAlias=new HashMap<String,Return>();
  for (  NativeSQLQueryReturn queryReturn : queryReturns) {
    if (queryReturn instanceof NativeSQLQueryScalarReturn) {
      NativeSQLQueryScalarReturn rtn=(NativeSQLQueryScalarReturn)queryReturn;
      customReturns.add(new ScalarReturn(rtn.getType(),rtn.getColumnAlias()));
    }
 else     if (queryReturn instanceof NativeSQLQueryRootReturn) {
      NativeSQLQueryRootReturn rtn=(NativeSQLQueryRootReturn)queryReturn;
      String alias=rtn.getAlias();
      EntityAliases entityAliases;
      if (queryHadAliases || hasPropertyResultMap(alias)) {
        entityAliases=new DefaultEntityAliases((Map)entityPropertyResultMaps.get(alias),(SQLLoadable)alias2Persister.get(alias),(String)alias2Suffix.get(alias));
      }
 else {
        entityAliases=new ColumnEntityAliases((Map)entityPropertyResultMaps.get(alias),(SQLLoadable)alias2Persister.get(alias),(String)alias2Suffix.get(alias));
      }
      RootReturn customReturn=new RootReturn(alias,rtn.getReturnEntityName(),entityAliases,rtn.getLockMode());
      customReturns.add(customReturn);
      customReturnsByAlias.put(rtn.getAlias(),customReturn);
    }
 else     if (queryReturn instanceof NativeSQLQueryCollectionReturn) {
      NativeSQLQueryCollectionReturn rtn=(NativeSQLQueryCollectionReturn)queryReturn;
      String alias=rtn.getAlias();
      SQLLoadableCollection persister=(SQLLoadableCollection)alias2CollectionPersister.get(alias);
      boolean isEntityElements=persister.getElementType().isEntityType();
      CollectionAliases collectionAliases;
      EntityAliases elementEntityAliases=null;
      if (queryHadAliases || hasPropertyResultMap(alias)) {
        collectionAliases=new GeneratedCollectionAliases((Map)collectionPropertyResultMaps.get(alias),(SQLLoadableCollection)alias2CollectionPersister.get(alias),(String)alias2CollectionSuffix.get(alias));
        if (isEntityElements) {
          elementEntityAliases=new DefaultEntityAliases((Map)entityPropertyResultMaps.get(alias),(SQLLoadable)alias2Persister.get(alias),(String)alias2Suffix.get(alias));
        }
      }
 else {
        collectionAliases=new ColumnCollectionAliases((Map)collectionPropertyResultMaps.get(alias),(SQLLoadableCollection)alias2CollectionPersister.get(alias));
        if (isEntityElements) {
          elementEntityAliases=new ColumnEntityAliases((Map)entityPropertyResultMaps.get(alias),(SQLLoadable)alias2Persister.get(alias),(String)alias2Suffix.get(alias));
        }
      }
      CollectionReturn customReturn=new CollectionReturn(alias,rtn.getOwnerEntityName(),rtn.getOwnerProperty(),collectionAliases,elementEntityAliases,rtn.getLockMode());
      customReturns.add(customReturn);
      customReturnsByAlias.put(rtn.getAlias(),customReturn);
    }
 else     if (queryReturn instanceof NativeSQLQueryJoinReturn) {
      NativeSQLQueryJoinReturn rtn=(NativeSQLQueryJoinReturn)queryReturn;
      String alias=rtn.getAlias();
      FetchReturn customReturn;
      NonScalarReturn ownerCustomReturn=(NonScalarReturn)customReturnsByAlias.get(rtn.getOwnerAlias());
      if (alias2CollectionPersister.containsKey(alias)) {
        SQLLoadableCollection persister=(SQLLoadableCollection)alias2CollectionPersister.get(alias);
        boolean isEntityElements=persister.getElementType().isEntityType();
        CollectionAliases collectionAliases;
        EntityAliases elementEntityAliases=null;
        if (queryHadAliases || hasPropertyResultMap(alias)) {
          collectionAliases=new GeneratedCollectionAliases((Map)collectionPropertyResultMaps.get(alias),persister,(String)alias2CollectionSuffix.get(alias));
          if (isEntityElements) {
            elementEntityAliases=new DefaultEntityAliases((Map)entityPropertyResultMaps.get(alias),(SQLLoadable)alias2Persister.get(alias),(String)alias2Suffix.get(alias));
          }
        }
 else {
          collectionAliases=new ColumnCollectionAliases((Map)collectionPropertyResultMaps.get(alias),persister);
          if (isEntityElements) {
            elementEntityAliases=new ColumnEntityAliases((Map)entityPropertyResultMaps.get(alias),(SQLLoadable)alias2Persister.get(alias),(String)alias2Suffix.get(alias));
          }
        }
        customReturn=new CollectionFetchReturn(alias,ownerCustomReturn,rtn.getOwnerProperty(),collectionAliases,elementEntityAliases,rtn.getLockMode());
      }
 else {
        EntityAliases entityAliases;
        if (queryHadAliases || hasPropertyResultMap(alias)) {
          entityAliases=new DefaultEntityAliases((Map)entityPropertyResultMaps.get(alias),(SQLLoadable)alias2Persister.get(alias),(String)alias2Suffix.get(alias));
        }
 else {
          entityAliases=new ColumnEntityAliases((Map)entityPropertyResultMaps.get(alias),(SQLLoadable)alias2Persister.get(alias),(String)alias2Suffix.get(alias));
        }
        customReturn=new EntityFetchReturn(alias,entityAliases,ownerCustomReturn,rtn.getOwnerProperty(),rtn.getLockMode());
      }
      customReturns.add(customReturn);
      customReturnsByAlias.put(alias,customReturn);
    }
  }
  return customReturns;
}
