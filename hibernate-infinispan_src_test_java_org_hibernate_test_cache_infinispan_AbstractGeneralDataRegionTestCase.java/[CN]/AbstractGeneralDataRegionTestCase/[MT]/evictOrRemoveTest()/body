{
  final StandardServiceRegistryBuilder ssrb=createStandardServiceRegistryBuilder();
  StandardServiceRegistry registry1=ssrb.build();
  StandardServiceRegistry registry2=ssrb.build();
  try {
    InfinispanRegionFactory regionFactory=CacheTestUtil.startRegionFactory(registry1,getCacheTestSupport());
    final Properties properties=CacheTestUtil.toProperties(ssrb.getSettings());
    boolean invalidation=false;
    avoidConcurrentFlush();
    final GeneralDataRegion localRegion=(GeneralDataRegion)createRegion(regionFactory,getStandardRegionName(REGION_PREFIX),properties,null);
    regionFactory=CacheTestUtil.startRegionFactory(registry2,getCacheTestSupport());
    final GeneralDataRegion remoteRegion=(GeneralDataRegion)createRegion(regionFactory,getStandardRegionName(REGION_PREFIX),properties,null);
    assertNull("local is clean",localRegion.get(null,KEY));
    assertNull("remote is clean",remoteRegion.get(null,KEY));
    regionPut(localRegion);
    Callable<Object> getFromLocalRegion=new Callable<Object>(){
      @Override public Object call() throws Exception {
        return localRegion.get(null,KEY);
      }
    }
;
    Callable<Object> getFromRemoteRegion=new Callable<Object>(){
      @Override public Object call() throws Exception {
        return remoteRegion.get(null,KEY);
      }
    }
;
    assertEqualsEventually(VALUE1,getFromLocalRegion,10,TimeUnit.SECONDS);
    Object expected=invalidation ? null : VALUE1;
    assertEqualsEventually(expected,getFromRemoteRegion,10,TimeUnit.SECONDS);
    regionEvict(localRegion);
    assertEqualsEventually(null,getFromLocalRegion,10,TimeUnit.SECONDS);
    assertEqualsEventually(null,getFromRemoteRegion,10,TimeUnit.SECONDS);
  }
  finally {
    StandardServiceRegistryBuilder.destroy(registry1);
    StandardServiceRegistryBuilder.destroy(registry2);
  }
}
