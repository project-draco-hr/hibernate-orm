{
  secondPassCompile();
  String defaultCatalog=properties.getProperty(Environment.DEFAULT_CATALOG);
  String defaultSchema=properties.getProperty(Environment.DEFAULT_SCHEMA);
  ArrayList<String> script=new ArrayList<String>(50);
{
    ListIterator itr=auxiliaryDatabaseObjects.listIterator(auxiliaryDatabaseObjects.size());
    while (itr.hasPrevious()) {
      AuxiliaryDatabaseObject object=(AuxiliaryDatabaseObject)itr.previous();
      if (object.appliesToDialect(dialect)) {
        script.add(object.sqlDropString(dialect,defaultCatalog,defaultSchema));
      }
    }
  }
  if (dialect.dropConstraints()) {
    Iterator itr=getTableMappings();
    while (itr.hasNext()) {
      Table table=(Table)itr.next();
      if (table.isPhysicalTable()) {
        Iterator subItr=table.getForeignKeyIterator();
        while (subItr.hasNext()) {
          ForeignKey fk=(ForeignKey)subItr.next();
          if (fk.isPhysicalConstraint()) {
            script.add(fk.sqlDropString(dialect,defaultCatalog,defaultSchema));
          }
        }
      }
    }
  }
  Iterator itr=getTableMappings();
  while (itr.hasNext()) {
    Table table=(Table)itr.next();
    if (table.isPhysicalTable()) {
      script.add(table.sqlDropString(dialect,defaultCatalog,defaultSchema));
    }
  }
  itr=iterateGenerators(dialect);
  while (itr.hasNext()) {
    String[] lines=((PersistentIdentifierGenerator)itr.next()).sqlDropStrings(dialect);
    script.addAll(Arrays.asList(lines));
  }
  return ArrayHelper.toStringArray(script);
}
