{
  final TypeContributions typeContributions=new TypeContributions(){
    @Override public void contributeType(    BasicType type){
      typeResolver.registerTypeOverride(type);
    }
    @Override public void contributeType(    UserType type,    String[] keys){
      typeResolver.registerTypeOverride(type,keys);
    }
    @Override public void contributeType(    CompositeUserType type,    String[] keys){
      typeResolver.registerTypeOverride(type,keys);
    }
  }
;
  final Dialect dialect=serviceRegistry.getService(JdbcServices.class).getDialect();
  dialect.contributeTypes(typeContributions,serviceRegistry);
  ClassLoaderService classLoaderService=serviceRegistry.getService(ClassLoaderService.class);
  for (  TypeContributor contributor : classLoaderService.loadJavaServices(TypeContributor.class)) {
    contributor.contribute(typeContributions,serviceRegistry);
  }
  for (  TypeContributor contributor : typeContributorRegistrations) {
    contributor.contribute(typeContributions,serviceRegistry);
  }
}
