{
  final Attribute resourceAttribute=mappingElement.attribute("resource");
  final Attribute fileAttribute=mappingElement.attribute("file");
  final Attribute jarAttribute=mappingElement.attribute("jar");
  final Attribute packageAttribute=mappingElement.attribute("package");
  final Attribute classAttribute=mappingElement.attribute("class");
  if (resourceAttribute != null) {
    final String resourceName=resourceAttribute.getValue();
    log.debug("session-factory config [{}] named resource [{}] for mapping",name,resourceName);
    addResource(resourceName);
  }
 else   if (fileAttribute != null) {
    final String fileName=fileAttribute.getValue();
    log.debug("session-factory config [{}] named file [{}] for mapping",name,fileName);
    addFile(fileName);
  }
 else   if (jarAttribute != null) {
    final String jarFileName=jarAttribute.getValue();
    log.debug("session-factory config [{}] named jar file [{}] for mapping",name,jarFileName);
    addJar(new File(jarFileName));
  }
 else   if (packageAttribute != null) {
    final String packageName=packageAttribute.getValue();
    log.debug("session-factory config [{}] named package [{}] for mapping",name,packageName);
    addPackage(packageName);
  }
 else   if (classAttribute != null) {
    final String className=classAttribute.getValue();
    log.debug("session-factory config [{}] named class [{}] for mapping",name,className);
    try {
      addAnnotatedClass(ReflectHelper.classForName(className));
    }
 catch (    Exception e) {
      throw new MappingException("Unable to load class [ " + className + "] declared in Hibernate configuration <mapping/> entry",e);
    }
  }
 else {
    throw new MappingException("<mapping> element in configuration specifies no known attributes");
  }
}
