{
  LOG.trace("Starting secondPassCompile() processing");
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(ClassLoaderHelper.getContextClassLoader());
{
    if (!isDefaultProcessed) {
      Map defaults=reflectionManager.getDefaults();
      final Object isDelimited=defaults.get("delimited-identifier");
      if (isDelimited != null && isDelimited == Boolean.TRUE) {
        getProperties().put(Environment.GLOBALLY_QUOTED_IDENTIFIERS,"true");
      }
      final String schema=(String)defaults.get("schema");
      if (StringHelper.isNotEmpty(schema)) {
        getProperties().put(Environment.DEFAULT_SCHEMA,schema);
      }
      final String catalog=(String)defaults.get("catalog");
      if (StringHelper.isNotEmpty(catalog)) {
        getProperties().put(Environment.DEFAULT_CATALOG,catalog);
      }
      AnnotationBinder.bindDefaults(createMappings());
      isDefaultProcessed=true;
    }
  }
{
    metadataSourceQueue.syncAnnotatedClasses();
    metadataSourceQueue.processMetadata(determineMetadataSourcePrecedence());
  }
  try {
    inSecondPass=true;
    processSecondPassesOfType(PkDrivenByDefaultMapsIdSecondPass.class);
    processSecondPassesOfType(SetSimpleValueTypeSecondPass.class);
    processSecondPassesOfType(CopyIdentifierComponentSecondPass.class);
    processFkSecondPassInOrder();
    processSecondPassesOfType(CreateKeySecondPass.class);
    processSecondPassesOfType(SecondaryTableSecondPass.class);
    originalSecondPassCompile();
    inSecondPass=false;
  }
 catch (  RecoverableException e) {
    throw (RuntimeException)e.getCause();
  }
{
    for (    CacheHolder holder : caches) {
      if (holder.isClass) {
        applyCacheConcurrencyStrategy(holder);
      }
 else {
        applyCollectionCacheConcurrencyStrategy(holder);
      }
    }
    caches.clear();
  }
  for (  Map.Entry<Table,List<UniqueConstraintHolder>> tableListEntry : uniqueConstraintHoldersByTable.entrySet()) {
    final Table table=tableListEntry.getKey();
    final List<UniqueConstraintHolder> uniqueConstraints=tableListEntry.getValue();
    for (    UniqueConstraintHolder holder : uniqueConstraints) {
      final String keyName=StringHelper.isEmpty(holder.getName()) ? StringHelper.randomFixedLengthHex("UK_") : holder.getName();
      buildUniqueKeyFromColumnNames(table,keyName,holder.getColumns());
    }
  }
  for (  Table table : jpaIndexHoldersByTable.keySet()) {
    final List<JPAIndexHolder> jpaIndexHolders=jpaIndexHoldersByTable.get(table);
    int uniqueIndexPerTable=0;
    for (    JPAIndexHolder holder : jpaIndexHolders) {
      uniqueIndexPerTable++;
      final String keyName=StringHelper.isEmpty(holder.getName()) ? "idx_" + table.getName() + "_"+ uniqueIndexPerTable : holder.getName();
      buildUniqueKeyFromColumnNames(table,keyName,holder.getColumns(),holder.getOrdering(),holder.isUnique());
    }
  }
  Thread.currentThread().setContextClassLoader(tccl);
}
