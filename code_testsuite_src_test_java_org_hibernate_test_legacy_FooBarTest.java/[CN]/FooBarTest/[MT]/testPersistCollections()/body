{
  Session s=openSession();
  Transaction txn=s.beginTransaction();
  assertTrue(((Long)s.iterate("select count(*) from Bar").next()).longValue() == 0);
  assertTrue(s.iterate("select count(*) from Bar b").next().equals(new Long(0)));
  assertFalse(s.iterate("from Glarch g").hasNext());
  Baz baz=new Baz();
  s.save(baz);
  baz.setDefaults();
  baz.setStringArray(new String[]{"stuff"});
  Set bars=new HashSet();
  bars.add(new Bar());
  baz.setCascadingBars(bars);
  HashMap sgm=new HashMap();
  sgm.put("a",new Glarch());
  sgm.put("b",new Glarch());
  baz.setStringGlarchMap(sgm);
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  assertTrue(((Long)s.iterate("select count(*) from Bar").next()).longValue() == 1);
  baz=(Baz)((Object[])s.find("select baz, baz from Baz baz").get(0))[1];
  assertTrue(baz.getCascadingBars().size() == 1);
  Foo foo=new Foo();
  s.save(foo);
  Foo foo2=new Foo();
  s.save(foo2);
  baz.setFooArray(new Foo[]{foo,foo,null,foo2});
  baz.getFooSet().add(foo);
  baz.getCustoms().add(new String[]{"new","custom"});
  baz.setStringArray(null);
  baz.getStringList().set(0,"new value");
  baz.setStringSet(new TreeSet());
  Time time=new java.sql.Time(12345);
  baz.getTimeArray()[2]=time;
  assertTrue(baz.getStringGlarchMap().size() == 1);
  if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof PointbaseDialect)) {
    List list=s.find("select foo from Foo foo, Baz baz where foo in elements(baz.fooArray) and 3 = some elements(baz.intArray) and 4 > all indices(baz.intArray)");
    assertTrue("collection.elements find",list.size() == 2);
  }
  if (!(getDialect() instanceof SAPDBDialect)) {
    List list=s.find("select distinct foo from Baz baz join baz.fooArray foo");
    assertTrue("collection.elements find",list.size() == 2);
  }
  List list=s.find("select foo from Baz baz join baz.fooSet foo");
  assertTrue("association.elements find",list.size() == 1);
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  assertTrue(((Long)s.iterate("select count(*) from Bar").next()).longValue() == 1);
  baz=(Baz)s.find("select baz from Baz baz order by baz").get(0);
  assertTrue("collection of custom types - added element",baz.getCustoms().size() == 4 && baz.getCustoms().get(0) != null);
  assertTrue("component of component in collection",baz.getComponents()[1].getSubcomponent() != null);
  assertTrue(baz.getComponents()[1].getBaz() == baz);
  assertTrue("set of objects",((FooProxy)baz.getFooSet().iterator().next()).getKey().equals(foo.getKey()));
  assertTrue("collection removed",baz.getStringArray().length == 0);
  assertTrue("changed element",baz.getStringList().get(0).equals("new value"));
  assertTrue("replaced set",baz.getStringSet().size() == 0);
  assertTrue("array element change",baz.getTimeArray()[2] != null);
  assertTrue(baz.getCascadingBars().size() == 1);
  baz.getStringSet().add("two");
  baz.getStringSet().add("one");
  baz.getBag().add("three");
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  baz=(Baz)s.find("select baz from Baz baz order by baz").get(0);
  assertTrue(baz.getStringSet().size() == 2);
  assertTrue(baz.getStringSet().first().equals("one"));
  assertTrue(baz.getStringSet().last().equals("two"));
  assertTrue(baz.getBag().size() == 5);
  baz.getStringSet().remove("two");
  baz.getBag().remove("duplicate");
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  assertTrue(((Long)s.iterate("select count(*) from Bar").next()).longValue() == 1);
  baz=(Baz)s.load(Baz.class,baz.getCode());
  assertTrue(baz.getCascadingBars().size() == 1);
  Bar bar=new Bar();
  Bar bar2=new Bar();
  s.save(bar);
  s.save(bar2);
  baz.setTopFoos(new HashSet());
  baz.getTopFoos().add(bar);
  baz.getTopFoos().add(bar2);
  assertTrue(baz.getCascadingBars().size() == 1);
  baz.setTopGlarchez(new TreeMap());
  GlarchProxy g=new Glarch();
  s.save(g);
  baz.getTopGlarchez().put(new Character('G'),g);
  HashMap map=new HashMap();
  map.put(bar,g);
  map.put(bar2,g);
  baz.setFooToGlarch(map);
  map=new HashMap();
  map.put(new FooComponent("name",123,null,null),bar);
  map.put(new FooComponent("nameName",12,null,null),bar);
  baz.setFooComponentToFoo(map);
  map=new HashMap();
  map.put(bar,g);
  baz.setGlarchToFoo(map);
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  baz=(Baz)s.find("select baz from Baz baz order by baz").get(0);
  assertTrue(baz.getCascadingBars().size() == 1);
  Session s2=openSession();
  Transaction txn2=s2.beginTransaction();
  assertTrue(((Long)s2.iterate("select count(*) from Bar").next()).longValue() == 3);
  Baz baz2=(Baz)s2.find("select baz from Baz baz order by baz").get(0);
  Object o=baz2.getFooComponentToFoo().get(new FooComponent("name",123,null,null));
  assertTrue(o == baz2.getFooComponentToFoo().get(new FooComponent("nameName",12,null,null)) && o != null);
  txn2.commit();
  s2.close();
  assertTrue(Hibernate.isInitialized(baz.getFooToGlarch()));
  assertTrue(baz.getTopFoos().size() == 2);
  assertTrue(baz.getTopGlarchez().size() == 1);
  assertTrue(baz.getTopFoos().iterator().next() != null);
  assertTrue(baz.getStringSet().size() == 1);
  assertTrue(baz.getBag().size() == 4);
  assertTrue(baz.getFooToGlarch().size() == 2);
  assertTrue(baz.getFooComponentToFoo().size() == 2);
  assertTrue(baz.getGlarchToFoo().size() == 1);
  Iterator iter=baz.getFooToGlarch().keySet().iterator();
  for (int i=0; i < 2; i++)   assertTrue(iter.next() instanceof BarProxy);
  FooComponent fooComp=(FooComponent)baz.getFooComponentToFoo().keySet().iterator().next();
  assertTrue(((fooComp.getCount() == 123 && fooComp.getName().equals("name")) || (fooComp.getCount() == 12 && fooComp.getName().equals("nameName"))) && (baz.getFooComponentToFoo().get(fooComp) instanceof BarProxy));
  Glarch g2=new Glarch();
  s.save(g2);
  g=(GlarchProxy)baz.getTopGlarchez().get(new Character('G'));
  baz.getTopGlarchez().put(new Character('H'),g);
  baz.getTopGlarchez().put(new Character('G'),g2);
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  baz=(Baz)s.load(Baz.class,baz.getCode());
  assertTrue(baz.getTopGlarchez().size() == 2);
  assertTrue(baz.getCascadingBars().size() == 1);
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  assertTrue(((Long)s.iterate("select count(*) from Bar").next()).longValue() == 3);
  baz=(Baz)s.find("select baz from Baz baz order by baz").get(0);
  assertTrue(baz.getTopGlarchez().size() == 2);
  assertTrue(baz.getCascadingBars().size() == 1);
  txn.commit();
  s.disconnect();
  s2=(Session)SerializationHelper.deserialize(SerializationHelper.serialize(s));
  s.close();
  s2.reconnect();
  txn2=s2.beginTransaction();
  baz=(Baz)s2.load(Baz.class,baz.getCode());
  assertTrue(((Long)s2.iterate("select count(*) from Bar").next()).longValue() == 3);
  s2.delete(baz);
  s2.delete(baz.getTopGlarchez().get(new Character('G')));
  s2.delete(baz.getTopGlarchez().get(new Character('H')));
  int rows=s2.connection().createStatement().executeUpdate("update " + getDialect().openQuote() + "glarchez"+ getDialect().closeQuote()+ " set baz_map_id=null where baz_map_index='a'");
  assertTrue(rows == 1);
  assertTrue(s2.delete("from Bar bar") == 2);
  FooProxy[] arr=baz.getFooArray();
  assertTrue("new array of objects",arr.length == 4 && arr[1].getKey().equals(foo.getKey()));
  for (int i=1; i < arr.length; i++) {
    if (arr[i] != null)     s2.delete(arr[i]);
  }
  s2.load(Qux.class,new Long(666));
  assertTrue(s2.delete("from Glarch g") == 1);
  txn2.commit();
  s2.disconnect();
  Session s3=(Session)SerializationHelper.deserialize(SerializationHelper.serialize(s2));
  s2.close();
  assertTrue(s3.load(Qux.class,new Long(666)) != null);
  s3.close();
}
