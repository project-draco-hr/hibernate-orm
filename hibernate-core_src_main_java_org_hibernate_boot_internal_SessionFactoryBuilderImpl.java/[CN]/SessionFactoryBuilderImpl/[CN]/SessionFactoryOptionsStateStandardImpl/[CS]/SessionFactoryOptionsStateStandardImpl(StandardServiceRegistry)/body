{
  this.serviceRegistry=serviceRegistry;
  final StrategySelector strategySelector=serviceRegistry.getService(StrategySelector.class);
  ConfigurationService cfgService=serviceRegistry.getService(ConfigurationService.class);
  final JdbcServices jdbcServices=serviceRegistry.getService(JdbcServices.class);
  final Map configurationSettings=new HashMap();
  configurationSettings.putAll(cfgService.getSettings());
  configurationSettings.putAll(jdbcServices.getJdbcEnvironment().getDialect().getDefaultProperties());
  cfgService=new ConfigurationServiceImpl(configurationSettings);
  ((ConfigurationServiceImpl)cfgService).injectServices((ServiceRegistryImplementor)serviceRegistry);
  this.beanManagerReference=configurationSettings.get("javax.persistence.bean.manager");
  this.validatorFactoryReference=configurationSettings.get("javax.persistence.validation.factory");
  this.sessionFactoryName=(String)configurationSettings.get(SESSION_FACTORY_NAME);
  this.sessionFactoryNameAlsoJndiName=cfgService.getSetting(SESSION_FACTORY_NAME_IS_JNDI,BOOLEAN,true);
  this.flushBeforeCompletionEnabled=cfgService.getSetting(FLUSH_BEFORE_COMPLETION,BOOLEAN,false);
  this.autoCloseSessionEnabled=cfgService.getSetting(AUTO_CLOSE_SESSION,BOOLEAN,false);
  this.statisticsEnabled=cfgService.getSetting(GENERATE_STATISTICS,BOOLEAN,false);
  this.interceptor=strategySelector.resolveDefaultableStrategy(Interceptor.class,configurationSettings.get(INTERCEPTOR),EmptyInterceptor.INSTANCE);
  this.statementInspector=strategySelector.resolveStrategy(StatementInspector.class,configurationSettings.get(STATEMENT_INSPECTOR));
  final String autoSessionEventsListenerName=(String)configurationSettings.get(AUTO_SESSION_EVENTS_LISTENER);
  final Class<? extends SessionEventListener> autoSessionEventsListener=autoSessionEventsListenerName == null ? null : strategySelector.selectStrategyImplementor(SessionEventListener.class,autoSessionEventsListenerName);
  final boolean logSessionMetrics=cfgService.getSetting(LOG_SESSION_METRICS,BOOLEAN,statisticsEnabled);
  this.baselineSessionEventsListenerBuilder=new BaselineSessionEventsListenerBuilder(logSessionMetrics,autoSessionEventsListener);
  this.customEntityDirtinessStrategy=strategySelector.resolveDefaultableStrategy(CustomEntityDirtinessStrategy.class,configurationSettings.get(CUSTOM_ENTITY_DIRTINESS_STRATEGY),DefaultCustomEntityDirtinessStrategy.INSTANCE);
  this.entityNotFoundDelegate=StandardEntityNotFoundDelegate.INSTANCE;
  this.identifierRollbackEnabled=cfgService.getSetting(USE_IDENTIFIER_ROLLBACK,BOOLEAN,false);
  this.defaultEntityMode=EntityMode.parse((String)configurationSettings.get(DEFAULT_ENTITY_MODE));
  this.checkNullability=cfgService.getSetting(CHECK_NULLABILITY,BOOLEAN,true);
  this.initializeLazyStateOutsideTransactions=cfgService.getSetting(ENABLE_LAZY_LOAD_NO_TRANS,BOOLEAN,false);
  this.multiTenancyStrategy=MultiTenancyStrategy.determineMultiTenancyStrategy(configurationSettings);
  this.currentTenantIdentifierResolver=strategySelector.resolveStrategy(CurrentTenantIdentifierResolver.class,configurationSettings.get(MULTI_TENANT_IDENTIFIER_RESOLVER));
  this.multiTableBulkIdStrategy=strategySelector.resolveDefaultableStrategy(MultiTableBulkIdStrategy.class,configurationSettings.get(HQL_BULK_ID_STRATEGY),jdbcServices.getJdbcEnvironment().getDialect().getDefaultMultiTableBulkIdStrategy());
  this.batchFetchStyle=BatchFetchStyle.interpret(configurationSettings.get(BATCH_FETCH_STYLE));
  this.defaultBatchFetchSize=ConfigurationHelper.getInt(DEFAULT_BATCH_FETCH_SIZE,configurationSettings,-1);
  this.maximumFetchDepth=ConfigurationHelper.getInteger(MAX_FETCH_DEPTH,configurationSettings);
  final String defaultNullPrecedence=ConfigurationHelper.getString(AvailableSettings.DEFAULT_NULL_ORDERING,configurationSettings,"none","first","last");
  this.defaultNullPrecedence=NullPrecedence.parse(defaultNullPrecedence);
  this.orderUpdatesEnabled=ConfigurationHelper.getBoolean(ORDER_UPDATES,configurationSettings);
  this.orderInsertsEnabled=ConfigurationHelper.getBoolean(ORDER_INSERTS,configurationSettings);
  this.jtaTrackByThread=cfgService.getSetting(JTA_TRACK_BY_THREAD,BOOLEAN,true);
  this.querySubstitutions=ConfigurationHelper.toMap(QUERY_SUBSTITUTIONS," ,=;:\n\t\r\f",configurationSettings);
  this.strictJpaQueryLanguageCompliance=cfgService.getSetting(JPAQL_STRICT_COMPLIANCE,BOOLEAN,false);
  this.namedQueryStartupCheckingEnabled=cfgService.getSetting(QUERY_STARTUP_CHECKING,BOOLEAN,true);
  this.secondLevelCacheEnabled=cfgService.getSetting(USE_SECOND_LEVEL_CACHE,BOOLEAN,true);
  this.queryCacheEnabled=cfgService.getSetting(USE_QUERY_CACHE,BOOLEAN,false);
  this.queryCacheFactory=strategySelector.resolveDefaultableStrategy(QueryCacheFactory.class,configurationSettings.get(QUERY_CACHE_FACTORY),StandardQueryCacheFactory.INSTANCE);
  this.cacheRegionPrefix=ConfigurationHelper.extractPropertyValue(CACHE_REGION_PREFIX,configurationSettings);
  this.minimalPutsEnabled=cfgService.getSetting(USE_MINIMAL_PUTS,BOOLEAN,serviceRegistry.getService(RegionFactory.class).isMinimalPutsEnabledByDefault());
  this.structuredCacheEntriesEnabled=cfgService.getSetting(USE_STRUCTURED_CACHE,BOOLEAN,false);
  this.directReferenceCacheEntriesEnabled=cfgService.getSetting(USE_DIRECT_REFERENCE_CACHE_ENTRIES,BOOLEAN,false);
  this.autoEvictCollectionCache=cfgService.getSetting(AUTO_EVICT_COLLECTION_CACHE,BOOLEAN,false);
  try {
    this.schemaAutoTooling=SchemaAutoTooling.interpret((String)configurationSettings.get(AvailableSettings.HBM2DDL_AUTO));
  }
 catch (  Exception e) {
    log.warn(e.getMessage() + "  Ignoring");
  }
  final ExtractedDatabaseMetaData meta=jdbcServices.getExtractedMetaDataSupport();
  this.tempTableDdlTransactionHandling=TempTableDdlTransactionHandling.NONE;
  if (meta.doesDataDefinitionCauseTransactionCommit()) {
    if (meta.supportsDataDefinitionInTransaction()) {
      this.tempTableDdlTransactionHandling=TempTableDdlTransactionHandling.ISOLATE_AND_TRANSACT;
    }
 else {
      this.tempTableDdlTransactionHandling=TempTableDdlTransactionHandling.ISOLATE;
    }
  }
  this.jdbcBatchSize=ConfigurationHelper.getInt(STATEMENT_BATCH_SIZE,configurationSettings,0);
  if (!meta.supportsBatchUpdates()) {
    this.jdbcBatchSize=0;
  }
  this.jdbcBatchVersionedData=ConfigurationHelper.getBoolean(BATCH_VERSIONED_DATA,configurationSettings,false);
  this.scrollableResultSetsEnabled=ConfigurationHelper.getBoolean(USE_SCROLLABLE_RESULTSET,configurationSettings,meta.supportsScrollableResults());
  this.wrapResultSetsEnabled=ConfigurationHelper.getBoolean(WRAP_RESULT_SETS,configurationSettings,false);
  this.getGeneratedKeysEnabled=ConfigurationHelper.getBoolean(USE_GET_GENERATED_KEYS,configurationSettings,meta.supportsGetGeneratedKeys());
  this.jdbcFetchSize=ConfigurationHelper.getInteger(STATEMENT_FETCH_SIZE,configurationSettings);
  final String releaseModeName=ConfigurationHelper.getString(RELEASE_CONNECTIONS,configurationSettings,"auto");
  if ("auto".equals(releaseModeName)) {
    this.connectionReleaseMode=serviceRegistry.getService(TransactionCoordinatorBuilder.class).getDefaultConnectionReleaseMode();
  }
 else {
    connectionReleaseMode=ConnectionReleaseMode.parse(releaseModeName);
  }
  this.commentsEnabled=ConfigurationHelper.getBoolean(USE_SQL_COMMENTS,configurationSettings);
  this.preferUserTransaction=ConfigurationHelper.getBoolean(PREFER_USER_TRANSACTION,configurationSettings,false);
}
