{
  this.propertyElement=propertyElement;
  this.typeSource=new ExplicitHibernateTypeSource(){
    private final String name=propertyElement.getTypeAttribute() != null ? propertyElement.getTypeAttribute() : propertyElement.getType() != null ? propertyElement.getType().getName() : null;
    private final Map<String,String> parameters=(propertyElement.getType() != null) ? Helper.extractParameters(propertyElement.getType().getParam()) : null;
    @Override public String getName(){
      return name;
    }
    @Override public Map<String,String> getParameters(){
      return parameters;
    }
  }
;
  this.valueSources=Helper.buildValueSources(new Helper.ValueSourcesAdapter(){
    @Override public String getColumnAttribute(){
      return propertyElement.getColumn();
    }
    @Override public String getFormulaAttribute(){
      return propertyElement.getFormula();
    }
    @Override public List getColumnOrFormulaElements(){
      return propertyElement.getColumnOrFormula();
    }
    @Override public String getContainingTableName(){
      return null;
    }
    @Override public boolean isIncludedInInsertByDefault(){
      return Helper.getBooleanValue(propertyElement.isInsert(),true);
    }
    @Override public boolean isIncludedInUpdateByDefault(){
      return Helper.getBooleanValue(propertyElement.isUpdate(),true);
    }
  }
,bindingContext);
}
