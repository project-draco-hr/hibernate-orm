{
  String generateRevisionsForCollectionsStr=getProperty(properties,"org.hibernate.envers.revision_on_collection_change","org.hibernate.envers.revisionOnCollectionChange","true");
  generateRevisionsForCollections=Boolean.parseBoolean(generateRevisionsForCollectionsStr);
  String ignoreOptimisticLockingPropertyStr=getProperty(properties,"org.hibernate.envers.do_not_audit_optimistic_locking_field","org.hibernate.envers.doNotAuditOptimisticLockingField","true");
  doNotAuditOptimisticLockingField=Boolean.parseBoolean(ignoreOptimisticLockingPropertyStr);
  String storeDataDeletedEntityStr=getProperty(properties,"org.hibernate.envers.store_data_at_delete","org.hibernate.envers.storeDataAtDelete","false");
  storeDataAtDelete=Boolean.parseBoolean(storeDataDeletedEntityStr);
  defaultSchemaName=properties.getProperty("org.hibernate.envers.default_schema",null);
  defaultCatalogName=properties.getProperty("org.hibernate.envers.default_catalog",null);
  correlatedSubqueryOperator="org.hibernate.dialect.HSQLDialect".equals(properties.getProperty("hibernate.dialect")) ? "in" : "=";
  String trackEntitiesChangedInRevisionEnabledStr=getProperty(properties,"org.hibernate.envers.track_entities_changed_in_revision","org.hibernate.envers.track_entities_changed_in_revision","false");
  trackEntitiesChangedInRevisionEnabled=Boolean.parseBoolean(trackEntitiesChangedInRevisionEnabledStr);
  hasGlobalSettingForWithModifiedFlag=properties.getProperty(GLOBAL_WITH_MODIFIED_FLAG_PROPERTY) != null;
  String usingModifiedFlagStr=getProperty(properties,GLOBAL_WITH_MODIFIED_FLAG_PROPERTY,GLOBAL_WITH_MODIFIED_FLAG_PROPERTY,"false");
  globalWithModifiedFlag=Boolean.parseBoolean(usingModifiedFlagStr);
  modifiedFlagSuffix=getProperty(properties,MODIFIED_FLAG_SUFFIX_PROPERTY,MODIFIED_FLAG_SUFFIX_PROPERTY,DEFAULT_MODIFIED_FLAG_SUFFIX);
  String revisionListenerClassName=properties.getProperty("org.hibernate.envers.revision_listener",null);
  if (revisionListenerClassName != null) {
    try {
      revisionListenerClass=(Class<? extends RevisionListener>)Thread.currentThread().getContextClassLoader().loadClass(revisionListenerClassName);
    }
 catch (    ClassNotFoundException e) {
      throw new MappingException("Revision listener class not found: " + revisionListenerClassName + ".",e);
    }
  }
 else {
    revisionListenerClass=null;
  }
}
