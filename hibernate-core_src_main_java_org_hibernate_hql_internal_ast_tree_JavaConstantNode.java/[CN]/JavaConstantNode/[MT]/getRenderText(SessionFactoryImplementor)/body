{
  final Type type=expectedType == null ? heuristicType : Number.class.isAssignableFrom(heuristicType.getReturnedClass()) ? heuristicType : expectedType;
  try {
    if (LiteralType.class.isInstance(type)) {
      final LiteralType literalType=(LiteralType)type;
      final Dialect dialect=factory.getDialect();
      return literalType.objectToSQLString(constantValue,dialect);
    }
 else     if (AttributeConverterTypeAdapter.class.isInstance(type)) {
      final AttributeConverterTypeAdapter converterType=(AttributeConverterTypeAdapter)type;
      if (!converterType.getModelType().isInstance(constantValue)) {
        throw new QueryException(String.format(Locale.ENGLISH,"Recognized query constant expression [%s] was not resolved to type [%s] expected by defined AttributeConverter [%s]",constantExpression,constantValue.getClass().getName(),converterType.getModelType().getName()));
      }
      final Object value=converterType.getAttributeConverter().convertToDatabaseColumn(constantValue);
      if (String.class.equals(converterType.getJdbcType())) {
        return "'" + value + "'";
      }
 else {
        return value.toString();
      }
    }
 else {
      throw new QueryException(String.format(Locale.ENGLISH,"Unrecognized Hibernate Type for handling query constant (%s); expecting LiteralType implementation or AttributeConverter",constantExpression));
    }
  }
 catch (  QueryException e) {
    throw e;
  }
catch (  Exception t) {
    throw new QueryException(QueryTranslator.ERROR_CANNOT_FORMAT_LITERAL + constantExpression,t);
  }
}
