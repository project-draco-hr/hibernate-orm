{
  final Document doc=metadataXml.getDocumentTree();
  final Element hibernateMappingElement=doc.getRootElement();
  java.util.List<String> names=HbmBinder.getExtendsNeeded(metadataXml,mappings);
  if (!names.isEmpty()) {
    Attribute packageAttribute=hibernateMappingElement.attribute("package");
    String packageName=packageAttribute == null ? null : packageAttribute.getValue();
    for (    String name : names) {
      mappings.addToExtendsQueue(new ExtendsQueueEntry(name,packageName,metadataXml,entityNames));
    }
    return;
  }
  inheritedMetas=getMetas(hibernateMappingElement,inheritedMetas,true);
  extractRootAttributes(hibernateMappingElement,mappings);
  Iterator rootChildren=hibernateMappingElement.elementIterator();
  while (rootChildren.hasNext()) {
    final Element element=(Element)rootChildren.next();
    final String elementName=element.getName();
    if ("filter-def".equals(elementName)) {
      parseFilterDef(element,mappings);
    }
 else     if ("fetch-profile".equals(elementName)) {
      parseFetchProfile(element,mappings,null);
    }
 else     if ("identifier-generator".equals(elementName)) {
      parseIdentifierGeneratorRegistration(element,mappings);
    }
 else     if ("typedef".equals(elementName)) {
      bindTypeDef(element,mappings);
    }
 else     if ("class".equals(elementName)) {
      RootClass rootclass=new RootClass();
      bindRootClass(element,rootclass,mappings,inheritedMetas);
      mappings.addClass(rootclass);
    }
 else     if ("subclass".equals(elementName)) {
      PersistentClass superModel=getSuperclass(mappings,element);
      handleSubclass(superModel,mappings,element,inheritedMetas);
    }
 else     if ("joined-subclass".equals(elementName)) {
      PersistentClass superModel=getSuperclass(mappings,element);
      handleJoinedSubclass(superModel,mappings,element,inheritedMetas);
    }
 else     if ("union-subclass".equals(elementName)) {
      PersistentClass superModel=getSuperclass(mappings,element);
      handleUnionSubclass(superModel,mappings,element,inheritedMetas);
    }
 else     if ("query".equals(elementName)) {
      bindNamedQuery(element,null,mappings);
    }
 else     if ("sql-query".equals(elementName)) {
      bindNamedSQLQuery(element,null,mappings);
    }
 else     if ("resultset".equals(elementName)) {
      bindResultSetMappingDefinition(element,null,mappings);
    }
 else     if ("import".equals(elementName)) {
      bindImport(element,mappings);
    }
 else     if ("database-object".equals(elementName)) {
      bindAuxiliaryDatabaseObject(element,mappings);
    }
  }
}
