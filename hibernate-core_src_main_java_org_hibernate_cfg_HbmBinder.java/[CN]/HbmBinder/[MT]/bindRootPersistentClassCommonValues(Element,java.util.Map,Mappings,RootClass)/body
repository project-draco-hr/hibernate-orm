{
  Attribute schemaNode=node.attribute("schema");
  String schema=schemaNode == null ? mappings.getSchemaName() : schemaNode.getValue();
  Attribute catalogNode=node.attribute("catalog");
  String catalog=catalogNode == null ? mappings.getCatalogName() : catalogNode.getValue();
  Table table=mappings.addTable(schema,catalog,getClassTableName(entity,node,schema,catalog,null,mappings),getSubselect(node),entity.isAbstract() != null && entity.isAbstract().booleanValue());
  entity.setTable(table);
  bindComment(table,node);
  LOG.mappingClass(entity.getEntityName(),entity.getTable().getName());
  Attribute mutableNode=node.attribute("mutable");
  entity.setMutable((mutableNode == null) || mutableNode.getValue().equals("true"));
  Attribute whereNode=node.attribute("where");
  if (whereNode != null)   entity.setWhere(whereNode.getValue());
  Attribute chNode=node.attribute("check");
  if (chNode != null)   table.addCheckConstraint(chNode.getValue());
  Attribute polyNode=node.attribute("polymorphism");
  entity.setExplicitPolymorphism((polyNode != null) && polyNode.getValue().equals("explicit"));
  Attribute rowidNode=node.attribute("rowid");
  if (rowidNode != null)   table.setRowId(rowidNode.getValue());
  Iterator subnodes=node.elementIterator();
  while (subnodes.hasNext()) {
    Element subnode=(Element)subnodes.next();
    String name=subnode.getName();
    if ("id".equals(name)) {
      bindSimpleId(subnode,entity,mappings,inheritedMetas);
    }
 else     if ("composite-id".equals(name)) {
      bindCompositeId(subnode,entity,mappings,inheritedMetas);
    }
 else     if ("version".equals(name) || "timestamp".equals(name)) {
      bindVersioningProperty(table,subnode,mappings,name,entity,inheritedMetas);
    }
 else     if ("discriminator".equals(name)) {
      bindDiscriminatorProperty(table,entity,subnode,mappings);
    }
 else     if ("cache".equals(name)) {
      entity.setCacheConcurrencyStrategy(subnode.attributeValue("usage"));
      entity.setCacheRegionName(subnode.attributeValue("region"));
      entity.setLazyPropertiesCacheable(!"non-lazy".equals(subnode.attributeValue("include")));
    }
  }
  entity.createPrimaryKey();
  createClassProperties(node,entity,mappings,inheritedMetas);
}
