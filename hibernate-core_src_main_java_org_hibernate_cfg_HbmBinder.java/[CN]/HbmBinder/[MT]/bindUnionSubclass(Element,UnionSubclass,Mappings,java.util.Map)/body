{
  bindClass(node,unionSubclass,mappings,inheritedMetas);
  inheritedMetas=getMetas(node,inheritedMetas,true);
  Attribute schemaNode=node.attribute("schema");
  String schema=schemaNode == null ? mappings.getSchemaName() : schemaNode.getValue();
  Attribute catalogNode=node.attribute("catalog");
  String catalog=catalogNode == null ? mappings.getCatalogName() : catalogNode.getValue();
  Table denormalizedSuperTable=unionSubclass.getSuperclass().getTable();
  Table mytable=mappings.addDenormalizedTable(schema,catalog,getClassTableName(unionSubclass,node,schema,catalog,denormalizedSuperTable,mappings),unionSubclass.isAbstract() != null && unionSubclass.isAbstract(),getSubselect(node),denormalizedSuperTable);
  unionSubclass.setTable(mytable);
  if (LOG.isDebugEnabled()) {
    LOG.debugf("Mapping union-subclass: %s -> %s",unionSubclass.getEntityName(),unionSubclass.getTable().getName());
  }
  createClassProperties(node,unionSubclass,mappings,inheritedMetas);
}
