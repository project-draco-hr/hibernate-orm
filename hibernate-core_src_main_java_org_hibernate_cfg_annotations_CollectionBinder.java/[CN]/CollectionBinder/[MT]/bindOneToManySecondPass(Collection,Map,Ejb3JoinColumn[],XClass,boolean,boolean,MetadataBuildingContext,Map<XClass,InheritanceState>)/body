{
  final boolean debugEnabled=LOG.isDebugEnabled();
  if (debugEnabled) {
    LOG.debugf("Binding a OneToMany: %s.%s through a foreign key",propertyHolder.getEntityName(),propertyName);
  }
  org.hibernate.mapping.OneToMany oneToMany=new org.hibernate.mapping.OneToMany(buildingContext.getMetadataCollector(),collection.getOwner());
  collection.setElement(oneToMany);
  oneToMany.setReferencedEntityName(collectionType.getName());
  oneToMany.setIgnoreNotFound(ignoreNotFound);
  String assocClass=oneToMany.getReferencedEntityName();
  PersistentClass associatedClass=(PersistentClass)persistentClasses.get(assocClass);
  if (jpaOrderBy != null) {
    final String orderByFragment=buildOrderByClauseFromHql(jpaOrderBy.value(),associatedClass,collection.getRole());
    if (StringHelper.isNotEmpty(orderByFragment)) {
      collection.setOrderBy(orderByFragment);
    }
  }
  if (buildingContext == null) {
    throw new AssertionFailure("CollectionSecondPass for oneToMany should not be called with null mappings");
  }
  Map<String,Join> joins=buildingContext.getMetadataCollector().getJoins(assocClass);
  if (associatedClass == null) {
    throw new MappingException("Association references unmapped class: " + assocClass);
  }
  oneToMany.setAssociatedClass(associatedClass);
  for (  Ejb3JoinColumn column : fkJoinColumns) {
    column.setPersistentClass(associatedClass,joins,inheritanceStatePerClass);
    column.setJoins(joins);
    collection.setCollectionTable(column.getTable());
  }
  if (debugEnabled) {
    LOG.debugf("Mapping collection: %s -> %s",collection.getRole(),collection.getCollectionTable().getName());
  }
  bindFilters(false);
  bindCollectionSecondPass(collection,null,fkJoinColumns,cascadeDeleteEnabled,property,buildingContext);
  if (!collection.isInverse() && !collection.getKey().isNullable()) {
    String entityName=oneToMany.getReferencedEntityName();
    PersistentClass referenced=buildingContext.getMetadataCollector().getEntityBinding(entityName);
    Backref prop=new Backref();
    prop.setName('_' + fkJoinColumns[0].getPropertyName() + '_'+ fkJoinColumns[0].getLogicalColumnName()+ "Backref");
    prop.setUpdateable(false);
    prop.setSelectable(false);
    prop.setCollectionRole(collection.getRole());
    prop.setEntityName(collection.getOwner().getEntityName());
    prop.setValue(collection.getKey());
    referenced.addProperty(prop);
  }
}
