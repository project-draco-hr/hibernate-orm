{
  KeyValue keyVal;
  if (joinColumns.length > 0 && StringHelper.isNotEmpty(joinColumns[0].getMappedBy())) {
    String entityName=joinColumns[0].getManyToManyOwnerSideEntityName() != null ? "inverse__" + joinColumns[0].getManyToManyOwnerSideEntityName() : joinColumns[0].getPropertyHolder().getEntityName();
    String propRef=buildingContext.getMetadataCollector().getPropertyReferencedAssociation(entityName,joinColumns[0].getMappedBy());
    if (propRef != null) {
      collValue.setReferencedPropertyName(propRef);
      buildingContext.getMetadataCollector().addPropertyReference(collValue.getOwnerEntityName(),propRef);
    }
  }
  String propRef=collValue.getReferencedPropertyName();
  if (propRef == null) {
    keyVal=collValue.getOwner().getIdentifier();
  }
 else {
    keyVal=(KeyValue)collValue.getOwner().getReferencedProperty(propRef).getValue();
  }
  DependantValue key=new DependantValue(buildingContext.getMetadataCollector(),collValue.getCollectionTable(),keyVal);
  key.setTypeName(null);
  Ejb3Column.checkPropertyConsistency(joinColumns,collValue.getOwnerEntityName());
  key.setNullable(joinColumns.length == 0 || joinColumns[0].isNullable());
  key.setUpdateable(joinColumns.length == 0 || joinColumns[0].isUpdatable());
  key.setCascadeDeleteEnabled(cascadeDeleteEnabled);
  collValue.setKey(key);
  if (property != null) {
    final ForeignKey fk=property.getAnnotation(ForeignKey.class);
    if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) {
      key.setForeignKeyName(fk.name());
    }
 else {
      final CollectionTable collectionTableAnn=property.getAnnotation(CollectionTable.class);
      if (collectionTableAnn != null) {
        if (collectionTableAnn.foreignKey().value() == ConstraintMode.NO_CONSTRAINT) {
          key.setForeignKeyName("none");
        }
 else {
          key.setForeignKeyName(StringHelper.nullIfEmpty(collectionTableAnn.foreignKey().name()));
        }
      }
 else {
        final JoinTable joinTableAnn=property.getAnnotation(JoinTable.class);
        if (joinTableAnn != null) {
          if (joinTableAnn.foreignKey().value() == ConstraintMode.NO_CONSTRAINT) {
            key.setForeignKeyName("none");
          }
 else {
            key.setForeignKeyName(StringHelper.nullIfEmpty(joinTableAnn.foreignKey().name()));
          }
        }
 else {
          final JoinColumn joinColumnAnn=property.getAnnotation(JoinColumn.class);
          if (joinColumnAnn != null) {
            if (joinColumnAnn.foreignKey().value() == ConstraintMode.NO_CONSTRAINT) {
              key.setForeignKeyName("none");
            }
 else {
              key.setForeignKeyName(StringHelper.nullIfEmpty(joinColumnAnn.foreignKey().name()));
            }
          }
        }
      }
    }
  }
  return key;
}
