{
  String xmlName=annotationToXml.get(annotationType);
  for (  Element element : elementsForProperty) {
    if (xmlName.equals(element.getName())) {
      AnnotationDescriptor ad=new AnnotationDescriptor(annotationType);
      addTargetClass(element,ad,"target-entity",defaults);
      getFetchType(ad,element);
      getCascades(ad,element,defaults);
      getJoinTable(annotationList,element,defaults);
      buildJoinColumns(annotationList,element);
      Annotation annotation=getPrimaryKeyJoinColumns(element,defaults,false);
      addIfNotNull(annotationList,annotation);
      copyBooleanAttribute(ad,element,"optional");
      copyBooleanAttribute(ad,element,"orphan-removal");
      copyStringAttribute(ad,element,"mapped-by",false);
      getOrderBy(annotationList,element);
      getMapKey(annotationList,element);
      getMapKeyClass(annotationList,element,defaults);
      getMapKeyColumn(annotationList,element);
      getOrderColumn(annotationList,element);
      getMapKeyTemporal(annotationList,element);
      getMapKeyEnumerated(annotationList,element);
      annotation=getMapKeyAttributeOverrides(element,defaults);
      addIfNotNull(annotationList,annotation);
      buildMapKeyJoinColumns(annotationList,element);
      getAssociationId(annotationList,element);
      getMapsId(annotationList,element);
      annotationList.add(AnnotationFactory.create(ad));
      getAccessType(annotationList,element);
    }
  }
  if (elementsForProperty.size() == 0 && defaults.canUseJavaAnnotations()) {
    Annotation annotation=getJavaAnnotation(annotationType);
    if (annotation != null) {
      annotationList.add(annotation);
      annotation=overridesDefaultsInJoinTable(annotation,defaults);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(JoinColumn.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(JoinColumns.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(PrimaryKeyJoinColumn.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(PrimaryKeyJoinColumns.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKey.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(OrderBy.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(AttributeOverride.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(AttributeOverrides.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(AssociationOverride.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(AssociationOverrides.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Lob.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Enumerated.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Temporal.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Column.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Columns.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKeyClass.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKeyTemporal.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKeyEnumerated.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKeyColumn.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKeyJoinColumn.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKeyJoinColumns.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(OrderColumn.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Cascade.class);
      addIfNotNull(annotationList,annotation);
    }
 else     if (isJavaAnnotationPresent(ElementCollection.class)) {
      annotation=overridesDefaultsInJoinTable(getJavaAnnotation(ElementCollection.class),defaults);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKey.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(OrderBy.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(AttributeOverride.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(AttributeOverrides.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(AssociationOverride.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(AssociationOverrides.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Lob.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Enumerated.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Temporal.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Column.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(OrderColumn.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKeyClass.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKeyTemporal.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKeyEnumerated.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKeyColumn.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKeyJoinColumn.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKeyJoinColumns.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(CollectionTable.class);
      addIfNotNull(annotationList,annotation);
    }
 else     if (isJavaAnnotationPresent(CollectionOfElements.class)) {
      annotation=overridesDefaultsInJoinTable(getJavaAnnotation(CollectionOfElements.class),defaults);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(JoinColumn.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(JoinColumns.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(PrimaryKeyJoinColumn.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(PrimaryKeyJoinColumns.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(MapKey.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(OrderBy.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(AttributeOverride.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(AttributeOverrides.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(AssociationOverride.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(AssociationOverrides.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Lob.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Enumerated.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Temporal.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Column.class);
      addIfNotNull(annotationList,annotation);
      annotation=getJavaAnnotation(Columns.class);
      addIfNotNull(annotationList,annotation);
    }
  }
}
