{
  if (element == null)   return new ArrayList();
  List namedQueryElementList=isNative ? element.elements("named-native-query") : element.elements("named-query");
  List namedQueries=new ArrayList();
  Iterator it=namedQueryElementList.listIterator();
  while (it.hasNext()) {
    Element subelement=(Element)it.next();
    AnnotationDescriptor ann=new AnnotationDescriptor(isNative ? NamedNativeQuery.class : NamedQuery.class);
    copyStringAttribute(ann,subelement,"name",false);
    Element queryElt=subelement.element("query");
    if (queryElt == null)     throw new AnnotationException("No <query> element found." + SCHEMA_VALIDATION);
    ann.setValue("query",queryElt.getTextTrim());
    List<Element> elements=subelement.elements("hint");
    List<QueryHint> queryHints=new ArrayList<QueryHint>(elements.size());
    for (    Element hint : elements) {
      AnnotationDescriptor hintDescriptor=new AnnotationDescriptor(QueryHint.class);
      String value=hint.attributeValue("name");
      if (value == null)       throw new AnnotationException("<hint> without name. " + SCHEMA_VALIDATION);
      hintDescriptor.setValue("name",value);
      value=hint.attributeValue("value");
      if (value == null)       throw new AnnotationException("<hint> without value. " + SCHEMA_VALIDATION);
      hintDescriptor.setValue("value",value);
      queryHints.add((QueryHint)AnnotationFactory.create(hintDescriptor));
    }
    ann.setValue("hints",queryHints.toArray(new QueryHint[queryHints.size()]));
    String clazzName=subelement.attributeValue("result-class");
    if (StringHelper.isNotEmpty(clazzName)) {
      Class clazz;
      try {
        clazz=ReflectHelper.classForName(XMLContext.buildSafeClassName(clazzName,defaults),JPAOverridenAnnotationReader.class);
      }
 catch (      ClassNotFoundException e) {
        throw new AnnotationException("Unable to find entity-class: " + clazzName,e);
      }
      ann.setValue("resultClass",clazz);
    }
    copyStringAttribute(ann,subelement,"result-set-mapping",false);
    namedQueries.add(AnnotationFactory.create(ann));
  }
  return namedQueries;
}
