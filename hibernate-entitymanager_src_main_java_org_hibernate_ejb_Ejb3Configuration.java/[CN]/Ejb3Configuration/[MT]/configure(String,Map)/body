{
  try {
    LOG.debug("Look up for persistence unit: " + persistenceUnitName);
    integration=integration == null ? CollectionHelper.EMPTY_MAP : Collections.unmodifiableMap(integration);
    Enumeration<URL> xmls=Thread.currentThread().getContextClassLoader().getResources("META-INF/persistence.xml");
    if (!xmls.hasMoreElements())     LOG.unableToFindPersistenceXmlInClasspath();
    while (xmls.hasMoreElements()) {
      URL url=xmls.nextElement();
      LOG.trace("Analyzing persistence.xml: " + url);
      List<PersistenceMetadata> metadataFiles=PersistenceXmlLoader.deploy(url,integration,cfg.getEntityResolver(),PersistenceUnitTransactionType.RESOURCE_LOCAL);
      for (      PersistenceMetadata metadata : metadataFiles) {
        LOG.trace(metadata);
        if (metadata.getProvider() == null || IMPLEMENTATION_NAME.equalsIgnoreCase(metadata.getProvider())) {
          Scanner scanner=null;
          URL jarURL=null;
          if (metadata.getName() == null) {
            scanner=buildScanner(metadata.getProps(),integration);
            jarURL=JarVisitorFactory.getJarURLFromURLEntry(url,"/META-INF/persistence.xml");
            metadata.setName(scanner.getUnqualifiedJarName(jarURL));
          }
          if (persistenceUnitName == null && xmls.hasMoreElements()) {
            throw new PersistenceException("No name provided and several persistence units found");
          }
 else           if (persistenceUnitName == null || metadata.getName().equals(persistenceUnitName)) {
            if (scanner == null) {
              scanner=buildScanner(metadata.getProps(),integration);
              jarURL=JarVisitorFactory.getJarURLFromURLEntry(url,"/META-INF/persistence.xml");
            }
            ScanningContext mainJarScanCtx=new ScanningContext().scanner(scanner).url(jarURL).explicitMappingFiles(metadata.getMappingFiles()).searchOrm(true);
            setDetectedArtifactsOnScanningContext(mainJarScanCtx,metadata.getProps(),integration,metadata.getExcludeUnlistedClasses());
            addMetadataFromScan(mainJarScanCtx,metadata);
            ScanningContext otherJarScanCtx=new ScanningContext().scanner(scanner).explicitMappingFiles(metadata.getMappingFiles()).searchOrm(true);
            setDetectedArtifactsOnScanningContext(otherJarScanCtx,metadata.getProps(),integration,false);
            for (            String jarFile : metadata.getJarFiles()) {
              otherJarScanCtx.url(JarVisitorFactory.getURLFromPath(jarFile));
              addMetadataFromScan(otherJarScanCtx,metadata);
            }
            return configure(metadata,integration);
          }
        }
      }
    }
    return null;
  }
 catch (  Exception e) {
    if (e instanceof PersistenceException) {
      throw (PersistenceException)e;
    }
 else {
      throw new PersistenceException(getExceptionHeader() + "Unable to configure EntityManagerFactory",e);
    }
  }
}
