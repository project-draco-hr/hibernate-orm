{
  LOG.debugf("Creating Factory: %s",metadata.getName());
  Map overrides=new HashMap();
  if (overridesIn != null) {
    overrides.putAll(overridesIn);
  }
  Map workingVars=new HashMap();
  workingVars.put(AvailableSettings.PERSISTENCE_UNIT_NAME,metadata.getName());
  this.persistenceUnitName=metadata.getName();
  if (StringHelper.isNotEmpty(metadata.getJtaDatasource())) {
    this.setProperty(Environment.DATASOURCE,metadata.getJtaDatasource());
  }
 else   if (StringHelper.isNotEmpty(metadata.getNonJtaDatasource())) {
    this.setProperty(Environment.DATASOURCE,metadata.getNonJtaDatasource());
  }
 else {
    final String driver=(String)metadata.getProps().get(AvailableSettings.JDBC_DRIVER);
    if (StringHelper.isNotEmpty(driver)) {
      this.setProperty(Environment.DRIVER,driver);
    }
    final String url=(String)metadata.getProps().get(AvailableSettings.JDBC_URL);
    if (StringHelper.isNotEmpty(url)) {
      this.setProperty(Environment.URL,url);
    }
    final String user=(String)metadata.getProps().get(AvailableSettings.JDBC_USER);
    if (StringHelper.isNotEmpty(user)) {
      this.setProperty(Environment.USER,user);
    }
    final String pass=(String)metadata.getProps().get(AvailableSettings.JDBC_PASSWORD);
    if (StringHelper.isNotEmpty(pass)) {
      this.setProperty(Environment.PASS,pass);
    }
  }
  defineTransactionType(metadata.getTransactionType(),workingVars);
  if (metadata.getClasses().size() > 0) {
    workingVars.put(AvailableSettings.CLASS_NAMES,metadata.getClasses());
  }
  if (metadata.getPackages().size() > 0) {
    workingVars.put(AvailableSettings.PACKAGE_NAMES,metadata.getPackages());
  }
  if (metadata.getMappingFiles().size() > 0) {
    workingVars.put(AvailableSettings.XML_FILE_NAMES,metadata.getMappingFiles());
  }
  if (metadata.getHbmfiles().size() > 0) {
    workingVars.put(AvailableSettings.HBXML_FILES,metadata.getHbmfiles());
  }
  Properties props=new Properties();
  props.putAll(metadata.getProps());
  final Object validationFactory=overrides.get(AvailableSettings.VALIDATION_FACTORY);
  if (validationFactory != null) {
    props.put(AvailableSettings.VALIDATION_FACTORY,validationFactory);
  }
  overrides.remove(AvailableSettings.VALIDATION_FACTORY);
{
    final Object integrationValue=overrides.get(AvailableSettings.VALIDATION_MODE);
    if (integrationValue != null) {
      props.put(AvailableSettings.VALIDATION_MODE,integrationValue.toString());
    }
 else     if (metadata.getValidationMode() != null) {
      props.put(AvailableSettings.VALIDATION_MODE,metadata.getValidationMode());
    }
    overrides.remove(AvailableSettings.VALIDATION_MODE);
  }
{
    final Object integrationValue=overrides.get(AvailableSettings.SHARED_CACHE_MODE);
    if (integrationValue != null) {
      props.put(AvailableSettings.SHARED_CACHE_MODE,integrationValue.toString());
    }
 else     if (metadata.getSharedCacheMode() != null) {
      props.put(AvailableSettings.SHARED_CACHE_MODE,metadata.getSharedCacheMode());
    }
    overrides.remove(AvailableSettings.SHARED_CACHE_MODE);
  }
  for (  Map.Entry entry : (Set<Map.Entry>)overrides.entrySet()) {
    Object value=entry.getValue();
    props.put(entry.getKey(),value == null ? "" : value);
  }
  configure(props,workingVars);
  return this;
}
