{
  ClassLoader classLoaderToUse=info.getNewTempClassLoader();
  if (classLoaderToUse == null) {
    LOG.persistenceProviderCallerDoesNotImplementEjb3SpecCorrectly();
    return;
  }
  for (  final String xmlFile : xmlFiles) {
    final InputStream fileInputStream=classLoaderToUse.getResourceAsStream(xmlFile);
    if (fileInputStream == null) {
      LOG.unableToResolveMappingFile(xmlFile);
      continue;
    }
    final InputSource inputSource=new InputSource(fileInputStream);
    XmlDocument metadataXml=MappingReader.INSTANCE.readMappingDocument(cfg.getEntityResolver(),inputSource,new OriginImpl("persistence-unit-info",xmlFile));
    xmlDocuments.add(metadataXml);
    try {
      final Element rootElement=metadataXml.getDocumentTree().getRootElement();
      if (rootElement != null && "entity-mappings".equals(rootElement.getName())) {
        Element element=rootElement.element("package");
        String defaultPackage=element != null ? element.getTextTrim() : null;
        List<Element> elements=rootElement.elements("entity");
        for (        Element subelement : elements) {
          String classname=XMLContext.buildSafeClassName(subelement.attributeValue("class"),defaultPackage);
          if (!entities.contains(classname)) {
            entities.add(classname);
          }
        }
        elements=rootElement.elements("mapped-superclass");
        for (        Element subelement : elements) {
          String classname=XMLContext.buildSafeClassName(subelement.attributeValue("class"),defaultPackage);
          if (!entities.contains(classname)) {
            entities.add(classname);
          }
        }
        elements=rootElement.elements("embeddable");
        for (        Element subelement : elements) {
          String classname=XMLContext.buildSafeClassName(subelement.attributeValue("class"),defaultPackage);
          if (!entities.contains(classname)) {
            entities.add(classname);
          }
        }
      }
 else       if (rootElement != null && "hibernate-mappings".equals(rootElement.getName())) {
      }
    }
  finally {
      try {
        fileInputStream.close();
      }
 catch (      IOException ioe) {
        LOG.warn(LOG.unableToCloseInputStream(),ioe);
      }
    }
  }
  xmlFiles.clear();
}
