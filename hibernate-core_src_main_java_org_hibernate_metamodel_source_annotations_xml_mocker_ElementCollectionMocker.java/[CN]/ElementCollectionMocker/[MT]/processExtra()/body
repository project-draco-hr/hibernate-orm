{
  List<AnnotationValue> annotationValueList=new ArrayList<AnnotationValue>();
  MockHelper.classValue("targetClass",elementCollection.getTargetClass(),annotationValueList,indexBuilder.getServiceRegistry());
  MockHelper.enumValue("fetch",FETCH_TYPE,elementCollection.getFetch(),annotationValueList);
  create(ELEMENT_COLLECTION,annotationValueList);
  parserLob(elementCollection.getLob(),getTarget());
  parserEnumType(elementCollection.getEnumerated(),getTarget());
  parserColumn(elementCollection.getColumn(),getTarget());
  parserTemporalType(elementCollection.getTemporal(),getTarget());
  parserCollectionTable(elementCollection.getCollectionTable(),getTarget());
  parserAssociationOverrides(elementCollection.getAssociationOverride(),getTarget());
  parserAttributeOverrides(elementCollection.getAttributeOverride(),getTarget());
  if (elementCollection.getOrderBy() != null) {
    create(ORDER_BY,MockHelper.stringValueArray("value",elementCollection.getOrderBy()));
  }
  parserAttributeOverrides(elementCollection.getMapKeyAttributeOverride(),getTarget());
  parserMapKeyJoinColumnList(elementCollection.getMapKeyJoinColumn(),getTarget());
  parserMapKey(elementCollection.getMapKey(),getTarget());
  parserMapKeyColumn(elementCollection.getMapKeyColumn(),getTarget());
  parserMapKeyClass(elementCollection.getMapKeyClass(),getTarget());
  parserMapKeyEnumerated(elementCollection.getMapKeyEnumerated(),getTarget());
  parserMapKeyTemporal(elementCollection.getMapKeyTemporal(),getTarget());
}
