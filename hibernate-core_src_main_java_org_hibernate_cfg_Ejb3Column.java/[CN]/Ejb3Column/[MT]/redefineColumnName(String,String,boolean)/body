{
  final ObjectNameNormalizer normalizer=context.getObjectNameNormalizer();
  final Database database=context.getMetadataCollector().getDatabase();
  final ImplicitNamingStrategy implicitNamingStrategy=context.getBuildingOptions().getImplicitNamingStrategy();
  final PhysicalNamingStrategy physicalNamingStrategy=context.getBuildingOptions().getPhysicalNamingStrategy();
  if (applyNamingStrategy) {
    if (StringHelper.isEmpty(columnName)) {
      if (propertyName != null) {
        final AttributePath attributePath=AttributePath.parse(propertyName);
        Identifier implicitName=normalizer.normalizeIdentifierQuoting(implicitNamingStrategy.determineBasicColumnName(new ImplicitBasicColumnNameSource(){
          @Override public AttributePath getAttributePath(){
            return attributePath;
          }
          @Override public boolean isCollectionElement(){
            return !propertyHolder.isComponent() && !propertyHolder.isEntity();
          }
          @Override public MetadataBuildingContext getBuildingContext(){
            return context;
          }
        }
));
        if (implicitName.getText().contains("_collection&&element_")) {
          implicitName=Identifier.toIdentifier(implicitName.getText().replace("_collection&&element_","_"),implicitName.isQuoted());
        }
        final Identifier physicalName=physicalNamingStrategy.toPhysicalColumnName(implicitName,database.getJdbcEnvironment());
        mappingColumn.setName(physicalName.render(database.getDialect()));
      }
    }
 else {
      final Identifier explicitName=database.toIdentifier(columnName);
      final Identifier physicalName=physicalNamingStrategy.toPhysicalColumnName(explicitName,database.getJdbcEnvironment());
      mappingColumn.setName(physicalName.render(database.getDialect()));
    }
  }
 else {
    if (StringHelper.isNotEmpty(columnName)) {
      mappingColumn.setName(normalizer.toDatabaseIdentifierText(columnName));
    }
  }
}
