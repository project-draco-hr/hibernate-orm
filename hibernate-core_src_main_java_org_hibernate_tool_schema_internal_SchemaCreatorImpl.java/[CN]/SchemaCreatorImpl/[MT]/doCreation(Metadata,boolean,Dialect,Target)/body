{
  final Database database=metadata.getDatabase();
  final JdbcEnvironment jdbcEnvironment=database.getJdbcEnvironment();
  for (  Target target : targets) {
    target.prepare();
  }
  final Set<String> exportIdentifiers=new HashSet<String>(50);
  for (  Schema schema : database.getSchemas()) {
    if (createSchemas) {
      if (schema.getName().getSchema() == null) {
        continue;
      }
      applySqlStrings(targets,dialect.getCreateSchemaCommand(schema.getName().getSchema().render(dialect)));
    }
  }
  for (  AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) {
    if (!auxiliaryDatabaseObject.beforeTablesOnCreation()) {
      continue;
    }
    if (auxiliaryDatabaseObject.appliesToDialect(dialect)) {
      applySqlStrings(targets,dialect.getAuxiliaryDatabaseObjectExporter().getSqlCreateStrings(auxiliaryDatabaseObject,metadata));
    }
  }
  for (  Schema schema : database.getSchemas()) {
    for (    Sequence sequence : schema.getSequences()) {
      checkExportIdentifier(sequence,exportIdentifiers);
      applySqlStrings(targets,dialect.getCreateSequenceStrings(jdbcEnvironment.getQualifiedObjectNameFormatter().format(sequence.getName(),dialect),sequence.getInitialValue(),sequence.getIncrementSize()));
    }
    for (    Table table : schema.getTables()) {
      if (!table.isPhysicalTable()) {
        continue;
      }
      checkExportIdentifier(table,exportIdentifiers);
      applySqlStrings(targets,dialect.getTableExporter().getSqlCreateStrings(table,metadata));
    }
    for (    Table table : schema.getTables()) {
      final Iterator indexItr=table.getIndexIterator();
      while (indexItr.hasNext()) {
        final Index index=(Index)indexItr.next();
        checkExportIdentifier(index,exportIdentifiers);
        applySqlStrings(targets,dialect.getIndexExporter().getSqlCreateStrings(index,metadata));
      }
      final Iterator ukItr=table.getUniqueKeyIterator();
      while (ukItr.hasNext()) {
        final UniqueKey uniqueKey=(UniqueKey)ukItr.next();
        checkExportIdentifier(uniqueKey,exportIdentifiers);
        applySqlStrings(targets,dialect.getUniqueKeyExporter().getSqlCreateStrings(uniqueKey,metadata));
      }
      final Iterator fkItr=table.getForeignKeyIterator();
      while (fkItr.hasNext()) {
        final ForeignKey foreignKey=(ForeignKey)fkItr.next();
        applySqlStrings(targets,dialect.getForeignKeyExporter().getSqlCreateStrings(foreignKey,metadata));
      }
    }
  }
  for (  AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) {
    if (auxiliaryDatabaseObject.appliesToDialect(dialect) && !auxiliaryDatabaseObject.beforeTablesOnCreation()) {
      checkExportIdentifier(auxiliaryDatabaseObject,exportIdentifiers);
      applySqlStrings(targets,dialect.getAuxiliaryDatabaseObjectExporter().getSqlCreateStrings(auxiliaryDatabaseObject,metadata));
    }
  }
  for (  InitCommand initCommand : database.getInitCommands()) {
    applySqlStrings(targets,initCommand.getInitCommands());
  }
  for (  Target target : targets) {
    target.release();
  }
}
