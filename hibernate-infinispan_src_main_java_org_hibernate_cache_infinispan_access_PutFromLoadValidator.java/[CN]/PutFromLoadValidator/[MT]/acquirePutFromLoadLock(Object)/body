{
  boolean valid=false;
  boolean locked=false;
  final long now=System.currentTimeMillis();
  try {
    final PendingPutMap pending=pendingPuts.get(key);
    if (pending != null) {
      locked=pending.acquireLock(100,TimeUnit.MILLISECONDS);
      if (locked) {
        try {
          final PendingPut toCancel=pending.remove(getOwnerForPut());
          if (toCancel != null) {
            valid=!toCancel.completed;
            toCancel.completed=true;
          }
        }
  finally {
          if (!valid) {
            pending.releaseLock();
            locked=false;
          }
        }
      }
    }
 else {
      if (now > invalidationTimestamp) {
        final Long removedTime=recentRemovals.get(key);
        if (removedTime == null || now > removedTime) {
          registerPendingPut(key);
          locked=acquirePutFromLoadLock(key);
          valid=locked;
        }
      }
    }
  }
 catch (  Throwable t) {
    if (locked) {
      final PendingPutMap toRelease=pendingPuts.get(key);
      if (toRelease != null) {
        toRelease.releaseLock();
      }
    }
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else     if (t instanceof Error) {
      throw (Error)t;
    }
 else {
      throw new RuntimeException(t);
    }
  }
  return valid;
}
