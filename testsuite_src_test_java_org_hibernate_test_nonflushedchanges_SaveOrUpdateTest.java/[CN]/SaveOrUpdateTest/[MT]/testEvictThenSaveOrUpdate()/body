{
  SimpleJtaTransactionManagerImpl.getInstance().begin();
  Session s=openSession();
  Node parent=new Node("1:parent");
  Node child=new Node("2:child");
  Node grandchild=new Node("3:grandchild");
  parent.addChild(child);
  child.addChild(grandchild);
  s.saveOrUpdate(parent);
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  SimpleJtaTransactionManagerImpl.getInstance().commit();
  SimpleJtaTransactionManagerImpl.getInstance().begin();
  Session s1=openSession();
  child=(Node)s1.load(Node.class,"2:child");
  s1=applyNonFlushedChangesToNewSessionCloseOldSession(s1);
  child=(Node)getOldToNewEntityRefMap().get(child);
  assertTrue(s1.contains(child));
  assertFalse(Hibernate.isInitialized(child));
  assertTrue(s1.contains(child.getParent()));
  assertTrue(Hibernate.isInitialized(child));
  assertFalse(Hibernate.isInitialized(child.getChildren()));
  assertFalse(Hibernate.isInitialized(child.getParent()));
  assertTrue(s1.contains(child));
  s1=applyNonFlushedChangesToNewSessionCloseOldSession(s1);
  child=(Node)getOldToNewEntityRefMap().get(((HibernateProxy)child).getHibernateLazyInitializer().getImplementation());
  s1.evict(child);
  assertFalse(s1.contains(child));
  assertTrue(s1.contains(child.getParent()));
  javax.transaction.Transaction tx1=SimpleJtaTransactionManagerImpl.getInstance().suspend();
  SimpleJtaTransactionManagerImpl.getInstance().begin();
  Session s2=openSession();
  try {
    s2.getTransaction().begin();
    s2.saveOrUpdate(child);
    fail();
  }
 catch (  HibernateException ex) {
  }
 finally {
    SimpleJtaTransactionManagerImpl.getInstance().rollback();
  }
  s1.evict(child.getParent());
  assertFalse(s1.contains(child.getParent()));
  SimpleJtaTransactionManagerImpl.getInstance().begin();
  s2=openSession();
  s2.saveOrUpdate(child);
  s2=applyNonFlushedChangesToNewSessionCloseOldSession(s2);
  child=(Node)getOldToNewEntityRefMap().get(child);
  assertTrue(s2.contains(child));
  assertFalse(s1.contains(child));
  assertTrue(s2.contains(child.getParent()));
  assertFalse(s1.contains(child.getParent()));
  assertFalse(Hibernate.isInitialized(child.getChildren()));
  assertFalse(Hibernate.isInitialized(child.getParent()));
  assertEquals(1,child.getChildren().size());
  assertEquals("1:parent",child.getParent().getName());
  assertTrue(Hibernate.isInitialized(child.getChildren()));
  assertFalse(Hibernate.isInitialized(child.getParent()));
  assertNull(child.getParent().getDescription());
  assertTrue(Hibernate.isInitialized(child.getParent()));
  s1=applyNonFlushedChangesToNewSessionCloseOldSession(s1);
  s2=applyNonFlushedChangesToNewSessionCloseOldSession(s2);
  javax.transaction.Transaction tx2=SimpleJtaTransactionManagerImpl.getInstance().suspend();
  SimpleJtaTransactionManagerImpl.getInstance().resume(tx1);
  tx1.commit();
  SimpleJtaTransactionManagerImpl.getInstance().resume(tx2);
  tx2.commit();
  SimpleJtaTransactionManagerImpl.getInstance().begin();
  s=openSession();
  s.delete(s.get(Node.class,"3:grandchild"));
  s.delete(s.get(Node.class,"2:child"));
  s.delete(s.get(Node.class,"1:parent"));
  SimpleJtaTransactionManagerImpl.getInstance().commit();
}
