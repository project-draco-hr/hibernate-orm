{
  IntegralDataTypeHolder value=IdentifierGeneratorHelper.getIntegralDataTypeHolder(identifierType.getReturnedClass());
  int rows;
  do {
    SQL_STATEMENT_LOGGER.logStatement(selectQuery,FormatStyle.BASIC);
    PreparedStatement selectPS=conn.prepareStatement(selectQuery);
    try {
      selectPS.setString(1,segmentValue);
      ResultSet selectRS=selectPS.executeQuery();
      if (!selectRS.next()) {
        value.initialize(initialValue);
        PreparedStatement insertPS=null;
        try {
          SQL_STATEMENT_LOGGER.logStatement(insertQuery,FormatStyle.BASIC);
          insertPS=conn.prepareStatement(insertQuery);
          insertPS.setString(1,segmentValue);
          value.bind(insertPS,2);
          insertPS.execute();
        }
  finally {
          if (insertPS != null) {
            insertPS.close();
          }
        }
      }
 else {
        value.initialize(selectRS,1);
      }
      selectRS.close();
    }
 catch (    SQLException sqle) {
      LOG.unableToReadOrInitHiValue(sqle);
      throw sqle;
    }
 finally {
      selectPS.close();
    }
    SQL_STATEMENT_LOGGER.logStatement(updateQuery,FormatStyle.BASIC);
    PreparedStatement updatePS=conn.prepareStatement(updateQuery);
    try {
      final IntegralDataTypeHolder updateValue=value.copy();
      if (optimizer.applyIncrementSizeToSourceValues()) {
        updateValue.add(incrementSize);
      }
 else {
        updateValue.increment();
      }
      updateValue.bind(updatePS,1);
      value.bind(updatePS,2);
      updatePS.setString(3,segmentValue);
      rows=updatePS.executeUpdate();
    }
 catch (    SQLException sqle) {
      LOG.unableToUpdateQueryHiValue(tableName,sqle);
      throw sqle;
    }
 finally {
      updatePS.close();
    }
  }
 while (rows == 0);
  accessCount++;
  return value;
}
