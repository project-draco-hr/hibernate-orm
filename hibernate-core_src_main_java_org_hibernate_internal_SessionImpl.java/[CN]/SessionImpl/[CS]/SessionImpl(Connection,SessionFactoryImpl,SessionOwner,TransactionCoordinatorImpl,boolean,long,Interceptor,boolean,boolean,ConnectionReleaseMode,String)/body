{
  super(factory,tenantIdentifier);
  this.timestamp=timestamp;
  this.sessionOwner=sessionOwner;
  this.interceptor=interceptor == null ? EmptyInterceptor.INSTANCE : interceptor;
  this.actionQueue=new ActionQueue(this);
  this.persistenceContext=new StatefulPersistenceContext(this);
  this.autoCloseSessionEnabled=autoCloseSessionEnabled;
  this.flushBeforeCompletionEnabled=flushBeforeCompletionEnabled;
  if (transactionCoordinator == null) {
    this.isTransactionCoordinatorShared=false;
    this.connectionReleaseMode=connectionReleaseMode;
    this.autoJoinTransactions=autoJoinTransactions;
    this.transactionCoordinator=new TransactionCoordinatorImpl(connection,this);
    this.transactionCoordinator.getJdbcCoordinator().getLogicalConnection().addObserver(new ConnectionObserverStatsBridge(factory));
  }
 else {
    if (connection != null) {
      throw new SessionException("Cannot simultaneously share transaction context and specify connection");
    }
    this.transactionCoordinator=transactionCoordinator;
    this.isTransactionCoordinatorShared=true;
    this.autoJoinTransactions=false;
    if (autoJoinTransactions) {
      LOG.debug("Session creation specified 'autoJoinTransactions', which is invalid in conjunction " + "with sharing JDBC connection between sessions; ignoring");
    }
    if (connectionReleaseMode != transactionCoordinator.getJdbcCoordinator().getLogicalConnection().getConnectionReleaseMode()) {
      LOG.debug("Session creation specified 'connectionReleaseMode', which is invalid in conjunction " + "with sharing JDBC connection between sessions; ignoring");
    }
    this.connectionReleaseMode=transactionCoordinator.getJdbcCoordinator().getLogicalConnection().getConnectionReleaseMode();
    transactionObserver=new TransactionObserver(){
      @Override public void afterBegin(      TransactionImplementor transaction){
      }
      @Override public void beforeCompletion(      TransactionImplementor transaction){
        if (isOpen() && flushBeforeCompletionEnabled) {
          SessionImpl.this.managedFlush();
        }
        beforeTransactionCompletion(transaction);
      }
      @Override public void afterCompletion(      boolean successful,      TransactionImplementor transaction){
        afterTransactionCompletion(transaction,successful);
        if (isOpen() && autoCloseSessionEnabled) {
          managedClose();
        }
        transactionCoordinator.removeObserver(this);
      }
    }
;
    transactionCoordinator.addObserver(transactionObserver);
  }
  loadQueryInfluencers=new LoadQueryInfluencers(factory);
  if (factory.getStatistics().isStatisticsEnabled()) {
    factory.getStatisticsImplementor().openSession();
  }
  if (tracing)   LOG.tracef("Opened session at timestamp: %s",timestamp);
}
