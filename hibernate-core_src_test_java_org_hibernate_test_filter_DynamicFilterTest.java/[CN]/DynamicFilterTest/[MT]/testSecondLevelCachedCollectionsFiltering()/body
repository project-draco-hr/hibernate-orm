{
  TestData testData=new TestData();
  testData.prepare();
  Session session=openSession();
  long ts=((SessionImplementor)session).getTimestamp();
  Salesperson sp=(Salesperson)session.load(Salesperson.class,testData.steveId);
  Hibernate.initialize(sp.getOrders());
  CollectionPersister persister=sessionFactory().getCollectionPersister(Salesperson.class.getName() + ".orders");
  assertTrue("No cache for collection",persister.hasCache());
  CollectionRegionAccessStrategy cache=persister.getCacheAccessStrategy();
  Object cacheKey=cache.generateCacheKey(testData.steveId,persister,sessionFactory(),session.getTenantIdentifier());
  CollectionCacheEntry cachedData=(CollectionCacheEntry)cache.get((SessionImplementor)session,cacheKey,ts);
  assertNotNull("collection was not in cache",cachedData);
  session.close();
  session=openSession();
  ts=((SessionImplementor)session).getTimestamp();
  session.enableFilter("fulfilledOrders").setParameter("asOfDate",testData.lastMonth.getTime());
  sp=(Salesperson)session.createQuery("from Salesperson as s where s.id = :id").setLong("id",testData.steveId).uniqueResult();
  assertEquals("Filtered-collection not bypassing 2L-cache",1,sp.getOrders().size());
  Object cacheKey2=cache.generateCacheKey(testData.steveId,persister,sessionFactory(),session.getTenantIdentifier());
  CollectionCacheEntry cachedData2=(CollectionCacheEntry)persister.getCacheAccessStrategy().get((SessionImplementor)session,cacheKey2,ts);
  assertNotNull("collection no longer in cache!",cachedData2);
  assertSame("Different cache values!",cachedData,cachedData2);
  session.close();
  session=openSession();
  session.enableFilter("fulfilledOrders").setParameter("asOfDate",testData.lastMonth.getTime());
  sp=(Salesperson)session.load(Salesperson.class,testData.steveId);
  assertEquals("Filtered-collection not bypassing 2L-cache",1,sp.getOrders().size());
  session.close();
  session=openSession();
  sp=(Salesperson)session.load(Salesperson.class,testData.steveId);
  assertEquals("Actual cached version got over-written",2,sp.getOrders().size());
  session.close();
  testData.release();
}
