{
  final EntityType<Cat> cat=factory.getMetamodel().entity(Cat.class);
  assertNotNull(cat);
  assertEquals(7,cat.getAttributes().size());
  assertEquals(1,cat.getDeclaredAttributes().size());
  assertTrue(cat.hasVersionAttribute());
  assertEquals("version",cat.getVersion(Long.class).getName());
  verifyDeclaredVersiobnNotPresent(cat);
  verifyDeclaredIdNotPresentAndIdPresent(cat);
  assertEquals(Type.PersistenceType.MAPPED_SUPERCLASS,cat.getSupertype().getPersistenceType());
  MappedSuperclassType<Cattish> cattish=(MappedSuperclassType<Cattish>)cat.getSupertype();
  assertEquals(6,cattish.getAttributes().size());
  assertEquals(1,cattish.getDeclaredAttributes().size());
  assertTrue(cattish.hasVersionAttribute());
  assertEquals("version",cattish.getVersion(Long.class).getName());
  verifyDeclaredVersiobnNotPresent(cattish);
  verifyDeclaredIdNotPresentAndIdPresent(cattish);
  assertEquals(Type.PersistenceType.ENTITY,cattish.getSupertype().getPersistenceType());
  EntityType<Feline> feline=(EntityType<Feline>)cattish.getSupertype();
  assertEquals(5,feline.getAttributes().size());
  assertEquals(1,feline.getDeclaredAttributes().size());
  assertTrue(feline.hasVersionAttribute());
  assertEquals("version",feline.getVersion(Long.class).getName());
  verifyDeclaredVersiobnNotPresent(feline);
  verifyDeclaredIdNotPresentAndIdPresent(feline);
  assertEquals(Type.PersistenceType.MAPPED_SUPERCLASS,feline.getSupertype().getPersistenceType());
  MappedSuperclassType<Animal> animal=(MappedSuperclassType<Animal>)feline.getSupertype();
  assertEquals(4,animal.getAttributes().size());
  assertEquals(2,animal.getDeclaredAttributes().size());
  assertTrue(animal.hasVersionAttribute());
  assertEquals("version",animal.getVersion(Long.class).getName());
  verifyDeclaredVersiobnNotPresent(animal);
  assertEquals("id",animal.getId(Long.class).getName());
  assertEquals("id",animal.getDeclaredId(Long.class).getName());
  assertEquals(Type.PersistenceType.MAPPED_SUPERCLASS,animal.getSupertype().getPersistenceType());
  MappedSuperclassType<Thing> thing=(MappedSuperclassType<Thing>)animal.getSupertype();
  assertEquals(2,thing.getAttributes().size());
  assertEquals(2,thing.getDeclaredAttributes().size());
  final SingularAttribute<Thing,Double> weight=thing.getDeclaredSingularAttribute("weight",Double.class);
  assertEquals(Double.class,weight.getJavaType());
  assertEquals("version",thing.getVersion(Long.class).getName());
  assertEquals("version",thing.getDeclaredVersion(Long.class).getName());
  assertNull(thing.getId(Long.class));
  assertNull(thing.getSupertype());
}
