{
  final EntityType<Fridge> fridgeType=factory.getMetamodel().entity(Fridge.class);
  assertEquals(Fridge.class,fridgeType.getBindableJavaType());
  assertEquals(Bindable.BindableType.ENTITY_TYPE,fridgeType.getBindableType());
  assertNotNull(fridgeType.getDeclaredSingularAttribute("temperature",Integer.class));
  assertNotNull(fridgeType.getDeclaredSingularAttribute("temperature"));
  assertNotNull(fridgeType.getDeclaredAttribute("temperature"));
  final SingularAttribute<Fridge,Long> id=fridgeType.getDeclaredId(Long.class);
  assertNotNull(id);
  assertTrue(id.isId());
  try {
    fridgeType.getDeclaredId(java.util.Date.class);
    fail("expecting failure");
  }
 catch (  IllegalArgumentException ignore) {
  }
  final SingularAttribute<? super Fridge,Long> id2=fridgeType.getId(Long.class);
  assertNotNull(id2);
  assertEquals(Fridge.class.getName(),fridgeType.getName());
  assertEquals(Long.class,fridgeType.getIdType().getJavaType());
  assertTrue(fridgeType.hasSingleIdAttribute());
  assertFalse(fridgeType.hasVersionAttribute());
  assertEquals(Type.PersistenceType.ENTITY,fridgeType.getPersistenceType());
  final EntityType<House> houseType=factory.getMetamodel().entity(House.class);
  assertTrue(houseType.hasSingleIdAttribute());
  final SingularAttribute<House,House.Key> houseId=houseType.getDeclaredId(House.Key.class);
  assertNotNull(houseId);
  assertTrue(houseId.isId());
  assertEquals(Attribute.PersistentAttributeType.EMBEDDED,houseId.getPersistentAttributeType());
  final EntityType<Person> personType=factory.getMetamodel().entity(Person.class);
  assertFalse(personType.hasSingleIdAttribute());
  final Set<SingularAttribute<? super Person,?>> ids=personType.getIdClassAttributes();
  assertNotNull(ids);
  assertEquals(2,ids.size());
  for (  SingularAttribute<? super Person,?> localId : ids) {
    assertTrue(localId.isId());
  }
  final EntityType<FoodItem> foodType=factory.getMetamodel().entity(FoodItem.class);
  assertTrue(foodType.hasVersionAttribute());
  final SingularAttribute<? super FoodItem,Long> version=foodType.getVersion(Long.class);
  assertNotNull(version);
  assertTrue(version.isVersion());
}
