{
  Session s=openSession();
  s.beginTransaction();
  Foo foo=new Foo();
  s.save(foo);
  List list=s.createQuery("select foo from Foo foo, Fee fee where foo.dependent = fee order by foo.string desc, foo.component.count asc, fee.id").list();
  assertTrue("order by",list.size() == 1);
  Foo foo2=new Foo();
  s.save(foo2);
  foo.setFoo(foo2);
  list=s.createQuery("select foo.foo, foo.dependent from Foo foo order by foo.foo.string desc, foo.component.count asc, foo.dependent.id").list();
  assertTrue("order by",list.size() == 1);
  list=s.createQuery("select foo from Foo foo order by foo.dependent.id, foo.dependent.fi").list();
  assertTrue("order by",list.size() == 2);
  s.delete(foo);
  s.delete(foo2);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  Many manyB=new Many();
  s.save(manyB);
  One oneB=new One();
  s.save(oneB);
  oneB.setValue("b");
  manyB.setOne(oneB);
  Many manyA=new Many();
  s.save(manyA);
  One oneA=new One();
  s.save(oneA);
  oneA.setValue("a");
  manyA.setOne(oneA);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  List results=s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list();
  assertEquals(2,results.size());
  assertEquals("'a' isn't first element","a",((One)results.get(0)).getValue());
  assertEquals("'b' isn't second element","b",((One)results.get(1)).getValue());
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  results=s.createQuery("SELECT many.one FROM " + Many.class.getName() + " many ORDER BY many.one.value ASC, many.one.id").list();
  assertEquals(2,results.size());
  assertEquals(2,results.size());
  assertEquals("'a' isn't first element","a",((One)results.get(0)).getValue());
  assertEquals("'b' isn't second element","b",((One)results.get(1)).getValue());
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  oneA=(One)s.load(One.class,oneA.getKey());
  manyA=(Many)s.load(Many.class,manyA.getKey());
  oneB=(One)s.load(One.class,oneB.getKey());
  manyB=(Many)s.load(Many.class,manyB.getKey());
  s.delete(manyA);
  s.delete(oneA);
  s.delete(manyB);
  s.delete(oneB);
  s.getTransaction().commit();
  s.close();
}
