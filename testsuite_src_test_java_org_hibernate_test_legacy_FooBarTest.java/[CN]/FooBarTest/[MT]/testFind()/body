{
  Session s=openSession();
  Transaction txn=s.beginTransaction();
  Bar bar=new Bar();
  s.save(bar);
  bar.setBarString("bar bar");
  bar.setString("xxx");
  Foo foo=new Foo();
  s.save(foo);
  foo.setString("foo bar");
  s.save(new Foo());
  s.save(new Bar());
  List list1=s.createQuery("select foo from Foo foo where foo.string='foo bar'").list();
  assertTrue("find size",list1.size() == 1);
  assertTrue("find ==",list1.get(0) == foo);
  List list2=s.createQuery("from Foo foo order by foo.string, foo.date").list();
  assertTrue("find size",list2.size() == 4);
  list1=s.createQuery("from Foo foo where foo.class='B'").list();
  assertTrue("class special property",list1.size() == 2);
  list1=s.createQuery("from Foo foo where foo.class=Bar").list();
  assertTrue("class special property",list1.size() == 2);
  list1=s.createQuery("from Foo foo where foo.class=Bar").list();
  list2=s.createQuery("select bar from Bar bar, Foo foo where bar.string = foo.string and not bar=foo").list();
  assertTrue("class special property",list1.size() == 2);
  assertTrue("select from a subclass",list2.size() == 1);
  Trivial t=new Trivial();
  s.save(t);
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  list1=s.createQuery("from Foo foo where foo.string='foo bar'").list();
  assertTrue("find size",list1.size() == 1);
  assertTrue("find equals",((Foo)list1.get(0)).equalsFoo(foo));
  list2=s.createQuery("select foo from Foo foo").list();
  assertTrue("find size",list2.size() == 5);
  List list3=s.createQuery("from Bar bar where bar.barString='bar bar'").list();
  assertTrue("find size",list3.size() == 1);
  assertTrue("find same instance",list2.contains(list1.get(0)) && list2.contains(list2.get(0)));
  assertTrue(s.createQuery("from Trivial").list().size() == 1);
  doDelete(s,"from Trivial");
  list2=s.createQuery("from Foo foo where foo.date = ?").setParameter(0,new java.sql.Date(123),Hibernate.DATE).list();
  assertTrue("find by date",list2.size() == 4);
  Iterator iter=list2.iterator();
  while (iter.hasNext()) {
    s.delete(iter.next());
  }
  list2=s.createQuery("from Foo foo").list();
  assertTrue("find deleted",list2.size() == 0);
  txn.commit();
  s.close();
}
