{
  Session s=openSession();
  s.beginTransaction();
  Baz baz1=new Baz();
  s.save(baz1);
  Baz baz2=new Baz();
  s.save(baz2);
  baz1.setIntArray(new int[]{1,2,3,4});
  baz1.setFooSet(new HashSet());
  Foo foo=new Foo();
  s.save(foo);
  baz1.getFooSet().add(foo);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  baz2=(Baz)s.load(Baz.class,baz2.getCode());
  baz1=(Baz)s.load(Baz.class,baz1.getCode());
  baz2.setFooSet(baz1.getFooSet());
  baz1.setFooSet(null);
  baz2.setIntArray(baz1.getIntArray());
  baz1.setIntArray(null);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  baz2=(Baz)s.load(Baz.class,baz2.getCode());
  baz1=(Baz)s.load(Baz.class,baz1.getCode());
  assertTrue("unkeyed reachability",baz2.getIntArray().length == 4);
  assertTrue("unkeyed reachability",baz2.getFooSet().size() == 1);
  assertTrue("unkeyed reachability",baz1.getIntArray().length == 0);
  assertTrue("unkeyed reachability",baz1.getFooSet().size() == 0);
  FooProxy fp=(FooProxy)baz2.getFooSet().iterator().next();
  s.delete(fp);
  s.delete(baz1);
  s.delete(baz2);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  baz1=new Baz();
  s.save(baz1);
  baz2=new Baz();
  s.save(baz2);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  baz2=(Baz)s.load(Baz.class,baz2.getCode());
  baz1=(Baz)s.load(Baz.class,baz1.getCode());
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  baz2=(Baz)s.load(Baz.class,baz2.getCode());
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  baz2=(Baz)s.load(Baz.class,baz2.getCode());
  baz1=(Baz)s.load(Baz.class,baz1.getCode());
  s.delete(baz1);
  s.delete(baz2);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  baz1=new Baz();
  s.save(baz1);
  baz2=new Baz();
  s.save(baz2);
  Foo foo1=new Foo();
  Foo foo2=new Foo();
  s.save(foo1);
  s.save(foo2);
  baz1.setFooArray(new Foo[]{foo1,null,foo2});
  baz1.setStringDateMap(new TreeMap());
  baz1.getStringDateMap().put("today",new Date(System.currentTimeMillis()));
  baz1.getStringDateMap().put("tomorrow",new Date(System.currentTimeMillis() + 86400000));
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  baz2=(Baz)s.load(Baz.class,baz2.getCode());
  baz1=(Baz)s.load(Baz.class,baz1.getCode());
  baz2.setFooArray(baz1.getFooArray());
  baz1.setFooArray(null);
  baz2.setStringDateMap(baz1.getStringDateMap());
  baz1.setStringDateMap(null);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  baz2=(Baz)s.load(Baz.class,baz2.getCode());
  baz1=(Baz)s.load(Baz.class,baz1.getCode());
  assertTrue("reachability",baz2.getStringDateMap().size() == 2);
  assertTrue("reachability",baz2.getFooArray().length == 3);
  assertTrue("reachability",baz1.getStringDateMap().size() == 0);
  assertTrue("reachability",baz1.getFooArray().length == 0);
  assertTrue("null element",baz2.getFooArray()[1] == null);
  assertTrue("non-null element",baz2.getStringDateMap().get("today") != null);
  assertTrue("non-null element",baz2.getStringDateMap().get("tomorrow") != null);
  assertTrue("null element",baz2.getStringDateMap().get("foo") == null);
  s.delete(baz2.getFooArray()[0]);
  s.delete(baz2.getFooArray()[2]);
  s.delete(baz1);
  s.delete(baz2);
  s.flush();
  assertTrue(s.createQuery("from java.lang.Object").list().size() == 0);
  s.getTransaction().commit();
  s.close();
}
