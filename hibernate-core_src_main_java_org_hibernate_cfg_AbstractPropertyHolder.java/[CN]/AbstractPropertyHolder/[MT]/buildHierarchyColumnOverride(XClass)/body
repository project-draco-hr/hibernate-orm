{
  XClass current=element;
  Map<String,Column[]> columnOverride=new HashMap<String,Column[]>();
  Map<String,JoinColumn[]> joinColumnOverride=new HashMap<String,JoinColumn[]>();
  Map<String,JoinTable> joinTableOverride=new HashMap<String,JoinTable>();
  while (current != null && !context.getBuildingOptions().getReflectionManager().toXClass(Object.class).equals(current)) {
    if (current.isAnnotationPresent(Entity.class) || current.isAnnotationPresent(MappedSuperclass.class) || current.isAnnotationPresent(Embeddable.class)) {
      Map<String,Column[]> currentOverride=buildColumnOverride(current,getPath());
      Map<String,JoinColumn[]> currentJoinOverride=buildJoinColumnOverride(current,getPath());
      Map<String,JoinTable> currentJoinTableOverride=buildJoinTableOverride(current,getPath());
      currentOverride.putAll(columnOverride);
      currentJoinOverride.putAll(joinColumnOverride);
      currentJoinTableOverride.putAll(joinTableOverride);
      columnOverride=currentOverride;
      joinColumnOverride=currentJoinOverride;
      joinTableOverride=currentJoinTableOverride;
    }
    current=current.getSuperclass();
  }
  holderColumnOverride=columnOverride.size() > 0 ? columnOverride : null;
  holderJoinColumnOverride=joinColumnOverride.size() > 0 ? joinColumnOverride : null;
  holderJoinTableOverride=joinTableOverride.size() > 0 ? joinTableOverride : null;
}
