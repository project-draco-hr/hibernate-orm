{
  super();
  querySequenceString="select sequence_name from information_schema.sequences";
  try {
    final Class constants=ReflectHelper.classForName("org.h2.engine.Constants");
    final int majorVersion=(Integer)constants.getDeclaredField("VERSION_MAJOR").get(null);
    final int minorVersion=(Integer)constants.getDeclaredField("VERSION_MINOR").get(null);
    final int buildId=(Integer)constants.getDeclaredField("BUILD_ID").get(null);
    if (buildId < 32) {
      querySequenceString="select name from information_schema.sequences";
    }
    if (!(majorVersion > 1 || minorVersion > 2 || buildId >= 139)) {
      log.warn("The {} version of H2 implements temporary table creation such that it commits " + "current transaction; multi-table, bulk hql/jpaql will not work properly",(majorVersion + "." + minorVersion+ "."+ buildId));
    }
  }
 catch (  Exception e) {
  }
  registerColumnType(Types.BOOLEAN,"boolean");
  registerColumnType(Types.BIGINT,"bigint");
  registerColumnType(Types.BINARY,"binary");
  registerColumnType(Types.BIT,"boolean");
  registerColumnType(Types.CHAR,"char($l)");
  registerColumnType(Types.DATE,"date");
  registerColumnType(Types.DECIMAL,"decimal($p,$s)");
  registerColumnType(Types.NUMERIC,"decimal($p,$s)");
  registerColumnType(Types.DOUBLE,"double");
  registerColumnType(Types.FLOAT,"float");
  registerColumnType(Types.INTEGER,"integer");
  registerColumnType(Types.LONGVARBINARY,"longvarbinary");
  registerColumnType(Types.LONGVARCHAR,"longvarchar");
  registerColumnType(Types.REAL,"real");
  registerColumnType(Types.SMALLINT,"smallint");
  registerColumnType(Types.TINYINT,"tinyint");
  registerColumnType(Types.TIME,"time");
  registerColumnType(Types.TIMESTAMP,"timestamp");
  registerColumnType(Types.VARCHAR,"varchar($l)");
  registerColumnType(Types.VARBINARY,"binary($l)");
  registerColumnType(Types.BLOB,"blob");
  registerColumnType(Types.CLOB,"clob");
  registerFunction("avg",new AvgWithArgumentCastFunction("double"));
  registerFunction("acos",new StandardSQLFunction("acos",StandardBasicTypes.DOUBLE));
  registerFunction("asin",new StandardSQLFunction("asin",StandardBasicTypes.DOUBLE));
  registerFunction("atan",new StandardSQLFunction("atan",StandardBasicTypes.DOUBLE));
  registerFunction("atan2",new StandardSQLFunction("atan2",StandardBasicTypes.DOUBLE));
  registerFunction("bitand",new StandardSQLFunction("bitand",StandardBasicTypes.INTEGER));
  registerFunction("bitor",new StandardSQLFunction("bitor",StandardBasicTypes.INTEGER));
  registerFunction("bitxor",new StandardSQLFunction("bitxor",StandardBasicTypes.INTEGER));
  registerFunction("ceiling",new StandardSQLFunction("ceiling",StandardBasicTypes.DOUBLE));
  registerFunction("cos",new StandardSQLFunction("cos",StandardBasicTypes.DOUBLE));
  registerFunction("compress",new StandardSQLFunction("compress",StandardBasicTypes.BINARY));
  registerFunction("cot",new StandardSQLFunction("cot",StandardBasicTypes.DOUBLE));
  registerFunction("decrypt",new StandardSQLFunction("decrypt",StandardBasicTypes.BINARY));
  registerFunction("degrees",new StandardSQLFunction("degrees",StandardBasicTypes.DOUBLE));
  registerFunction("encrypt",new StandardSQLFunction("encrypt",StandardBasicTypes.BINARY));
  registerFunction("exp",new StandardSQLFunction("exp",StandardBasicTypes.DOUBLE));
  registerFunction("expand",new StandardSQLFunction("compress",StandardBasicTypes.BINARY));
  registerFunction("floor",new StandardSQLFunction("floor",StandardBasicTypes.DOUBLE));
  registerFunction("hash",new StandardSQLFunction("hash",StandardBasicTypes.BINARY));
  registerFunction("log",new StandardSQLFunction("log",StandardBasicTypes.DOUBLE));
  registerFunction("log10",new StandardSQLFunction("log10",StandardBasicTypes.DOUBLE));
  registerFunction("pi",new NoArgSQLFunction("pi",StandardBasicTypes.DOUBLE));
  registerFunction("power",new StandardSQLFunction("power",StandardBasicTypes.DOUBLE));
  registerFunction("radians",new StandardSQLFunction("radians",StandardBasicTypes.DOUBLE));
  registerFunction("rand",new NoArgSQLFunction("rand",StandardBasicTypes.DOUBLE));
  registerFunction("round",new StandardSQLFunction("round",StandardBasicTypes.DOUBLE));
  registerFunction("roundmagic",new StandardSQLFunction("roundmagic",StandardBasicTypes.DOUBLE));
  registerFunction("sign",new StandardSQLFunction("sign",StandardBasicTypes.INTEGER));
  registerFunction("sin",new StandardSQLFunction("sin",StandardBasicTypes.DOUBLE));
  registerFunction("tan",new StandardSQLFunction("tan",StandardBasicTypes.DOUBLE));
  registerFunction("truncate",new StandardSQLFunction("truncate",StandardBasicTypes.DOUBLE));
  registerFunction("ascii",new StandardSQLFunction("ascii",StandardBasicTypes.INTEGER));
  registerFunction("char",new StandardSQLFunction("char",StandardBasicTypes.CHARACTER));
  registerFunction("concat",new VarArgsSQLFunction(StandardBasicTypes.STRING,"(","||",")"));
  registerFunction("difference",new StandardSQLFunction("difference",StandardBasicTypes.INTEGER));
  registerFunction("hextoraw",new StandardSQLFunction("hextoraw",StandardBasicTypes.STRING));
  registerFunction("insert",new StandardSQLFunction("lower",StandardBasicTypes.STRING));
  registerFunction("left",new StandardSQLFunction("left",StandardBasicTypes.STRING));
  registerFunction("lcase",new StandardSQLFunction("lcase",StandardBasicTypes.STRING));
  registerFunction("ltrim",new StandardSQLFunction("ltrim",StandardBasicTypes.STRING));
  registerFunction("octet_length",new StandardSQLFunction("octet_length",StandardBasicTypes.INTEGER));
  registerFunction("position",new StandardSQLFunction("position",StandardBasicTypes.INTEGER));
  registerFunction("rawtohex",new StandardSQLFunction("rawtohex",StandardBasicTypes.STRING));
  registerFunction("repeat",new StandardSQLFunction("repeat",StandardBasicTypes.STRING));
  registerFunction("replace",new StandardSQLFunction("replace",StandardBasicTypes.STRING));
  registerFunction("right",new StandardSQLFunction("right",StandardBasicTypes.STRING));
  registerFunction("rtrim",new StandardSQLFunction("rtrim",StandardBasicTypes.STRING));
  registerFunction("soundex",new StandardSQLFunction("soundex",StandardBasicTypes.STRING));
  registerFunction("space",new StandardSQLFunction("space",StandardBasicTypes.STRING));
  registerFunction("stringencode",new StandardSQLFunction("stringencode",StandardBasicTypes.STRING));
  registerFunction("stringdecode",new StandardSQLFunction("stringdecode",StandardBasicTypes.STRING));
  registerFunction("stringtoutf8",new StandardSQLFunction("stringtoutf8",StandardBasicTypes.BINARY));
  registerFunction("ucase",new StandardSQLFunction("ucase",StandardBasicTypes.STRING));
  registerFunction("utf8tostring",new StandardSQLFunction("utf8tostring",StandardBasicTypes.STRING));
  registerFunction("curdate",new NoArgSQLFunction("curdate",StandardBasicTypes.DATE));
  registerFunction("curtime",new NoArgSQLFunction("curtime",StandardBasicTypes.TIME));
  registerFunction("curtimestamp",new NoArgSQLFunction("curtimestamp",StandardBasicTypes.TIME));
  registerFunction("current_date",new NoArgSQLFunction("current_date",StandardBasicTypes.DATE));
  registerFunction("current_time",new NoArgSQLFunction("current_time",StandardBasicTypes.TIME));
  registerFunction("current_timestamp",new NoArgSQLFunction("current_timestamp",StandardBasicTypes.TIMESTAMP));
  registerFunction("datediff",new StandardSQLFunction("datediff",StandardBasicTypes.INTEGER));
  registerFunction("dayname",new StandardSQLFunction("dayname",StandardBasicTypes.STRING));
  registerFunction("dayofmonth",new StandardSQLFunction("dayofmonth",StandardBasicTypes.INTEGER));
  registerFunction("dayofweek",new StandardSQLFunction("dayofweek",StandardBasicTypes.INTEGER));
  registerFunction("dayofyear",new StandardSQLFunction("dayofyear",StandardBasicTypes.INTEGER));
  registerFunction("monthname",new StandardSQLFunction("monthname",StandardBasicTypes.STRING));
  registerFunction("now",new NoArgSQLFunction("now",StandardBasicTypes.TIMESTAMP));
  registerFunction("quarter",new StandardSQLFunction("quarter",StandardBasicTypes.INTEGER));
  registerFunction("week",new StandardSQLFunction("week",StandardBasicTypes.INTEGER));
  registerFunction("database",new NoArgSQLFunction("database",StandardBasicTypes.STRING));
  registerFunction("user",new NoArgSQLFunction("user",StandardBasicTypes.STRING));
  getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE,DEFAULT_BATCH_SIZE);
}
