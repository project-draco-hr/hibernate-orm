{
  final String unqualifiedPackageName=mappingBinder.getPackageName();
  final Element rootElement=metadataXml.getDocumentTree().getRootElement();
  List<String> awaitingExtends=new ArrayList<String>();
  Iterator[] subclasses=new Iterator[3];
  subclasses[0]=rootElement.elementIterator("subclass");
  subclasses[1]=rootElement.elementIterator("joined-subclass");
  subclasses[2]=rootElement.elementIterator("union-subclass");
  Iterator iterator=new JoinedIterator(subclasses);
  while (iterator.hasNext()) {
    final Element element=(Element)iterator.next();
    final String extendsName=element.attributeValue("extends");
    if (getMetadata().getEntityBinding(extendsName) == null && getMetadata().getEntityBinding(HbmHelper.getClassName(extendsName,unqualifiedPackageName)) == null) {
      awaitingExtends.add(extendsName);
    }
  }
  if (!awaitingExtends.isEmpty()) {
    final java.util.Set<String> set=new HashSet<String>(awaitingExtends);
    EntityElementHandler handler=new EntityElementHandler(){
      public void handleEntity(      String entityName,      String className){
        if (entityName != null) {
          set.remove(entityName);
        }
 else {
          String fqn=HbmHelper.getClassName(className,unqualifiedPackageName);
          set.remove(fqn);
          if (unqualifiedPackageName != null) {
            set.remove(StringHelper.unqualify(fqn));
          }
        }
      }
    }
;
    recognizeEntities(rootElement,handler);
    awaitingExtends.clear();
    awaitingExtends.addAll(set);
  }
  return awaitingExtends;
}
