{
  final String methodName=method.getName();
  if ("getDatabaseProductName".equals(methodName)) {
    return options.databaseProductName;
  }
  if ("getDatabaseMajorVersion".equals(methodName)) {
    return Integer.valueOf(options.databaseMajorVersion);
  }
  if ("getDatabaseMinorVersion".equals(methodName)) {
    return Integer.valueOf(options.databaseMinorVersion);
  }
  if ("getConnection".equals(methodName)) {
    return connectionProxy;
  }
  if ("toString".equals(methodName)) {
    return "DatabaseMetaData proxy [db-name=" + options.databaseProductName + ", version="+ options.databaseMajorVersion+ "]";
  }
  if ("hashCode".equals(methodName)) {
    return Integer.valueOf(this.hashCode());
  }
  if ("supportsNamedParameters".equals(methodName)) {
    return options.supportsNamedParameters;
  }
  if ("supportsResultSetType".equals(methodName)) {
    return options.supportsResultSetType;
  }
  if ("supportsGetGeneratedKeys".equals(methodName)) {
    return options.supportsGetGeneratedKeys;
  }
  if ("supportsBatchUpdates".equals(methodName)) {
    return options.supportsBatchUpdates;
  }
  if ("dataDefinitionIgnoredInTransactions".equals(methodName)) {
    return options.dataDefinitionIgnoredInTransactions;
  }
  if ("dataDefinitionCausesTransactionCommit".equals(methodName)) {
    return options.dataDefinitionCausesTransactionCommit;
  }
  if ("getSQLKeywords".equals(methodName)) {
    return options.sqlKeywords;
  }
  if ("getSQLStateType".equals(methodName)) {
    return options.sqlStateType;
  }
  if ("locatorsUpdateCopy".equals(methodName)) {
    return options.locatorsUpdateCopy;
  }
  if ("getTypeInfo".equals(methodName)) {
    return EmptyResultSetHandler.makeProxy();
  }
  if ("storesLowerCaseIdentifiers".equals(methodName)) {
    return options.storesLowerCaseIdentifiers;
  }
  if ("storesUpperCaseIdentifiers".equals(methodName)) {
    return options.storesUpperCaseIdentifiers;
  }
  if ("getCatalogSeparator".equals(methodName)) {
    return options.catalogSeparator;
  }
  if ("isCatalogAtStart".equals(methodName)) {
    return options.isCatalogAtStart;
  }
  if (canThrowSQLException(method)) {
    throw new SQLException();
  }
 else {
    throw new UnsupportedOperationException();
  }
}
