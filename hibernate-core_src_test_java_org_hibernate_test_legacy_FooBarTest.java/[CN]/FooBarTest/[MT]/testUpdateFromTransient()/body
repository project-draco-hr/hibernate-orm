{
  Session s=openSession();
  s.beginTransaction();
  Fee fee1=new Fee();
  s.save(fee1);
  Fee fee2=new Fee();
  fee1.setFee(fee2);
  fee2.setFee(fee1);
  fee2.setFees(new HashSet());
  Fee fee3=new Fee();
  fee3.setFee(fee1);
  fee3.setAnotherFee(fee2);
  fee2.setAnotherFee(fee3);
  s.save(fee3);
  s.save(fee2);
  s.getTransaction().commit();
  s.close();
  fee1.setFi("changed");
  s=openSession();
  s.beginTransaction();
  s.saveOrUpdate(fee1);
  s.getTransaction().commit();
  s.close();
  Qux q=new Qux("quxxy");
  q.setTheKey(0);
  fee1.setQux(q);
  s=openSession();
  s.beginTransaction();
  s.saveOrUpdate(fee1);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  fee1=(Fee)s.load(Fee.class,fee1.getKey());
  assertTrue("updated from transient",fee1.getFi().equals("changed"));
  assertTrue("unsaved value",fee1.getQux() != null);
  s.delete(fee1.getQux());
  fee1.setQux(null);
  s.getTransaction().commit();
  s.close();
  fee2.setFi("CHANGED");
  fee2.getFees().add("an element");
  fee1.setFi("changed again");
  s=openSession();
  s.beginTransaction();
  s.saveOrUpdate(fee2);
  s.update(fee1,fee1.getKey());
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  Fee fee=new Fee();
  s.load(fee,fee2.getKey());
  fee1=(Fee)s.load(Fee.class,fee1.getKey());
  assertTrue("updated from transient",fee1.getFi().equals("changed again"));
  assertTrue("updated from transient",fee.getFi().equals("CHANGED"));
  assertTrue("updated collection",fee.getFees().contains("an element"));
  s.getTransaction().commit();
  s.close();
  fee.getFees().clear();
  fee.getFees().add("new element");
  fee1.setFee(null);
  s=openSession();
  s.beginTransaction();
  s.saveOrUpdate(fee);
  s.saveOrUpdate(fee1);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  s.load(fee,fee.getKey());
  assertTrue("update",fee.getAnotherFee() != null);
  assertTrue("update",fee.getFee() != null);
  assertTrue("update",fee.getAnotherFee().getFee() == fee.getFee());
  assertTrue("updated collection",fee.getFees().contains("new element"));
  assertTrue("updated collection",!fee.getFees().contains("an element"));
  s.getTransaction().commit();
  s.close();
  fee.setQux(new Qux("quxy"));
  s=openSession();
  s.beginTransaction();
  s.saveOrUpdate(fee);
  s.getTransaction().commit();
  s.close();
  fee.getQux().setStuff("xxx");
  s=openSession();
  s.beginTransaction();
  s.saveOrUpdate(fee);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  s.load(fee,fee.getKey());
  assertTrue("cascade update",fee.getQux() != null);
  assertTrue("cascade update",fee.getQux().getStuff().equals("xxx"));
  assertTrue("update",fee.getAnotherFee() != null);
  assertTrue("update",fee.getFee() != null);
  assertTrue("update",fee.getAnotherFee().getFee() == fee.getFee());
  fee.getAnotherFee().setAnotherFee(null);
  s.delete(fee);
  doDelete(s,"from Fee fee");
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  assertTrue(s.createQuery("from Fee fee").list().size() == 0);
  s.getTransaction().commit();
  s.close();
}
