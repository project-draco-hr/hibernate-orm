{
  Session s=openSession();
  s.beginTransaction();
  Qux q=new Qux();
  s.save(q);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  q=(Qux)s.load(Qux.class,q.getKey());
  s.getTransaction().commit();
  s.clear();
  s.beginTransaction();
  final Qux qToDelete=(Qux)s.load(Qux.class,q.getKey());
  ((EventSource)s).getActionQueue().registerProcess(new BeforeTransactionCompletionProcess(){
    @Override public void doBeforeTransactionCompletion(    SessionImplementor session){
      qToDelete.getFums().size();
    }
  }
);
  s.delete(qToDelete);
  boolean ok=false;
  try {
    s.getTransaction().commit();
  }
 catch (  LazyInitializationException e) {
    ok=true;
    s.getTransaction().rollback();
  }
catch (  TransactionException te) {
    if (te.getCause() instanceof LazyInitializationException) {
      ok=true;
    }
    s.getTransaction().rollback();
  }
 finally {
    s.close();
  }
  assertTrue("lazy collection should have blown in the beforeQuery trans completion",ok);
  s=openSession();
  s.beginTransaction();
  q=(Qux)s.load(Qux.class,q.getKey());
  s.delete(q);
  s.getTransaction().commit();
  s.close();
}
