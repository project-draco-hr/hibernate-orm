{
  super(mappingDocument);
  this.attributeRoleBase=container.getAttributeRoleBase();
  this.attributePathBase=container.getAttributePathBase();
  if (ToolingHintContainer.class.isInstance(jaxbEmbeddableMapping)) {
    this.toolingHintContext=Helper.collectToolingHints(container.getToolingHintContextBaselineForEmbeddable(),(ToolingHintContainer)jaxbEmbeddableMapping);
  }
 else {
    this.toolingHintContext=container.getToolingHintContextBaselineForEmbeddable();
  }
  this.jaxbEmbeddableMapping=jaxbEmbeddableMapping;
  this.isDynamic=isDynamic;
  this.isUnique=isUnique;
  final String typeName=isDynamic ? jaxbEmbeddableMapping.getClazz() : mappingDocument.qualifyClassName(jaxbEmbeddableMapping.getClazz());
  this.typeDescriptor=new JavaTypeDescriptor(){
    @Override public String getName(){
      return typeName;
    }
  }
;
  if (jaxbEmbeddableMapping.getTuplizer().isEmpty()) {
    tuplizerClassMap=Collections.emptyMap();
  }
 else {
    if (jaxbEmbeddableMapping.getTuplizer().size() > 1) {
      DeprecationLogger.DEPRECATION_LOGGER.logDeprecationOfMultipleEntityModeSupport();
    }
    tuplizerClassMap=new HashMap<EntityMode,String>();
    for (    JaxbHbmTuplizerType tuplizerBinding : jaxbEmbeddableMapping.getTuplizer()) {
      tuplizerClassMap.put(tuplizerBinding.getEntityMode(),tuplizerBinding.getClazz());
    }
  }
  this.attributeSources=new ArrayList<AttributeSource>();
  AttributesHelper.processAttributes(mappingDocument,new AttributesHelper.Callback(){
    @Override public AttributeSourceContainer getAttributeSourceContainer(){
      return EmbeddableSourceImpl.this;
    }
    @Override public void addAttributeSource(    AttributeSource attributeSource){
      attributeSources.add(attributeSource);
    }
    @Override public void registerIndexColumn(    String constraintName,    String logicalTableName,    String columnName){
    }
    @Override public void registerUniqueKeyColumn(    String constraintName,    String logicalTableName,    String columnName){
    }
  }
,attributeMappings,logicalTableName,naturalIdMutability);
}
