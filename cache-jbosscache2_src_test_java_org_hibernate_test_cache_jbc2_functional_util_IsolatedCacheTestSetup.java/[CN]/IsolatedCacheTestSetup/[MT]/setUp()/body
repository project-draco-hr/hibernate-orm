{
  super.setUp();
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  org.jgroups.ChannelFactory cf=new org.jgroups.JChannelFactory();
  cf.setMultiplexerConfig(DEF_JGROUPS_RESOURCE);
  org.jboss.cache.CacheManagerImpl cm=new org.jboss.cache.CacheManagerImpl(DEF_CACHE_FACTORY_RESOURCE,cf);
  cm.start();
  TestCacheInstanceManager.addTestCacheManager(DualNodeTestUtil.LOCAL,cm);
  Configuration cfg=cm.getConfigurationRegistry().getConfiguration(cacheConfig);
  Cache cache=new CustomClassLoaderCacheFactory(tccl).createCache(cfg,false);
  cache.getConfiguration().getRuntimeConfig().setMuxChannelFactory(cm.getChannelFactory());
  cm.registerCache(cache,cacheConfig);
  cf=new org.jgroups.JChannelFactory();
  cf.setMultiplexerConfig(DEF_JGROUPS_RESOURCE);
  cm=new org.jboss.cache.CacheManagerImpl(DEF_CACHE_FACTORY_RESOURCE,cf);
  cm.start();
  TestCacheInstanceManager.addTestCacheManager(DualNodeTestUtil.REMOTE,cm);
  cfg=cm.getConfigurationRegistry().getConfiguration(cacheConfig);
  cache=new CustomClassLoaderCacheFactory(tccl).createCache(cfg,false);
  cache.getConfiguration().getRuntimeConfig().setMuxChannelFactory(cm.getChannelFactory());
  cm.registerCache(cache,cacheConfig);
  SelectedClassnameClassLoader visible=new SelectedClassnameClassLoader(isolatedClasses,null,null,tccl);
  Thread.currentThread().setContextClassLoader(visible);
}
