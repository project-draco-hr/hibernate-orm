{
  if (ann == null)   return;
  ResultSetMappingDefinition definition=new ResultSetMappingDefinition(ann.name());
  LOG.debugf("Binding result set mapping: %s",definition.getName());
  int entityAliasIndex=0;
  for (  EntityResult entity : ann.entities()) {
    List<FieldResult> properties=new ArrayList<FieldResult>();
    List<String> propertyNames=new ArrayList<String>();
    for (    FieldResult field : entity.fields()) {
      String name=field.name();
      if (name.indexOf('.') == -1) {
        properties.add(field);
        propertyNames.add(name);
      }
 else {
        PersistentClass pc=context.getMetadataCollector().getEntityBinding(entity.entityClass().getName());
        if (pc == null) {
          throw new MappingException(String.format(Locale.ENGLISH,"Could not resolve entity [%s] referenced in SqlResultSetMapping [%s]",entity.entityClass().getName(),ann.name()));
        }
        int dotIndex=name.lastIndexOf('.');
        String reducedName=name.substring(0,dotIndex);
        Iterator parentPropItr=getSubPropertyIterator(pc,reducedName);
        List<String> followers=getFollowers(parentPropItr,reducedName,name);
        int index=propertyNames.size();
        for (        String follower : followers) {
          int currentIndex=getIndexOfFirstMatchingProperty(propertyNames,follower);
          index=currentIndex != -1 && currentIndex < index ? currentIndex : index;
        }
        propertyNames.add(index,name);
        properties.add(index,field);
      }
    }
    Set<String> uniqueReturnProperty=new HashSet<String>();
    Map<String,ArrayList<String>> propertyResultsTmp=new HashMap<String,ArrayList<String>>();
    for (    Object property : properties) {
      final FieldResult propertyresult=(FieldResult)property;
      final String name=propertyresult.name();
      if ("class".equals(name)) {
        throw new MappingException("class is not a valid property name to use in a @FieldResult, use @Entity(discriminatorColumn) instead");
      }
      if (uniqueReturnProperty.contains(name)) {
        throw new MappingException("duplicate @FieldResult for property " + name + " on @Entity "+ entity.entityClass().getName()+ " in "+ ann.name());
      }
      uniqueReturnProperty.add(name);
      final String quotingNormalizedColumnName=normalizeColumnQuoting(propertyresult.column());
      String key=StringHelper.root(name);
      ArrayList<String> intermediateResults=propertyResultsTmp.get(key);
      if (intermediateResults == null) {
        intermediateResults=new ArrayList<String>();
        propertyResultsTmp.put(key,intermediateResults);
      }
      intermediateResults.add(quotingNormalizedColumnName);
    }
    Map<String,String[]> propertyResults=new HashMap<String,String[]>();
    for (    Map.Entry<String,ArrayList<String>> entry : propertyResultsTmp.entrySet()) {
      propertyResults.put(entry.getKey(),entry.getValue().toArray(new String[entry.getValue().size()]));
    }
    if (!BinderHelper.isEmptyAnnotationValue(entity.discriminatorColumn())) {
      final String quotingNormalizedName=normalizeColumnQuoting(entity.discriminatorColumn());
      propertyResults.put("class",new String[]{quotingNormalizedName});
    }
    if (propertyResults.isEmpty()) {
      propertyResults=java.util.Collections.emptyMap();
    }
    NativeSQLQueryRootReturn result=new NativeSQLQueryRootReturn("alias" + entityAliasIndex++,entity.entityClass().getName(),propertyResults,LockMode.READ);
    definition.addQueryReturn(result);
  }
  for (  ColumnResult column : ann.columns()) {
    definition.addQueryReturn(new NativeSQLQueryScalarReturn(normalizeColumnQuoting(column.name()),column.type() != null ? context.getMetadataCollector().getTypeResolver().heuristicType(column.type().getName()) : null));
  }
  for (  ConstructorResult constructorResult : ann.classes()) {
    List<NativeSQLQueryScalarReturn> columnReturns=new ArrayList<NativeSQLQueryScalarReturn>();
    for (    ColumnResult columnResult : constructorResult.columns()) {
      columnReturns.add(new NativeSQLQueryScalarReturn(normalizeColumnQuoting(columnResult.name()),columnResult.type() != null ? context.getMetadataCollector().getTypeResolver().heuristicType(columnResult.type().getName()) : null));
    }
    definition.addQueryReturn(new NativeSQLQueryConstructorReturn(constructorResult.targetClass(),columnReturns));
  }
  if (isDefault) {
    context.getMetadataCollector().addDefaultResultSetMapping(definition);
  }
 else {
    context.getMetadataCollector().addResultSetMapping(definition);
  }
}
