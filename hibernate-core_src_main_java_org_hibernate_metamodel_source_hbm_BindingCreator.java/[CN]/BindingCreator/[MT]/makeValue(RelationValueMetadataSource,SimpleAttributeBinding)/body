{
  final TableSpecification valueSource=attributeBinding.getEntityBinding().getBaseTable();
  if (StringHelper.isNotEmpty(relationValueMetadataSource.getColumnAttribute())) {
    if (relationValueMetadataSource.getColumnOrFormulaElements() != null && !relationValueMetadataSource.getColumnOrFormulaElements().isEmpty()) {
      throw new MappingException("column/formula attribute may not be used together with <column>/<formula> subelement",currentBindingContext.getOrigin());
    }
    if (StringHelper.isNotEmpty(relationValueMetadataSource.getFormulaAttribute())) {
      throw new MappingException("column and formula attributes may not be used together",currentBindingContext.getOrigin());
    }
    return valueSource.locateOrCreateColumn(relationValueMetadataSource.getColumnAttribute());
  }
 else   if (StringHelper.isNotEmpty(relationValueMetadataSource.getFormulaAttribute())) {
    if (relationValueMetadataSource.getColumnOrFormulaElements() != null && !relationValueMetadataSource.getColumnOrFormulaElements().isEmpty()) {
      throw new MappingException("column/formula attribute may not be used together with <column>/<formula> subelement",currentBindingContext.getOrigin());
    }
    return valueSource.locateOrCreateDerivedValue(relationValueMetadataSource.getFormulaAttribute());
  }
 else   if (relationValueMetadataSource.getColumnOrFormulaElements() != null && !relationValueMetadataSource.getColumnOrFormulaElements().isEmpty()) {
    List<SimpleValue> values=new ArrayList<SimpleValue>();
    for (    Object columnOrFormula : relationValueMetadataSource.getColumnOrFormulaElements()) {
      final SimpleValue value;
      if (XMLColumnElement.class.isInstance(columnOrFormula)) {
        final XMLColumnElement columnElement=(XMLColumnElement)columnOrFormula;
        final Column column=valueSource.locateOrCreateColumn(columnElement.getName());
        column.setNullable(!columnElement.isNotNull());
        column.setDefaultValue(columnElement.getDefault());
        column.setSqlType(columnElement.getSqlType());
        column.setSize(new Size(Helper.getIntValue(columnElement.getPrecision(),-1),Helper.getIntValue(columnElement.getScale(),-1),Helper.getLongValue(columnElement.getLength(),-1),Size.LobMultiplier.NONE));
        column.setDatatype(null);
        column.setReadFragment(columnElement.getRead());
        column.setWriteFragment(columnElement.getWrite());
        column.setUnique(columnElement.isUnique());
        column.setCheckCondition(columnElement.getCheck());
        column.setComment(columnElement.getComment());
        value=column;
      }
 else {
        value=valueSource.locateOrCreateDerivedValue((String)columnOrFormula);
      }
      if (value != null) {
        values.add(value);
      }
    }
    if (values.size() == 1) {
      return values.get(0);
    }
    final Tuple tuple=valueSource.createTuple(attributeBinding.getEntityBinding().getEntity().getName() + '.' + attributeBinding.getAttribute().getName());
    for (    SimpleValue value : values) {
      tuple.addValue(value);
    }
    return tuple;
  }
 else {
    final String name=metadata.getOptions().getNamingStrategy().propertyToColumnName(attributeBinding.getAttribute().getName());
    return valueSource.locateOrCreateColumn(name);
  }
}
