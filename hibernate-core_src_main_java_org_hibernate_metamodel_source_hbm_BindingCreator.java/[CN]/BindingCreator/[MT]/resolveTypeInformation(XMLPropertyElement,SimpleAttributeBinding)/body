{
  final Class<?> attributeJavaType=determineJavaType(attributeBinding.getAttribute());
  if (attributeJavaType != null) {
    ((AbstractAttributeContainer.SingularAttributeImpl)attributeBinding.getAttribute()).resolveType(currentBindingContext.makeJavaType(attributeJavaType.getName()));
  }
  if (property.getTypeAttribute() != null) {
    final String explicitTypeName=property.getTypeAttribute();
    final TypeDef typeDef=currentBindingContext.getMetadataImplementor().getTypeDefinition(explicitTypeName);
    if (typeDef != null) {
      attributeBinding.getHibernateTypeDescriptor().setTypeName(typeDef.getTypeClass());
      attributeBinding.getHibernateTypeDescriptor().getTypeParameters().putAll(typeDef.getParameters());
    }
 else {
      attributeBinding.getHibernateTypeDescriptor().setTypeName(explicitTypeName);
    }
  }
 else   if (property.getType() != null) {
    attributeBinding.getHibernateTypeDescriptor().setTypeName(property.getType().getName());
    for (    XMLParamElement xmlParamElement : property.getType().getParam()) {
      attributeBinding.getHibernateTypeDescriptor().getTypeParameters().put(xmlParamElement.getName(),xmlParamElement.getValue());
    }
  }
 else {
    try {
      final String attributeName=attributeBinding.getAttribute().getName();
      final Class ownerClass=attributeBinding.getAttribute().getAttributeContainer().getClassReference();
      BeanInfoHelper.visitBeanInfo(ownerClass,new BeanInfoHelper.BeanInfoDelegate(){
        @Override public void processBeanInfo(        BeanInfo beanInfo) throws Exception {
          for (          PropertyDescriptor propertyDescriptor : beanInfo.getPropertyDescriptors()) {
            if (propertyDescriptor.getName().equals(attributeName)) {
              attributeBinding.getHibernateTypeDescriptor().setTypeName(propertyDescriptor.getPropertyType().getName());
              break;
            }
          }
        }
      }
);
    }
 catch (    Exception e) {
    }
  }
}
