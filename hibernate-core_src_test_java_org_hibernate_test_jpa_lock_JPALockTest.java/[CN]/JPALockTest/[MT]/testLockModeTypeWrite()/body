{
  if (!readCommittedIsolationMaintained("ejb3 lock tests")) {
    return;
  }
  if (getDialect().doesReadCommittedCauseWritersToBlockReaders()) {
    reportSkip("deadlock","jpa write locking");
    return;
  }
  final String initialName="lock test";
  Session s1=getSessions().openSession();
  Transaction t1=s1.beginTransaction();
  Item item=new Item();
  item.setName(initialName);
  s1.save(item);
  MyEntity myEntity=new MyEntity();
  myEntity.setName("Test");
  s1.save(myEntity);
  t1.commit();
  s1.close();
  Long itemId=item.getId();
  long initialVersion=item.getVersion();
  s1=getSessions().openSession();
  t1=s1.beginTransaction();
  item=(Item)s1.get(Item.class,itemId);
  s1.lock(item,LockMode.FORCE);
  assertEquals("no forced version increment",initialVersion + 1,item.getVersion());
  myEntity=(MyEntity)s1.get(MyEntity.class,myEntity.getId());
  s1.lock(myEntity,LockMode.FORCE);
  assertTrue("LockMode.FORCE on a un-versioned entity should degrade nicely to UPGRADE",true);
  s1.lock(item,LockMode.FORCE);
  assertEquals("subsequent LockMode.FORCE did not no-op",initialVersion + 1,item.getVersion());
  Session s2=getSessions().openSession();
  Transaction t2=s2.beginTransaction();
  Item item2=(Item)s2.get(Item.class,itemId);
  assertEquals("isolation not maintained",initialName,item2.getName());
  item.setName("updated-1");
  s1.flush();
  assertEquals(initialVersion + 2,item.getVersion());
  t1.commit();
  s1.close();
  item2.setName("updated");
  try {
    t2.commit();
    fail("optimistic lock should have failed");
  }
 catch (  Throwable ignore) {
    t2.rollback();
  }
 finally {
    s2.close();
  }
  s1=getSessions().openSession();
  t1=s1.beginTransaction();
  s1.delete(item);
  s1.delete(myEntity);
  t1.commit();
  s1.close();
}
