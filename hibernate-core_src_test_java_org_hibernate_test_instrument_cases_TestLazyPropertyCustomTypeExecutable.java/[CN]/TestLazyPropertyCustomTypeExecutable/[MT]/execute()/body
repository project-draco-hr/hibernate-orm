{
  Session s=getFactory().openSession();
  Problematic p=new Problematic();
  try {
    s.beginTransaction();
    p.setName("whatever");
    p.setBytes(new byte[]{1,0,1,1,0});
    s.save(p);
    s.getTransaction().commit();
  }
 catch (  Exception e) {
    s.getTransaction().rollback();
    throw e;
  }
 finally {
    s.close();
  }
  s=getFactory().openSession();
  try {
    s.beginTransaction();
    Problematic p1=(Problematic)s.get(Problematic.class,p.getId());
    Assert.assertTrue(FieldInterceptionHelper.isInstrumented(p1));
    p1.getRepresentation();
    s.getTransaction().commit();
  }
 catch (  Exception e) {
    s.getTransaction().rollback();
    throw e;
  }
 finally {
    s.close();
  }
  s=getFactory().openSession();
  try {
    s.beginTransaction();
    Problematic p1=(Problematic)s.createQuery("from Problematic").setReadOnly(true).list().get(0);
    p1.getRepresentation();
    s.getTransaction().commit();
  }
 catch (  Exception e) {
    s.getTransaction().rollback();
    throw e;
  }
 finally {
    s.close();
  }
  s=getFactory().openSession();
  try {
    s.beginTransaction();
    Problematic p1=(Problematic)s.load(Problematic.class,p.getId());
    Assert.assertFalse(FieldInterceptionHelper.isInstrumented(p1));
    p1.setRepresentation(p.getRepresentation());
    s.getTransaction().commit();
  }
 catch (  Exception e) {
    s.getTransaction().rollback();
    throw e;
  }
 finally {
    s.close();
  }
}
