{
  if (!isInverse && isRowDeleteEnabled()) {
    if (LOG.isDebugEnabled()) {
      LOG.debugf("Deleting rows of collection: %s",MessageHelper.collectionInfoString(this,id,getFactory()));
    }
    boolean deleteByIndex=!isOneToMany() && hasIndex && !indexContainsFormula;
    final Expectation expectation=Expectations.appropriateExpectation(getDeleteCheckStyle());
    try {
      Iterator deletes=collection.getDeletes(this,!deleteByIndex);
      if (deletes.hasNext()) {
        int offset=1;
        int count=0;
        while (deletes.hasNext()) {
          PreparedStatement st=null;
          boolean callable=isDeleteCallable();
          boolean useBatch=expectation.canBeBatched();
          String sql=getSQLDeleteRowString();
          if (useBatch) {
            if (deleteBatchKey == null) {
              deleteBatchKey=new BasicBatchKey(getRole() + "#DELETE",expectation);
            }
            st=session.getTransactionCoordinator().getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql,callable);
          }
 else {
            st=session.getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().prepareStatement(sql,callable);
          }
          try {
            expectation.prepare(st);
            Object entry=deletes.next();
            int loc=offset;
            if (hasIdentifier) {
              writeIdentifier(st,entry,loc,session);
            }
 else {
              loc=writeKey(st,id,loc,session);
              if (deleteByIndex) {
                writeIndexToWhere(st,entry,loc,session);
              }
 else {
                writeElementToWhere(st,entry,loc,session);
              }
            }
            if (useBatch) {
              session.getTransactionCoordinator().getJdbcCoordinator().getBatch(deleteBatchKey).addToBatch();
            }
 else {
              expectation.verifyOutcome(st.executeUpdate(),st,-1);
            }
            count++;
          }
 catch (          SQLException sqle) {
            if (useBatch) {
              session.getTransactionCoordinator().getJdbcCoordinator().abortBatch();
            }
            throw sqle;
          }
 finally {
            if (!useBatch) {
              st.close();
            }
          }
          LOG.debugf("Done deleting collection rows: %s deleted",count);
        }
      }
 else {
        LOG.debugf("No rows to delete");
      }
    }
 catch (    SQLException sqle) {
      throw sqlExceptionHelper.convert(sqle,"could not delete collection rows: " + MessageHelper.collectionInfoString(this,id,getFactory()),getSQLDeleteRowString());
    }
  }
}
