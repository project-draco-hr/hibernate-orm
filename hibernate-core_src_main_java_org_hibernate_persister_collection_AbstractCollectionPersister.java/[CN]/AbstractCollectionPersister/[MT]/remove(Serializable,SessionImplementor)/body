{
  if (!isInverse && isRowDeleteEnabled()) {
    if (LOG.isDebugEnabled()) {
      LOG.debugf("Deleting collection: %s",MessageHelper.collectionInfoString(this,id,getFactory()));
    }
    try {
      int offset=1;
      PreparedStatement st=null;
      Expectation expectation=Expectations.appropriateExpectation(getDeleteAllCheckStyle());
      boolean callable=isDeleteAllCallable();
      boolean useBatch=expectation.canBeBatched();
      String sql=getSQLDeleteString();
      if (useBatch) {
        if (removeBatchKey == null) {
          removeBatchKey=new BasicBatchKey(getRole() + "#REMOVE",expectation);
        }
        st=session.getTransactionCoordinator().getJdbcCoordinator().getBatch(removeBatchKey).getBatchStatement(sql,callable);
      }
 else {
        st=session.getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().prepareStatement(sql,callable);
      }
      try {
        offset+=expectation.prepare(st);
        writeKey(st,id,offset,session);
        if (useBatch) {
          session.getTransactionCoordinator().getJdbcCoordinator().getBatch(removeBatchKey).addToBatch();
        }
 else {
          expectation.verifyOutcome(session.getTransactionCoordinator().getJdbcCoordinator().getResultSetReturn().executeUpdate(st),st,-1);
        }
      }
 catch (      SQLException sqle) {
        if (useBatch) {
          session.getTransactionCoordinator().getJdbcCoordinator().abortBatch();
        }
        throw sqle;
      }
 finally {
        if (!useBatch) {
          session.getTransactionCoordinator().getJdbcCoordinator().release(st);
        }
      }
      LOG.debug("Done deleting collection");
    }
 catch (    SQLException sqle) {
      throw sqlExceptionHelper.convert(sqle,"could not delete collection: " + MessageHelper.collectionInfoString(this,id,getFactory()),getSQLDeleteString());
    }
  }
}
