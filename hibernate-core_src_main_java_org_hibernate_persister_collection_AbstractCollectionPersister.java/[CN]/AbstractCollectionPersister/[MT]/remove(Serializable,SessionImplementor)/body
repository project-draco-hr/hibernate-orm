{
  if (!isInverse && isRowDeleteEnabled()) {
    if (log.isDebugEnabled()) {
      log.debug("Deleting collection: " + MessageHelper.collectionInfoString(this,id,getFactory()));
    }
    try {
      int offset=1;
      PreparedStatement st=null;
      Expectation expectation=Expectations.appropriateExpectation(getDeleteAllCheckStyle());
      boolean callable=isDeleteAllCallable();
      boolean useBatch=expectation.canBeBatched();
      String sql=getSQLDeleteString();
      if (useBatch) {
        st=session.getJDBCContext().getConnectionManager().prepareBatchStatement(sql,callable);
      }
 else {
        st=session.getJDBCContext().getConnectionManager().prepareStatement(sql,callable);
      }
      try {
        offset+=expectation.prepare(st);
        writeKey(st,id,offset,session);
        if (useBatch) {
          session.getJDBCContext().getConnectionManager().addToBatch(expectation);
        }
 else {
          expectation.verifyOutcome(st.executeUpdate(),st,-1);
        }
      }
 catch (      SQLException sqle) {
        if (useBatch) {
          session.getJDBCContext().getConnectionManager().abortBatch(sqle);
        }
        throw sqle;
      }
 finally {
        if (!useBatch) {
          st.close();
        }
      }
      if (log.isDebugEnabled()) {
        log.debug("done deleting collection");
      }
    }
 catch (    SQLException sqle) {
      throw sqlExceptionHelper.convert(sqle,"could not delete collection: " + MessageHelper.collectionInfoString(this,id,getFactory()),getSQLDeleteString());
    }
  }
}
