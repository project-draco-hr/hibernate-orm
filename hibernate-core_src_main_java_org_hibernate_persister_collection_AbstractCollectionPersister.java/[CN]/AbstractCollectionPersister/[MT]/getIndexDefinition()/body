{
  if (!hasIndex()) {
    return null;
  }
  return new CollectionIndexDefinition(){
    @Override public CollectionDefinition getCollectionDefinition(){
      return AbstractCollectionPersister.this;
    }
    @Override public Type getType(){
      return getIndexType();
    }
    @Override public EntityDefinition toEntityDefinition(){
      if (!getType().isEntityType()) {
        throw new IllegalStateException("Cannot treat collection index type as entity");
      }
      return (EntityPersister)((AssociationType)getIndexType()).getAssociatedJoinable(getFactory());
    }
    @Override public CompositionDefinition toCompositeDefinition(){
      if (!getType().isComponentType()) {
        throw new IllegalStateException("Cannot treat collection index type as composite");
      }
      return new CompositeCollectionElementDefinition(){
        @Override public String getName(){
          return "index";
        }
        @Override public CompositeType getType(){
          return (CompositeType)getIndexType();
        }
        @Override public boolean isNullable(){
          return false;
        }
        @Override public AttributeSource getSource(){
          return getOwnerEntityPersister();
        }
        @Override public Iterable<AttributeDefinition> getAttributes(){
          return CompositionSingularSubAttributesHelper.getCompositeCollectionIndexSubAttributes(this);
        }
        @Override public CollectionDefinition getCollectionDefinition(){
          return AbstractCollectionPersister.this;
        }
      }
;
    }
    @Override public AnyMappingDefinition toAnyMappingDefinition(){
      final Type type=getType();
      if (!type.isAnyType()) {
        throw new IllegalStateException("Cannot treat collection index type as ManyToAny");
      }
      return new StandardAnyTypeDefinition((AnyType)type,isLazy() || isExtraLazy());
    }
  }
;
}
