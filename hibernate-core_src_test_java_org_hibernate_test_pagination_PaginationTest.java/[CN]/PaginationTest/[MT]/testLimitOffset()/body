{
  prepareTestData();
  Session session=openSession();
  session.beginTransaction();
  List result;
  result=generateBaseHQLQuery(session).setFirstResult(0).setMaxResults(20).list();
  assertEquals(20,result.size());
  assertEquals(0,((DataPoint)result.get(0)).getSequence());
  assertEquals(1,((DataPoint)result.get(1)).getSequence());
  result=generateBaseCriteria(session).setFirstResult(1).setMaxResults(20).list();
  assertEquals(20,result.size());
  assertEquals(1,((DataPoint)result.get(0)).getSequence());
  assertEquals(2,((DataPoint)result.get(1)).getSequence());
  result=generateBaseCriteria(session).setFirstResult(99).setMaxResults(Integer.MAX_VALUE - 200).list();
  assertEquals(1,result.size());
  assertEquals(99,((DataPoint)result.get(0)).getSequence());
  result=session.createQuery("select distinct description from DataPoint order by description").setFirstResult(2).setMaxResults(3).list();
  assertEquals(3,result.size());
  assertEquals("Description: 2",result.get(0));
  assertEquals("Description: 3",result.get(1));
  assertEquals("Description: 4",result.get(2));
  result=session.createSQLQuery("select description, xval, yval from DataPoint order by xval, yval").setFirstResult(2).setMaxResults(5).list();
  assertEquals(5,result.size());
  Object[] row=(Object[])result.get(0);
  assertTrue(row[0] instanceof String);
  result=session.createSQLQuery("select * from DataPoint order by xval, yval").setFirstResult(2).setMaxResults(5).list();
  assertEquals(5,result.size());
  session.getTransaction().commit();
  session.close();
  cleanupTestData();
}
