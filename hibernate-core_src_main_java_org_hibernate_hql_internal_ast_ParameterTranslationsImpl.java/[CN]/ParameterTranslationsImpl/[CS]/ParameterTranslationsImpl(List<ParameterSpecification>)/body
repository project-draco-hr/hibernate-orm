{
class NamedParamTempHolder {
    private String name;
    private Type type;
    private List<Integer> positions=new ArrayList<>();
  }
  final int size=parameterSpecifications.size();
  final List<ParameterInfo> ordinalParameterList=new ArrayList<>();
  final Map<String,NamedParamTempHolder> namedParameterMap=new HashMap<>();
  for (int i=0; i < size; i++) {
    final ParameterSpecification spec=parameterSpecifications.get(i);
    if (PositionalParameterSpecification.class.isInstance(spec)) {
      final PositionalParameterSpecification ordinalSpec=(PositionalParameterSpecification)spec;
      ordinalParameterList.add(new ParameterInfo(i,ordinalSpec.getExpectedType()));
    }
 else     if (NamedParameterSpecification.class.isInstance(spec)) {
      final NamedParameterSpecification namedSpec=(NamedParameterSpecification)spec;
      NamedParamTempHolder paramHolder=namedParameterMap.get(namedSpec.getName());
      if (paramHolder == null) {
        paramHolder=new NamedParamTempHolder();
        paramHolder.name=namedSpec.getName();
        paramHolder.type=namedSpec.getExpectedType();
        namedParameterMap.put(namedSpec.getName(),paramHolder);
      }
 else       if (paramHolder.type == null && namedSpec.getExpectedType() != null) {
        paramHolder.type=namedSpec.getExpectedType();
      }
      paramHolder.positions.add(i);
    }
  }
  ordinalParameters=ordinalParameterList.toArray(new ParameterInfo[ordinalParameterList.size()]);
  if (namedParameterMap.isEmpty()) {
    namedParameters=java.util.Collections.emptyMap();
  }
 else {
    final Map<String,ParameterInfo> namedParametersBacking=new HashMap<>(namedParameterMap.size());
    for (    NamedParamTempHolder holder : namedParameterMap.values()) {
      namedParametersBacking.put(holder.name,new ParameterInfo(ArrayHelper.toIntArray(holder.positions),holder.type));
    }
    namedParameters=java.util.Collections.unmodifiableMap(namedParametersBacking);
  }
}
