{
  Collection<String> resources=bundleWiring.listResources("/","*",BundleWiring.LISTRESOURCES_RECURSE);
  for (  final String resource : resources) {
    if (!resource.endsWith("/")) {
      try {
        final InputStreamAccess inputStreamAccess=new InputStreamAccess(){
          @Override public String getStreamName(){
            return resource;
          }
          @Override public InputStream accessInputStream(){
            return openInputStream();
          }
          @Override public NamedInputStream asNamedInputStream(){
            return new NamedInputStream(resource,openInputStream());
          }
          private InputStream openInputStream(){
            try {
              return persistenceBundle.getResource(resource).openStream();
            }
 catch (            IOException e) {
              throw new PersistenceException("Unable to open an InputStream on the OSGi Bundle resource!",e);
            }
          }
        }
;
        final ArchiveEntry entry=new ArchiveEntry(){
          @Override public String getName(){
            return resource;
          }
          @Override public String getNameWithinArchive(){
            return resource;
          }
          @Override public InputStreamAccess getStreamAccess(){
            return inputStreamAccess;
          }
        }
;
        context.obtainArchiveEntryHandler(entry).handleEntry(entry,context);
      }
 catch (      Exception e) {
        LOG.unableToLoadScannedClassOrResource(e);
      }
    }
  }
}
