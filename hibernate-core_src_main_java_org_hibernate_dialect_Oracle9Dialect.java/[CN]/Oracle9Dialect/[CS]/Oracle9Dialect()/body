{
  super();
  LOG.deprecatedOracle9Dialect();
  registerColumnType(Types.BIT,"number(1,0)");
  registerColumnType(Types.BIGINT,"number(19,0)");
  registerColumnType(Types.SMALLINT,"number(5,0)");
  registerColumnType(Types.TINYINT,"number(3,0)");
  registerColumnType(Types.INTEGER,"number(10,0)");
  registerColumnType(Types.CHAR,"char(1 char)");
  registerColumnType(Types.VARCHAR,4000,"varchar2($l char)");
  registerColumnType(Types.VARCHAR,"long");
  registerColumnType(Types.FLOAT,"float");
  registerColumnType(Types.DOUBLE,"double precision");
  registerColumnType(Types.DATE,"date");
  registerColumnType(Types.TIME,"date");
  registerColumnType(Types.TIMESTAMP,"timestamp");
  registerColumnType(Types.VARBINARY,2000,"raw($l)");
  registerColumnType(Types.VARBINARY,"long raw");
  registerColumnType(Types.NUMERIC,"number($p,$s)");
  registerColumnType(Types.DECIMAL,"number($p,$s)");
  registerColumnType(Types.BLOB,"blob");
  registerColumnType(Types.CLOB,"clob");
  getDefaultProperties().setProperty(Environment.USE_GET_GENERATED_KEYS,"false");
  getDefaultProperties().setProperty(Environment.USE_STREAMS_FOR_BINARY,"true");
  getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE,DEFAULT_BATCH_SIZE);
  getDefaultProperties().setProperty(Environment.BATCH_VERSIONED_DATA,"false");
  registerFunction("abs",new StandardSQLFunction("abs"));
  registerFunction("sign",new StandardSQLFunction("sign",StandardBasicTypes.INTEGER));
  registerFunction("acos",new StandardSQLFunction("acos",StandardBasicTypes.DOUBLE));
  registerFunction("asin",new StandardSQLFunction("asin",StandardBasicTypes.DOUBLE));
  registerFunction("atan",new StandardSQLFunction("atan",StandardBasicTypes.DOUBLE));
  registerFunction("cos",new StandardSQLFunction("cos",StandardBasicTypes.DOUBLE));
  registerFunction("cosh",new StandardSQLFunction("cosh",StandardBasicTypes.DOUBLE));
  registerFunction("exp",new StandardSQLFunction("exp",StandardBasicTypes.DOUBLE));
  registerFunction("ln",new StandardSQLFunction("ln",StandardBasicTypes.DOUBLE));
  registerFunction("sin",new StandardSQLFunction("sin",StandardBasicTypes.DOUBLE));
  registerFunction("sinh",new StandardSQLFunction("sinh",StandardBasicTypes.DOUBLE));
  registerFunction("stddev",new StandardSQLFunction("stddev",StandardBasicTypes.DOUBLE));
  registerFunction("sqrt",new StandardSQLFunction("sqrt",StandardBasicTypes.DOUBLE));
  registerFunction("tan",new StandardSQLFunction("tan",StandardBasicTypes.DOUBLE));
  registerFunction("tanh",new StandardSQLFunction("tanh",StandardBasicTypes.DOUBLE));
  registerFunction("variance",new StandardSQLFunction("variance",StandardBasicTypes.DOUBLE));
  registerFunction("round",new StandardSQLFunction("round"));
  registerFunction("trunc",new StandardSQLFunction("trunc"));
  registerFunction("ceil",new StandardSQLFunction("ceil"));
  registerFunction("floor",new StandardSQLFunction("floor"));
  registerFunction("chr",new StandardSQLFunction("chr",StandardBasicTypes.CHARACTER));
  registerFunction("initcap",new StandardSQLFunction("initcap"));
  registerFunction("lower",new StandardSQLFunction("lower"));
  registerFunction("ltrim",new StandardSQLFunction("ltrim"));
  registerFunction("rtrim",new StandardSQLFunction("rtrim"));
  registerFunction("soundex",new StandardSQLFunction("soundex"));
  registerFunction("upper",new StandardSQLFunction("upper"));
  registerFunction("ascii",new StandardSQLFunction("ascii",StandardBasicTypes.INTEGER));
  registerFunction("to_char",new StandardSQLFunction("to_char",StandardBasicTypes.STRING));
  registerFunction("to_date",new StandardSQLFunction("to_date",StandardBasicTypes.TIMESTAMP));
  registerFunction("current_date",new NoArgSQLFunction("current_date",StandardBasicTypes.DATE,false));
  registerFunction("current_time",new NoArgSQLFunction("current_timestamp",StandardBasicTypes.TIME,false));
  registerFunction("current_timestamp",new NoArgSQLFunction("current_timestamp",StandardBasicTypes.TIMESTAMP,false));
  registerFunction("last_day",new StandardSQLFunction("last_day",StandardBasicTypes.DATE));
  registerFunction("sysdate",new NoArgSQLFunction("sysdate",StandardBasicTypes.DATE,false));
  registerFunction("systimestamp",new NoArgSQLFunction("systimestamp",StandardBasicTypes.TIMESTAMP,false));
  registerFunction("uid",new NoArgSQLFunction("uid",StandardBasicTypes.INTEGER,false));
  registerFunction("user",new NoArgSQLFunction("user",StandardBasicTypes.STRING,false));
  registerFunction("rowid",new NoArgSQLFunction("rowid",StandardBasicTypes.LONG,false));
  registerFunction("rownum",new NoArgSQLFunction("rownum",StandardBasicTypes.LONG,false));
  registerFunction("concat",new VarArgsSQLFunction(StandardBasicTypes.STRING,"","||",""));
  registerFunction("instr",new StandardSQLFunction("instr",StandardBasicTypes.INTEGER));
  registerFunction("instrb",new StandardSQLFunction("instrb",StandardBasicTypes.INTEGER));
  registerFunction("lpad",new StandardSQLFunction("lpad",StandardBasicTypes.STRING));
  registerFunction("replace",new StandardSQLFunction("replace",StandardBasicTypes.STRING));
  registerFunction("rpad",new StandardSQLFunction("rpad",StandardBasicTypes.STRING));
  registerFunction("substr",new StandardSQLFunction("substr",StandardBasicTypes.STRING));
  registerFunction("substrb",new StandardSQLFunction("substrb",StandardBasicTypes.STRING));
  registerFunction("translate",new StandardSQLFunction("translate",StandardBasicTypes.STRING));
  registerFunction("substring",new StandardSQLFunction("substr",StandardBasicTypes.STRING));
  registerFunction("locate",new SQLFunctionTemplate(StandardBasicTypes.INTEGER,"instr(?2,?1)"));
  registerFunction("bit_length",new SQLFunctionTemplate(StandardBasicTypes.INTEGER,"vsize(?1)*8"));
  registerFunction("coalesce",new NvlFunction());
  registerFunction("atan2",new StandardSQLFunction("atan2",StandardBasicTypes.FLOAT));
  registerFunction("log",new StandardSQLFunction("log",StandardBasicTypes.INTEGER));
  registerFunction("mod",new StandardSQLFunction("mod",StandardBasicTypes.INTEGER));
  registerFunction("nvl",new StandardSQLFunction("nvl"));
  registerFunction("nvl2",new StandardSQLFunction("nvl2"));
  registerFunction("power",new StandardSQLFunction("power",StandardBasicTypes.FLOAT));
  registerFunction("add_months",new StandardSQLFunction("add_months",StandardBasicTypes.DATE));
  registerFunction("months_between",new StandardSQLFunction("months_between",StandardBasicTypes.FLOAT));
  registerFunction("next_day",new StandardSQLFunction("next_day",StandardBasicTypes.DATE));
  registerFunction("str",new StandardSQLFunction("to_char",StandardBasicTypes.STRING));
}
