{
  Session s=openSession();
  Transaction t=s.beginTransaction();
  FooProxy foo=new Foo();
  FooProxy foo2=new Foo();
  Serializable id=s.save(foo);
  Serializable id2=s.save(foo2);
  foo2.setInt(1234567);
  foo.setInt(1234);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  foo=(FooProxy)s.load(Foo.class,id);
  foo2=(FooProxy)s.load(Foo.class,id2);
  assertFalse(Hibernate.isInitialized(foo));
  Hibernate.initialize(foo2);
  Hibernate.initialize(foo);
  assertTrue(foo.getComponent().getImportantDates().length == 4);
  assertTrue(foo2.getComponent().getImportantDates().length == 4);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  foo.setKey("xyzid");
  foo.setFloat(new Float(1.2f));
  foo2.setKey((String)id);
  foo2.setFloat(new Float(1.3f));
  foo2.getDependent().setKey(null);
  foo2.getComponent().getSubcomponent().getFee().setKey(null);
  assertFalse(foo2.getKey().equals(id));
  s.save(foo);
  s.update(foo2);
  assertEquals(foo2.getKey(),id);
  assertTrue(foo2.getInt() == 1234567);
  assertEquals(foo.getKey(),"xyzid");
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  foo=(FooProxy)s.load(Foo.class,id);
  assertTrue(foo.getInt() == 1234567);
  assertTrue(foo.getComponent().getImportantDates().length == 4);
  String feekey=foo.getDependent().getKey();
  String fookey=foo.getKey();
  s.delete(foo);
  s.delete(s.get(Foo.class,id2));
  s.delete(s.get(Foo.class,"xyzid"));
  assertEquals(2,doDelete(s,"from java.lang.Object"));
  t.commit();
  s.close();
  foo.setKey(fookey);
  foo.getDependent().setKey(feekey);
  foo.getComponent().setGlarch(null);
  foo.getComponent().setSubcomponent(null);
  s=openSession();
  t=s.beginTransaction();
  s.replicate(foo,ReplicationMode.OVERWRITE);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  Foo refoo=(Foo)s.get(Foo.class,id);
  assertEquals(feekey,refoo.getDependent().getKey());
  s.delete(refoo);
  t.commit();
  s.close();
}
