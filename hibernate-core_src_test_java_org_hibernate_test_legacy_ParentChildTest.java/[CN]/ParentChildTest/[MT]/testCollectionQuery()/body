{
  Session s=openSession();
  Transaction t=s.beginTransaction();
  Simple s1=new Simple(Long.valueOf(1));
  s1.setName("s");
  s1.setCount(0);
  Simple s2=new Simple(Long.valueOf(2));
  s2.setCount(2);
  Simple s3=new Simple(Long.valueOf(3));
  s3.setCount(3);
  s.save(s1);
  s.save(s2);
  s.save(s3);
  Container c=new Container();
  Contained cd=new Contained();
  List bag=new ArrayList();
  bag.add(cd);
  c.setBag(bag);
  List l=new ArrayList();
  l.add(s1);
  l.add(s3);
  l.add(s2);
  c.setOneToMany(l);
  l=new ArrayList();
  l.add(s1);
  l.add(null);
  l.add(s2);
  c.setManyToMany(l);
  s.save(c);
  Container cx=new Container();
  s.save(cx);
  Simple sx=new Simple(Long.valueOf(5));
  sx.setCount(5);
  sx.setName("s");
  s.save(sx);
  assertTrue(s.createQuery("select c from ContainerX c, Simple s where c.oneToMany[2] = s").list().size() == 1);
  assertTrue(s.createQuery("select c from ContainerX c, Simple s where c.manyToMany[2] = s").list().size() == 1);
  assertTrue(s.createQuery("select c from ContainerX c, Simple s where s = c.oneToMany[2]").list().size() == 1);
  assertTrue(s.createQuery("select c from ContainerX c, Simple s where s = c.manyToMany[2]").list().size() == 1);
  assertTrue(s.createQuery("select c from ContainerX c where c.oneToMany[0].name = 's'").list().size() == 1);
  assertTrue(s.createQuery("select c from ContainerX c where c.manyToMany[0].name = 's'").list().size() == 1);
  assertTrue(s.createQuery("select c from ContainerX c where 's' = c.oneToMany[2 - 2].name").list().size() == 1);
  assertTrue(s.createQuery("select c from ContainerX c where 's' = c.manyToMany[(3+1)/4-1].name").list().size() == 1);
  assertTrue(s.createQuery("select c from ContainerX c where c.oneToMany[ c.manyToMany[0].count ].name = 's'").list().size() == 1);
  assertTrue(s.createQuery("select c from ContainerX c where c.manyToMany[ c.oneToMany[0].count ].name = 's'").list().size() == 1);
  if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof org.hibernate.dialect.TimesTenDialect)) {
    assertTrue(s.createQuery("select c from ContainerX c where c.manyToMany[ maxindex(c.manyToMany) ].count = 2").list().size() == 1);
  }
  assertTrue(s.contains(cd));
  if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect)) {
    s.createFilter(c.getBag(),"where 0 in elements(this.bag)").list();
    s.createFilter(c.getBag(),"where 0 in elements(this.lazyBag)").list();
  }
  s.createQuery("select count(comp.name) from ContainerX c join c.components comp").list();
  s.delete(cd);
  s.delete(c);
  s.delete(s1);
  s.delete(s2);
  s.delete(s3);
  s.delete(cx);
  s.delete(sx);
  t.commit();
  s.close();
}
