{
  Serializable id=key == null ? null : key.getIdentifier();
  boolean inTxn=source.getTransactionCoordinator().isTransactionInProgress();
  boolean shouldDelayIdentityInserts=!inTxn && !requiresImmediateIdAccess;
  source.getPersistenceContext().addEntry(entity,Status.SAVING,null,null,id,null,LockMode.WRITE,useIdentityColumn,persister,false,false);
  cascadeBeforeSave(source,persister,entity,anything);
  Object[] values=persister.getPropertyValuesToInsert(entity,getMergeMap(anything),source);
  Type[] types=persister.getPropertyTypes();
  boolean substitute=substituteValuesIfNecessary(entity,id,values,persister,source);
  if (persister.hasCollections()) {
    substitute=substitute || visitCollectionsBeforeSave(entity,id,values,types,source);
  }
  if (substitute) {
    persister.setPropertyValues(entity,values);
  }
  TypeHelper.deepCopy(values,types,persister.getPropertyUpdateability(),values,source);
  AbstractEntityInsertAction insert=addInsertAction(values,id,entity,persister,useIdentityColumn,source,shouldDelayIdentityInserts);
  cascadeAfterSave(source,persister,entity,anything);
  if (useIdentityColumn && insert.isEarlyInsert()) {
    if (!EntityIdentityInsertAction.class.isInstance(insert)) {
      throw new IllegalStateException("Insert should be using an identity column, but action is of unexpected type: " + insert.getClass().getName());
    }
    id=((EntityIdentityInsertAction)insert).getGeneratedId();
    insert.handleNaturalIdPostSaveNotifications(id);
  }
  markInterceptorDirty(entity,persister,source);
  return id;
}
