{
  Session session=openSession();
  session.beginTransaction();
  Company company=ProxyHelper.newCompanyProxy();
  company.setName("acme");
  session.save(company);
  Customer customer=ProxyHelper.newCustomerProxy();
  customer.setName("Steve");
  customer.setCompany(company);
  Address address=ProxyHelper.newAddressProxy();
  address.setStreet("somewhere over the rainbow");
  address.setCity("lawerence, kansas");
  address.setPostalCode("toto");
  customer.setAddress(address);
  customer.setFamily(new HashSet());
  Person son=ProxyHelper.newPersonProxy();
  son.setName("son");
  customer.getFamily().add(son);
  Person wife=ProxyHelper.newPersonProxy();
  wife.setName("wife");
  customer.getFamily().add(wife);
  session.save(customer);
  session.getTransaction().commit();
  session.close();
  assertNotNull("company id not assigned",company.getId());
  assertNotNull("customer id not assigned",customer.getId());
  assertNotNull("address id not assigned",address.getId());
  assertNotNull("son:Person id not assigned",son.getId());
  assertNotNull("wife:Person id not assigned",wife.getId());
  session=openSession();
  session.beginTransaction();
  customer=(Customer)session.load(Customer.class,customer.getId());
  assertFalse("should-be-proxy was initialized",Hibernate.isInitialized(customer));
  customer.setName("other");
  session.flush();
  assertFalse("should-be-proxy was initialized",Hibernate.isInitialized(customer.getCompany()));
  session.refresh(customer);
  assertEquals("name not updated","other",customer.getName());
  assertEquals("company association not correct","acme",customer.getCompany().getName());
  session.getTransaction().commit();
  session.close();
  customer.setName("Steve");
  session=openSession();
  session.beginTransaction();
  session.update(customer);
  session.flush();
  session.refresh(customer);
  assertEquals("name not updated","Steve",customer.getName());
  session.getTransaction().commit();
  session.close();
  session=openSession();
  session.beginTransaction();
  int count=session.createQuery("from Customer").list().size();
  assertEquals("querying dynamic entity",1,count);
  session.clear();
  count=session.createQuery("from Person").list().size();
  assertEquals("querying dynamic entity",3,count);
  session.getTransaction().commit();
  session.close();
  session=openSession();
  session.beginTransaction();
  session.delete(company);
  session.delete(customer);
  session.getTransaction().commit();
  session.close();
}
