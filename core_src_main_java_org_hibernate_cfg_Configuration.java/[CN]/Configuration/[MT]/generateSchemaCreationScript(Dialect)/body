{
  secondPassCompile();
  ArrayList script=new ArrayList(50);
  String defaultCatalog=properties.getProperty(Environment.DEFAULT_CATALOG);
  String defaultSchema=properties.getProperty(Environment.DEFAULT_SCHEMA);
  Iterator iter=getTableMappings();
  while (iter.hasNext()) {
    Table table=(Table)iter.next();
    if (table.isPhysicalTable()) {
      script.add(table.sqlCreateString(dialect,mapping,defaultCatalog,defaultSchema));
      Iterator comments=table.sqlCommentStrings(dialect,defaultCatalog,defaultSchema);
      while (comments.hasNext()) {
        script.add(comments.next());
      }
    }
  }
  iter=getTableMappings();
  while (iter.hasNext()) {
    Table table=(Table)iter.next();
    if (table.isPhysicalTable()) {
      if (!dialect.supportsUniqueConstraintInCreateAlterTable()) {
        Iterator subIter=table.getUniqueKeyIterator();
        while (subIter.hasNext()) {
          UniqueKey uk=(UniqueKey)subIter.next();
          String constraintString=uk.sqlCreateString(dialect,mapping,defaultCatalog,defaultSchema);
          if (constraintString != null)           script.add(constraintString);
        }
      }
      Iterator subIter=table.getIndexIterator();
      while (subIter.hasNext()) {
        Index index=(Index)subIter.next();
        script.add(index.sqlCreateString(dialect,mapping,defaultCatalog,defaultSchema));
      }
      if (dialect.hasAlterTable()) {
        subIter=table.getForeignKeyIterator();
        while (subIter.hasNext()) {
          ForeignKey fk=(ForeignKey)subIter.next();
          if (fk.isPhysicalConstraint()) {
            script.add(fk.sqlCreateString(dialect,mapping,defaultCatalog,defaultSchema));
          }
        }
      }
    }
  }
  iter=iterateGenerators(dialect);
  while (iter.hasNext()) {
    String[] lines=((PersistentIdentifierGenerator)iter.next()).sqlCreateStrings(dialect);
    for (int i=0; i < lines.length; i++) {
      script.add(lines[i]);
    }
  }
  Iterator itr=auxiliaryDatabaseObjects.iterator();
  while (itr.hasNext()) {
    AuxiliaryDatabaseObject object=(AuxiliaryDatabaseObject)itr.next();
    if (object.appliesToDialect(dialect)) {
      script.add(object.sqlCreateString(dialect,mapping,defaultCatalog,defaultSchema));
    }
  }
  return ArrayHelper.toStringArray(script);
}
