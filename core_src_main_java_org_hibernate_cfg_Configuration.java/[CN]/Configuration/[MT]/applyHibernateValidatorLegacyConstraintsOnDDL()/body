{
  Constructor validatorCtr=null;
  Method applyMethod=null;
  try {
    Class classValidator=ReflectHelper.classForName("org.hibernate.validator.ClassValidator",this.getClass());
    Class messageInterpolator=ReflectHelper.classForName("org.hibernate.validator.MessageInterpolator",this.getClass());
    validatorCtr=classValidator.getDeclaredConstructor(Class.class,ResourceBundle.class,messageInterpolator,Map.class,ReflectionManager.class);
    applyMethod=classValidator.getMethod("apply",PersistentClass.class);
  }
 catch (  ClassNotFoundException e) {
    if (!isValidatorNotPresentLogged) {
      log.info("Hibernate Validator not found: ignoring");
    }
    isValidatorNotPresentLogged=true;
  }
catch (  NoSuchMethodException e) {
    throw new AnnotationException(e);
  }
  if (applyMethod != null) {
    for (    PersistentClass persistentClazz : classes.values()) {
      String className=persistentClazz.getClassName();
      if (StringHelper.isNotEmpty(className)) {
        try {
          Object validator=validatorCtr.newInstance(ReflectHelper.classForName(className),null,null,null,reflectionManager);
          applyMethod.invoke(validator,persistentClazz);
        }
 catch (        Exception e) {
          log.warn("Unable to apply constraints on DDL for " + className,e);
        }
      }
    }
  }
}
