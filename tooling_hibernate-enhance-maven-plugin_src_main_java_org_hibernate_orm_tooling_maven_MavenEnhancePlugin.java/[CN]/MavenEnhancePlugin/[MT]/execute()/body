{
  if (!shouldApply()) {
    getLog().info("Skipping Hibernate enhancement plugin execution since there is no feature enabled");
    return;
  }
  File root=new File(this.dir);
  if (!root.exists()) {
    getLog().info("Skipping Hibernate enhancement plugin execution since there is no classes dir " + dir);
    return;
  }
  walkDir(root);
  if (sourceSet.isEmpty()) {
    getLog().info("Skipping Hibernate enhancement plugin execution since there are no classes to enhance on " + dir);
    return;
  }
  getLog().info("Starting Hibernate enhancement for classes on " + dir);
  final ClassLoader classLoader=toClassLoader(Collections.singletonList(root));
  EnhancementContext enhancementContext=new DefaultEnhancementContext(){
    @Override public ClassLoader getLoadingClassLoader(){
      return classLoader;
    }
    @Override public boolean doBiDirectionalAssociationManagement(    CtField field){
      return enableAssociationManagement;
    }
    @Override public boolean doDirtyCheckingInline(    CtClass classDescriptor){
      return enableDirtyTracking;
    }
    @Override public boolean hasLazyLoadableAttributes(    CtClass classDescriptor){
      return enableLazyInitialization;
    }
    @Override public boolean isLazyLoadable(    CtField field){
      return enableLazyInitialization;
    }
    @Override public boolean doExtendedEnhancement(    CtClass classDescriptor){
      return enableExtendedEnhancement;
    }
  }
;
  if (enableExtendedEnhancement) {
    getLog().warn("Extended enhancement is enabled. Classes other than entities may be modified. You should consider access the entities using getter/setter methods and disable this property. Use at your own risk.");
  }
  final Enhancer enhancer=new Enhancer(enhancementContext);
  final ClassPool classPool=new ClassPool(false);
  for (  File file : sourceSet) {
    final CtClass ctClass=toCtClass(file,classPool);
    if (ctClass == null) {
      continue;
    }
    if (!enableLazyInitialization) {
      if (!enhancementContext.isEntityClass(ctClass) && !enhancementContext.isCompositeClass(ctClass)) {
        getLog().info("Skipping class file [" + file.getAbsolutePath() + "], not an entity nor embeddable");
        continue;
      }
    }
    final byte[] enhancedBytecode=doEnhancement(ctClass,enhancer);
    writeOutEnhancedClass(enhancedBytecode,ctClass,file);
    getLog().info("Successfully enhanced class [" + ctClass.getName() + "]");
  }
}
