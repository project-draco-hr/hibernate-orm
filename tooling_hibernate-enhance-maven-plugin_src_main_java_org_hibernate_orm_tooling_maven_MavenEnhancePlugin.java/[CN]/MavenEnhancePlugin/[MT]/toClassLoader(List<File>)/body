{
  List<URL> urls=new ArrayList<URL>();
  for (  File file : runtimeClasspath) {
    try {
      urls.add(file.toURI().toURL());
      getLog().debug("Adding classpath entry for classes root " + file.getAbsolutePath());
    }
 catch (    MalformedURLException e) {
      String msg="Unable to resolve classpath entry to URL: " + file.getAbsolutePath();
      if (failOnError) {
        throw new MojoExecutionException(msg,e);
      }
      getLog().warn(msg);
    }
  }
  Set<Artifact> artifacts=null;
  MavenProject project=((MavenProject)getPluginContext().get("project"));
  if (project != null) {
    MavenProject executionProject=project.getExecutionProject();
    artifacts=(executionProject != null ? executionProject.getArtifacts() : project.getArtifacts());
  }
  if (artifacts != null) {
    for (    Artifact a : artifacts) {
      if (!Artifact.SCOPE_TEST.equals(a.getScope())) {
        try {
          urls.add(a.getFile().toURI().toURL());
          getLog().debug("Adding classpath entry for dependency " + a.getId());
        }
 catch (        MalformedURLException e) {
          String msg="Unable to resolve URL for dependency " + a.getId() + " at "+ a.getFile().getAbsolutePath();
          if (failOnError) {
            throw new MojoExecutionException(msg,e);
          }
          getLog().warn(msg);
        }
      }
    }
  }
  return new URLClassLoader(urls.toArray(new URL[urls.size()]),Enhancer.class.getClassLoader());
}
