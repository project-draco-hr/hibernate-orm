{
  final int joins=countEntityPersisters(associations);
  final int collections=countCollectionPersisters(associations);
  collectionOwners=collections == 0 ? null : new int[collections];
  collectionPersisters=collections == 0 ? null : new CollectionPersister[collections];
  collectionSuffixes=BasicLoader.generateSuffixes(joins + 1,collections);
  persisters=new Loadable[joins];
  aliases=new String[joins];
  owners=new int[joins];
  ownerAssociationTypes=new EntityType[joins];
  lockModeArray=ArrayHelper.fillArray(lockMode,joins);
  int i=0;
  int j=0;
  Iterator iter=associations.iterator();
  while (iter.hasNext()) {
    final OuterJoinableAssociation oj=(OuterJoinableAssociation)iter.next();
    if (!oj.isCollection()) {
      persisters[i]=(Loadable)oj.getJoinable();
      aliases[i]=oj.getRHSAlias();
      owners[i]=oj.getOwner(associations);
      ownerAssociationTypes[i]=(EntityType)oj.getJoinableType();
      i++;
    }
 else {
      QueryableCollection collPersister=(QueryableCollection)oj.getJoinable();
      if (oj.getJoinType() == JoinFragment.LEFT_OUTER_JOIN) {
        collectionPersisters[j]=collPersister;
        collectionOwners[j]=oj.getOwner(associations);
        j++;
      }
      if (collPersister.isOneToMany()) {
        persisters[i]=(Loadable)collPersister.getElementPersister();
        aliases[i]=oj.getRHSAlias();
        i++;
      }
    }
  }
  if (ArrayHelper.isAllNegative(owners))   owners=null;
  if (collectionOwners != null && ArrayHelper.isAllNegative(collectionOwners)) {
    collectionOwners=null;
  }
}
