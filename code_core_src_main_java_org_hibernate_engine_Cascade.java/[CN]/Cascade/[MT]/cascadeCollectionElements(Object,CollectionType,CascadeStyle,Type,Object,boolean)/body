{
  boolean embeddedElements=eventSource.getEntityMode() != EntityMode.DOM4J || ((EntityType)collectionType.getElementType(eventSource.getFactory())).isEmbeddedInXML();
  boolean reallyDoCascade=style.reallyDoCascade(action) && embeddedElements && child != CollectionType.UNFETCHED_COLLECTION;
  if (reallyDoCascade) {
    if (log.isTraceEnabled()) {
      log.trace("cascade " + action + " for collection: "+ collectionType.getRole());
    }
    Iterator iter=action.getCascadableChildrenIterator(eventSource,collectionType,child);
    while (iter.hasNext()) {
      cascadeProperty(iter.next(),elemType,style,anything,isCascadeDeleteEnabled);
    }
    if (log.isTraceEnabled()) {
      log.trace("done cascade " + action + " for collection: "+ collectionType.getRole());
    }
  }
  final boolean deleteOrphans=style.hasOrphanDelete() && action.deleteOrphans() && elemType.isEntityType()&& child instanceof PersistentCollection;
  if (deleteOrphans) {
    if (log.isTraceEnabled()) {
      log.trace("deleting orphans for collection: " + collectionType.getRole());
    }
    final String entityName=collectionType.getAssociatedEntityName(eventSource.getFactory());
    deleteOrphans(entityName,(PersistentCollection)child);
    if (log.isTraceEnabled()) {
      log.trace("done deleting orphans for collection: " + collectionType.getRole());
    }
  }
}
