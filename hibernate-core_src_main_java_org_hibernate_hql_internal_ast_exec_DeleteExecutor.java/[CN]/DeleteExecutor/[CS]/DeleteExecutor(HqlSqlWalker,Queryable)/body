{
  super(walker,persister);
  final SessionFactoryImplementor factory=walker.getSessionFactoryHelper().getFactory();
  final Dialect dialect=factory.getJdbcServices().getJdbcEnvironment().getDialect();
  try {
    final DeleteStatement deleteStatement=(DeleteStatement)walker.getAST();
    final String idSubselectWhere;
    if (deleteStatement.hasWhereClause()) {
      final AST whereClause=deleteStatement.getWhereClause();
      final SqlGenerator gen=new SqlGenerator(factory);
      gen.whereClause(whereClause);
      parameterSpecifications=gen.getCollectedParameters();
      idSubselectWhere=gen.getSQL().length() > 7 ? gen.getSQL() : "";
    }
 else {
      parameterSpecifications=new ArrayList<>();
      idSubselectWhere="";
    }
    for (    Type type : persister.getPropertyTypes()) {
      if (type.isCollectionType()) {
        final CollectionType cType=(CollectionType)type;
        final AbstractCollectionPersister cPersister=(AbstractCollectionPersister)factory.getMetamodel().collectionPersister(cType.getRole());
        if (cPersister.isManyToMany()) {
          if (persister.getIdentifierColumnNames().length > 1 && !dialect.supportsTuplesInSubqueries()) {
            LOG.warn("This dialect is unable to cascade the delete into the many-to-many join table" + " when the entity has multiple primary keys.  Either properly setup cascading on" + " the constraints or manually clear the associations prior to deleting the entities.");
          }
 else {
            final String idSubselect="(select " + StringHelper.join(", ",persister.getIdentifierColumnNames()) + " from "+ persister.getTableName()+ idSubselectWhere+ ")";
            final String where="(" + StringHelper.join(", ",cPersister.getKeyColumnNames()) + ") in "+ idSubselect;
            final Delete delete=new Delete().setTableName(cPersister.getTableName()).setWhere(where);
            if (factory.getSessionFactoryOptions().isCommentsEnabled()) {
              delete.setComment("delete FKs in join table");
            }
            deletes.add(delete.toStatementString());
          }
        }
      }
    }
  }
 catch (  RecognitionException e) {
    throw new HibernateException("Unable to delete the FKs in the join table!",e);
  }
}
