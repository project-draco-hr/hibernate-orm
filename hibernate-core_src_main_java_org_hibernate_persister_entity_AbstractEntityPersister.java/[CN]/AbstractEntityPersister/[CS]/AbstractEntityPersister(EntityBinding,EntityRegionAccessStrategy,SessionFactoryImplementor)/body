{
  this.factory=factory;
  this.cacheAccessStrategy=cacheAccessStrategy;
  this.isLazyPropertiesCacheable=entityBinding.getCaching() == null ? false : entityBinding.getCaching().isCacheLazyProperties();
  this.cacheEntryStructure=factory.getSettings().isStructuredCacheEntriesEnabled() ? new StructuredCacheEntry(this) : new UnstructuredCacheEntry();
  this.entityMetamodel=new EntityMetamodel(entityBinding,factory);
  int batch=entityBinding.getBatchSize();
  if (batch == -1) {
    batch=factory.getSettings().getDefaultBatchFetchSize();
  }
  batchSize=batch;
  hasSubselectLoadableCollections=entityBinding.hasSubselectLoadableCollections();
  propertyMapping=new BasicEntityPropertyMapping(this);
  identifierColumnSpan=entityBinding.getEntityIdentifier().getValueBinding().getValuesSpan();
  rootTableKeyColumnNames=new String[identifierColumnSpan];
  rootTableKeyColumnReaders=new String[identifierColumnSpan];
  rootTableKeyColumnReaderTemplates=new String[identifierColumnSpan];
  identifierAliases=new String[identifierColumnSpan];
  rowIdName=entityBinding.getRowId();
  loaderName=entityBinding.getLoaderName();
  int i=0;
  for (  org.hibernate.metamodel.relational.Column col : entityBinding.getBaseTable().getPrimaryKey().getColumns()) {
    rootTableKeyColumnNames[i]=col.getColumnName().encloseInQuotesIfQuoted(factory.getDialect());
    if (col.getReadFragment() == null) {
      rootTableKeyColumnReaders[i]=rootTableKeyColumnNames[i];
      rootTableKeyColumnReaderTemplates[i]=getTemplateFromColumn(col,factory);
    }
 else {
      rootTableKeyColumnReaders[i]=col.getReadFragment();
      rootTableKeyColumnReaderTemplates[i]=getTemplateFromString(col.getReadFragment(),factory);
    }
    identifierAliases[i]=col.getAlias(factory.getDialect());
    i++;
  }
  if (entityBinding.isVersioned()) {
    Iterator<SimpleValue> valueIterator=entityBinding.getVersioningValueBinding().getValues().iterator();
    SimpleValue versionValue=valueIterator.next();
    if (!(versionValue instanceof org.hibernate.metamodel.relational.Column) || valueIterator.hasNext()) {
      throw new MappingException("Version must be a single column value.");
    }
    org.hibernate.metamodel.relational.Column versionColumn=(org.hibernate.metamodel.relational.Column)versionValue;
    versionColumnName=versionColumn.getColumnName().encloseInQuotesIfQuoted(factory.getDialect());
  }
 else {
    versionColumnName=null;
  }
  sqlWhereString=StringHelper.isNotEmpty(entityBinding.getWhereFilter()) ? "( " + entityBinding.getWhereFilter() + ") " : null;
  sqlWhereStringTemplate=getTemplateFromString(sqlWhereString,factory);
  final boolean lazyAvailable=isInstrumented();
  int hydrateSpan=entityMetamodel.getPropertySpan();
  propertyColumnSpans=new int[hydrateSpan];
  propertySubclassNames=new String[hydrateSpan];
  propertyColumnAliases=new String[hydrateSpan][];
  propertyColumnNames=new String[hydrateSpan][];
  propertyColumnFormulaTemplates=new String[hydrateSpan][];
  propertyColumnReaderTemplates=new String[hydrateSpan][];
  propertyColumnWriters=new String[hydrateSpan][];
  propertyUniqueness=new boolean[hydrateSpan];
  propertySelectable=new boolean[hydrateSpan];
  propertyColumnUpdateable=new boolean[hydrateSpan][];
  propertyColumnInsertable=new boolean[hydrateSpan][];
  HashSet thisClassProperties=new HashSet();
  lazyProperties=new HashSet();
  ArrayList lazyNames=new ArrayList();
  ArrayList lazyNumbers=new ArrayList();
  ArrayList lazyTypes=new ArrayList();
  ArrayList lazyColAliases=new ArrayList();
  i=0;
  boolean foundFormula=false;
  for (  AttributeBinding prop : entityBinding.getAttributeBindingClosure()) {
    if (prop == entityBinding.getEntityIdentifier().getValueBinding()) {
      continue;
    }
    thisClassProperties.add(prop);
    int span=prop.getValuesSpan();
    propertyColumnSpans[i]=span;
    propertySubclassNames[i]=prop.getEntityBinding().getEntity().getName();
    String[] colNames=new String[span];
    String[] colAliases=new String[span];
    String[] colReaderTemplates=new String[span];
    String[] colWriters=new String[span];
    String[] formulaTemplates=new String[span];
    int k=0;
    for (    SimpleValue thing : prop.getValues()) {
      colAliases[k]=thing.getAlias(factory.getDialect());
      if (thing instanceof DerivedValue) {
        foundFormula=true;
        formulaTemplates[k]=getTemplateFromString(((DerivedValue)thing).getExpression(),factory);
      }
 else {
        org.hibernate.metamodel.relational.Column col=(org.hibernate.metamodel.relational.Column)thing;
        colNames[k]=col.getColumnName().encloseInQuotesIfQuoted(factory.getDialect());
        colReaderTemplates[k]=getTemplateFromColumn(col,factory);
        colWriters[k]=col.getWriteFragment();
      }
      k++;
    }
    propertyColumnNames[i]=colNames;
    propertyColumnFormulaTemplates[i]=formulaTemplates;
    propertyColumnReaderTemplates[i]=colReaderTemplates;
    propertyColumnWriters[i]=colWriters;
    propertyColumnAliases[i]=colAliases;
    if (lazyAvailable && prop.isLazy()) {
      lazyProperties.add(prop.getAttribute().getName());
      lazyNames.add(prop.getAttribute().getName());
      lazyNumbers.add(i);
      lazyTypes.add(prop.getHibernateTypeDescriptor().getExplicitType());
      lazyColAliases.add(colAliases);
    }
    propertyColumnUpdateable[i]=prop.getColumnUpdateability();
    propertyColumnInsertable[i]=prop.getColumnInsertability();
    propertySelectable[i]=true;
    propertyUniqueness[i]=prop.isAlternateUniqueKey();
    i++;
  }
  hasFormulaProperties=foundFormula;
  lazyPropertyColumnAliases=ArrayHelper.to2DStringArray(lazyColAliases);
  lazyPropertyNames=ArrayHelper.toStringArray(lazyNames);
  lazyPropertyNumbers=ArrayHelper.toIntArray(lazyNumbers);
  lazyPropertyTypes=ArrayHelper.toTypeArray(lazyTypes);
  ArrayList columns=new ArrayList();
  ArrayList columnsLazy=new ArrayList();
  ArrayList columnReaderTemplates=new ArrayList();
  ArrayList aliases=new ArrayList();
  ArrayList formulas=new ArrayList();
  ArrayList formulaAliases=new ArrayList();
  ArrayList formulaTemplates=new ArrayList();
  ArrayList formulasLazy=new ArrayList();
  ArrayList types=new ArrayList();
  ArrayList names=new ArrayList();
  ArrayList classes=new ArrayList();
  ArrayList templates=new ArrayList();
  ArrayList propColumns=new ArrayList();
  ArrayList propColumnReaders=new ArrayList();
  ArrayList propColumnReaderTemplates=new ArrayList();
  ArrayList<FetchMode> joinedFetchesList=new ArrayList<FetchMode>();
  ArrayList<CascadeStyle> cascades=new ArrayList<CascadeStyle>();
  ArrayList<Boolean> definedBySubclass=new ArrayList<Boolean>();
  ArrayList propColumnNumbers=new ArrayList();
  ArrayList propFormulaNumbers=new ArrayList();
  ArrayList columnSelectables=new ArrayList();
  ArrayList propNullables=new ArrayList();
  subclassColumnClosure=ArrayHelper.toStringArray(columns);
  subclassColumnAliasClosure=ArrayHelper.toStringArray(aliases);
  subclassColumnLazyClosure=ArrayHelper.toBooleanArray(columnsLazy);
  subclassColumnSelectableClosure=ArrayHelper.toBooleanArray(columnSelectables);
  subclassColumnReaderTemplateClosure=ArrayHelper.toStringArray(columnReaderTemplates);
  subclassFormulaClosure=ArrayHelper.toStringArray(formulas);
  subclassFormulaTemplateClosure=ArrayHelper.toStringArray(formulaTemplates);
  subclassFormulaAliasClosure=ArrayHelper.toStringArray(formulaAliases);
  subclassFormulaLazyClosure=ArrayHelper.toBooleanArray(formulasLazy);
  subclassPropertyNameClosure=ArrayHelper.toStringArray(names);
  subclassPropertySubclassNameClosure=ArrayHelper.toStringArray(classes);
  subclassPropertyTypeClosure=ArrayHelper.toTypeArray(types);
  subclassPropertyNullabilityClosure=ArrayHelper.toBooleanArray(propNullables);
  subclassPropertyFormulaTemplateClosure=ArrayHelper.to2DStringArray(templates);
  subclassPropertyColumnNameClosure=ArrayHelper.to2DStringArray(propColumns);
  subclassPropertyColumnReaderClosure=ArrayHelper.to2DStringArray(propColumnReaders);
  subclassPropertyColumnReaderTemplateClosure=ArrayHelper.to2DStringArray(propColumnReaderTemplates);
  subclassPropertyColumnNumberClosure=ArrayHelper.to2DIntArray(propColumnNumbers);
  subclassPropertyFormulaNumberClosure=ArrayHelper.to2DIntArray(propFormulaNumbers);
  subclassPropertyCascadeStyleClosure=cascades.toArray(new CascadeStyle[cascades.size()]);
  subclassPropertyFetchModeClosure=joinedFetchesList.toArray(new FetchMode[joinedFetchesList.size()]);
  propertyDefinedOnSubclass=ArrayHelper.toBooleanArray(definedBySubclass);
  Map<String,String> filterDefaultConditionsByName=new HashMap<String,String>();
  for (  FilterDefinition filterDefinition : entityBinding.getFilterDefinitions()) {
    filterDefaultConditionsByName.put(filterDefinition.getFilterName(),filterDefinition.getDefaultFilterCondition());
  }
  filterHelper=new FilterHelper(filterDefaultConditionsByName,factory.getDialect(),factory.getSqlFunctionRegistry());
  temporaryIdTableName=null;
  temporaryIdTableDDL=null;
}
