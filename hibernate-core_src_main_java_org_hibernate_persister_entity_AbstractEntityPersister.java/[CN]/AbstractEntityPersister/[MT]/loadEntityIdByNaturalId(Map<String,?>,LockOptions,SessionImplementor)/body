{
  if (!hasNaturalIdentifier()) {
    throw new MappingException("persistent class did not define a natural-id : " + MessageHelper.infoString(this));
  }
  if (LOG.isTraceEnabled())   LOG.trace("Getting entity id for natural-id for: " + MessageHelper.infoString(this,naturalIdParameters,getFactory()));
  try {
    PreparedStatement ps=session.getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().prepareStatement(sqlEntityIdByNaturalIdString);
    try {
      int positions=1;
      final int[] naturalIdPropertyIndexes=this.getNaturalIdentifierProperties();
      for (int propIdx=0; propIdx < naturalIdPropertyIndexes.length; propIdx++) {
        final int naturalIdIdx=naturalIdPropertyIndexes[propIdx];
        final StandardProperty[] properties=entityMetamodel.getProperties();
        final StandardProperty property=properties[naturalIdIdx];
        final Object value=naturalIdParameters.get(property.getName());
        final Type propertyType=property.getType();
        propertyType.nullSafeSet(ps,value,positions,session);
        positions+=propertyType.getColumnSpan(session.getFactory());
      }
      ResultSet rs=ps.executeQuery();
      try {
        if (!rs.next()) {
          return null;
        }
        return (Serializable)getIdentifierType().hydrate(rs,getIdentifierAliases(),session,null);
      }
  finally {
        rs.close();
      }
    }
  finally {
      ps.close();
    }
  }
 catch (  SQLException e) {
    throw getFactory().getSQLExceptionHelper().convert(e,"could not retrieve entity id: " + MessageHelper.infoString(this,naturalIdParameters,getFactory()),sqlEntityIdByNaturalIdString);
  }
}
