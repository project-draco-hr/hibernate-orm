{
  if (!entityMetamodel.hasNaturalIdentifier()) {
    throw new HibernateException(String.format("Entity [%s] does not define a natural-id",getEntityName()));
  }
  final int[] naturalIdPropertyIndexes=this.getNaturalIdentifierProperties();
  if (naturalIdPropertyIndexes.length != naturalIdValues.size()) {
    throw new HibernateException(String.format("Entity [%s] defines its natural-id with %d properties but only %d were specified",getEntityName(),naturalIdPropertyIndexes.length,naturalIdValues.size()));
  }
  if (LOG.isTraceEnabled()) {
    LOG.tracef("Resolving natural-id [%s] to id : %s ",naturalIdValues,MessageHelper.infoString(this));
  }
  try {
    PreparedStatement ps=session.getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().prepareStatement(sqlEntityIdByNaturalIdString);
    try {
      int positions=1;
      for (      int naturalIdIdx : naturalIdPropertyIndexes) {
        final StandardProperty property=entityMetamodel.getProperties()[naturalIdIdx];
        if (!naturalIdValues.containsKey(property.getName())) {
          throw new HibernateException(String.format("No value specified for natural-id property %s#%s",getEntityName(),property.getName()));
        }
        final Object value=naturalIdValues.get(property.getName());
        if (value == null) {
        }
        final Type propertyType=property.getType();
        propertyType.nullSafeSet(ps,value,positions,session);
        positions+=propertyType.getColumnSpan(session.getFactory());
      }
      ResultSet rs=ps.executeQuery();
      try {
        if (!rs.next()) {
          return null;
        }
        return (Serializable)getIdentifierType().hydrate(rs,getIdentifierAliases(),session,null);
      }
  finally {
        rs.close();
      }
    }
  finally {
      ps.close();
    }
  }
 catch (  SQLException e) {
    throw getFactory().getSQLExceptionHelper().convert(e,String.format("could not resolve natural-id [%s] to id : %s",naturalIdValues,MessageHelper.infoString(this)),sqlEntityIdByNaturalIdString);
  }
}
