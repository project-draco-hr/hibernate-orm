{
  if (!hasLazyProperties())   throw new AssertionFailure("no lazy properties");
  LOG.trace("Initializing lazy properties from datastore");
  try {
    Object result=null;
    PreparedStatement ps=null;
    try {
      final String lazySelect=getSQLLazySelectString();
      ResultSet rs=null;
      try {
        if (lazySelect != null) {
          ps=session.getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().prepareStatement(lazySelect);
          getIdentifierType().nullSafeSet(ps,id,1,session);
          rs=session.getTransactionCoordinator().getJdbcCoordinator().getResultSetReturn().extract(ps);
          rs.next();
        }
        final Object[] snapshot=entry.getLoadedState();
        for (int j=0; j < lazyPropertyNames.length; j++) {
          Object propValue=lazyPropertyTypes[j].nullSafeGet(rs,lazyPropertyColumnAliases[j],session,entity);
          if (initializeLazyProperty(fieldName,entity,session,snapshot,j,propValue)) {
            result=propValue;
          }
        }
      }
  finally {
        if (rs != null) {
          session.getTransactionCoordinator().getJdbcCoordinator().release(rs);
        }
      }
    }
  finally {
      if (ps != null) {
        session.getTransactionCoordinator().getJdbcCoordinator().release(ps);
      }
    }
    LOG.trace("Done initializing lazy properties");
    return result;
  }
 catch (  SQLException sqle) {
    throw getFactory().getSQLExceptionHelper().convert(sqle,"could not initialize lazy properties: " + MessageHelper.infoString(this,id,getFactory()),getSQLLazySelectString());
  }
}
