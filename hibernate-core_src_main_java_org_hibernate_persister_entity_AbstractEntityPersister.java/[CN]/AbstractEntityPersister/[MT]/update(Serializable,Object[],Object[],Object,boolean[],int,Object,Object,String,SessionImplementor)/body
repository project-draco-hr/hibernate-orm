{
  final Expectation expectation=Expectations.appropriateExpectation(updateResultCheckStyles[j]);
  final boolean useBatch=j == 0 && expectation.canBeBatched() && isBatchable();
  if (useBatch && updateBatchKey == null) {
    updateBatchKey=new BasicBatchKey(getEntityName() + "#UPDATE",expectation);
  }
  final boolean callable=isUpdateCallable(j);
  final boolean useVersion=j == 0 && isVersioned();
  if (LOG.isTraceEnabled()) {
    LOG.tracev("Updating entity: {0}",MessageHelper.infoString(this,id,getFactory()));
    if (useVersion)     LOG.tracev("Existing version: {0} -> New version:{1}",oldVersion,fields[getVersionProperty()]);
  }
  try {
    int index=1;
    final PreparedStatement update;
    if (useBatch) {
      update=session.getTransactionCoordinator().getJdbcCoordinator().getBatch(updateBatchKey).getBatchStatement(sql,callable);
    }
 else {
      update=session.getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().prepareStatement(sql,callable);
    }
    try {
      index+=expectation.prepare(update);
      index=dehydrate(id,fields,rowId,includeProperty,propertyColumnUpdateable,j,update,session,index,true);
      if (useVersion && entityMetamodel.getOptimisticLockStyle() == OptimisticLockStyle.VERSION) {
        if (checkVersion(includeProperty)) {
          getVersionType().nullSafeSet(update,oldVersion,index,session);
        }
      }
 else       if (isAllOrDirtyOptLocking() && oldFields != null) {
        boolean[] versionability=getPropertyVersionability();
        boolean[] includeOldField=entityMetamodel.getOptimisticLockStyle() == OptimisticLockStyle.ALL ? getPropertyUpdateability() : includeProperty;
        Type[] types=getPropertyTypes();
        for (int i=0; i < entityMetamodel.getPropertySpan(); i++) {
          boolean include=includeOldField[i] && isPropertyOfTable(i,j) && versionability[i];
          if (include) {
            boolean[] settable=types[i].toColumnNullness(oldFields[i],getFactory());
            types[i].nullSafeSet(update,oldFields[i],index,settable,session);
            index+=ArrayHelper.countTrue(settable);
          }
        }
      }
      if (useBatch) {
        session.getTransactionCoordinator().getJdbcCoordinator().getBatch(updateBatchKey).addToBatch();
        return true;
      }
 else {
        return check(update.executeUpdate(),id,j,expectation,update);
      }
    }
 catch (    SQLException e) {
      if (useBatch) {
        session.getTransactionCoordinator().getJdbcCoordinator().abortBatch();
      }
      throw e;
    }
 finally {
      if (!useBatch) {
        update.close();
      }
    }
  }
 catch (  SQLException e) {
    throw getFactory().getSQLExceptionHelper().convert(e,"could not update: " + MessageHelper.infoString(this,id,getFactory()),sql);
  }
}
