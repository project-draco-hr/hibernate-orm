{
  session.getJdbcCoordinator().executeBatch();
  try {
    PreparedStatement ps=session.getJdbcCoordinator().getStatementPreparer().prepareStatement(selectionSQL);
    try {
      getIdentifierType().nullSafeSet(ps,id,1,session);
      ResultSet rs=session.getJdbcCoordinator().getResultSetReturn().extract(ps);
      try {
        if (!rs.next()) {
          throw new HibernateException("Unable to locate row for retrieval of generated properties: " + MessageHelper.infoString(this,id,getFactory()));
        }
        int propertyIndex=-1;
        for (        NonIdentifierAttribute attribute : entityMetamodel.getProperties()) {
          propertyIndex++;
          final ValueGeneration valueGeneration=attribute.getValueGenerationStrategy();
          if (isReadRequired(valueGeneration,matchTiming)) {
            final Object hydratedState=attribute.getType().hydrate(rs,getPropertyAliases("",propertyIndex),session,entity);
            state[propertyIndex]=attribute.getType().resolve(hydratedState,session,entity);
            setPropertyValue(entity,propertyIndex,state[propertyIndex]);
          }
        }
      }
  finally {
        if (rs != null) {
          session.getJdbcCoordinator().getResourceRegistry().release(rs,ps);
        }
      }
    }
  finally {
      session.getJdbcCoordinator().getResourceRegistry().release(ps);
      session.getJdbcCoordinator().afterStatementExecution();
    }
  }
 catch (  SQLException e) {
    throw getFactory().getSQLExceptionHelper().convert(e,"unable to select generated column values",selectionSQL);
  }
}
