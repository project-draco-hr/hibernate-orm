{
  final boolean[] tableUpdateNeeded=getTableUpdateNeeded(dirtyFields,hasDirtyCollection);
  final int span=getTableSpan();
  final boolean[] propsToUpdate;
  final String[] updateStrings;
  EntityEntry entry=session.getPersistenceContext().getEntry(object);
  if (entry == null && !isMutable()) {
    throw new IllegalStateException("Updating immutable entity that is not in session yet!");
  }
  if ((entityMetamodel.isDynamicUpdate() && dirtyFields != null)) {
    propsToUpdate=getPropertiesToUpdate(dirtyFields,hasDirtyCollection);
    updateStrings=new String[span];
    for (int j=0; j < span; j++) {
      updateStrings[j]=tableUpdateNeeded[j] ? generateUpdateString(propsToUpdate,j,oldFields,j == 0 && rowId != null) : null;
    }
  }
 else   if (!isModifiableEntity(entry)) {
    propsToUpdate=getPropertiesToUpdate((dirtyFields == null ? ArrayHelper.EMPTY_INT_ARRAY : dirtyFields),hasDirtyCollection);
    updateStrings=new String[span];
    for (int j=0; j < span; j++) {
      updateStrings[j]=tableUpdateNeeded[j] ? generateUpdateString(propsToUpdate,j,oldFields,j == 0 && rowId != null) : null;
    }
  }
 else {
    updateStrings=getUpdateStrings(rowId != null,hasUninitializedLazyProperties(object));
    propsToUpdate=getPropertyUpdateability(object);
  }
  for (int j=0; j < span; j++) {
    if (tableUpdateNeeded[j]) {
      updateOrInsert(id,fields,oldFields,j == 0 ? rowId : null,propsToUpdate,j,oldVersion,object,updateStrings[j],session);
    }
  }
}
