{
  if (isInverseTable(j)) {
    return;
  }
  if (isNullableTable(j) && isAllNull(fields,j)) {
    return;
  }
  if (LOG.isTraceEnabled()) {
    LOG.tracev("Inserting entity: {0}",MessageHelper.infoString(this,id,getFactory()));
    if (j == 0 && isVersioned()) {
      LOG.tracev("Version: {0}",Versioning.getVersion(fields,this));
    }
  }
  final Expectation expectation=Expectations.appropriateExpectation(insertResultCheckStyles[j]);
  final boolean useBatch=j == 0 && expectation.canBeBatched();
  if (useBatch && inserBatchKey == null) {
    inserBatchKey=new BasicBatchKey(getEntityName() + "#INSERT",expectation);
  }
  final boolean callable=isInsertCallable(j);
  try {
    final PreparedStatement insert;
    if (useBatch) {
      insert=session.getJdbcCoordinator().getBatch(inserBatchKey).getBatchStatement(sql,callable);
    }
 else {
      insert=session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql,callable);
    }
    try {
      int index=1;
      index+=expectation.prepare(insert);
      dehydrate(id,fields,null,notNull,propertyColumnInsertable,j,insert,session,index,false);
      if (useBatch) {
        session.getJdbcCoordinator().getBatch(inserBatchKey).addToBatch();
      }
 else {
        expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(insert),insert,-1);
      }
    }
 catch (    SQLException e) {
      if (useBatch) {
        session.getJdbcCoordinator().abortBatch();
      }
      throw e;
    }
 finally {
      if (!useBatch) {
        session.getJdbcCoordinator().getResourceRegistry().release(insert);
        session.getJdbcCoordinator().afterStatementExecution();
      }
    }
  }
 catch (  SQLException e) {
    throw getFactory().getSQLExceptionHelper().convert(e,"could not insert: " + MessageHelper.infoString(this),sql);
  }
}
