{
  Select select=new Select(getFactory().getDialect());
  if (getFactory().getSettings().isCommentsEnabled()) {
    select.setComment("get current natural-id->entity-id state " + getEntityName());
  }
  final String rootAlias=getRootAlias();
  select.setSelectClause(identifierSelectFragment(rootAlias,""));
  select.setFromClause(fromTableFragment(rootAlias) + fromJoinFragment(rootAlias,true,false));
  final StringBuilder whereClause=new StringBuilder();
  final int[] propertyTableNumbers=getPropertyTableNumbers();
  final int[] naturalIdPropertyIndexes=this.getNaturalIdentifierProperties();
  for (int propIdx=0; propIdx < naturalIdPropertyIndexes.length; propIdx++) {
    if (propIdx > 0) {
      whereClause.append(" and ");
    }
    final int naturalIdIdx=naturalIdPropertyIndexes[propIdx];
    final String tableAlias=generateTableAlias(rootAlias,propertyTableNumbers[naturalIdIdx]);
    final String[] propertyColumnNames=getPropertyColumnNames(naturalIdIdx);
    final String[] aliasedPropertyColumns=StringHelper.qualify(tableAlias,propertyColumnNames);
    whereClause.append(StringHelper.join("=? and ",aliasedPropertyColumns)).append("=?");
  }
  whereClause.append(whereJoinFragment(getRootAlias(),true,false));
  return select.setOuterJoins("","").setWhereClause(whereClause.toString()).toStatementString();
}
