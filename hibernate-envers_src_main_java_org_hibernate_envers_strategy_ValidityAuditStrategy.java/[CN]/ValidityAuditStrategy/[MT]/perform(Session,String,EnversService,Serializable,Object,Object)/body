{
  final AuditEntitiesConfiguration audEntitiesCfg=enversService.getAuditEntitiesConfiguration();
  final String auditedEntityName=audEntitiesCfg.getAuditEntityName(entityName);
  final String revisionInfoEntityName=enversService.getAuditEntitiesConfiguration().getRevisionInfoEntityName();
  session.save(auditedEntityName,data);
  final boolean reuseEntityIdentifier=enversService.getGlobalConfiguration().isAllowIdentifierReuse();
  if (reuseEntityIdentifier || getRevisionType(enversService,data) != RevisionType.ADD) {
    ((EventSource)session).getActionQueue().registerProcess(new BeforeTransactionCompletionProcess(){
      @Override public void doBeforeTransactionCompletion(      final SessionImplementor sessionImplementor){
        final Queryable productionEntityQueryable=getQueryable(entityName,sessionImplementor);
        final Queryable rootProductionEntityQueryable=getQueryable(productionEntityQueryable.getRootEntityName(),sessionImplementor);
        final Queryable auditedEntityQueryable=getQueryable(auditedEntityName,sessionImplementor);
        final Queryable rootAuditedEntityQueryable=getQueryable(auditedEntityQueryable.getRootEntityName(),sessionImplementor);
        final String updateTableName;
        if (UnionSubclassEntityPersister.class.isInstance(rootProductionEntityQueryable)) {
          updateTableName=auditedEntityQueryable.getSubclassTableName(0);
        }
 else {
          updateTableName=rootAuditedEntityQueryable.getTableName();
        }
        final Type revisionInfoIdType=sessionImplementor.getFactory().getEntityPersister(revisionInfoEntityName).getIdentifierType();
        final String revEndColumnName=rootAuditedEntityQueryable.toColumns(enversService.getAuditEntitiesConfiguration().getRevisionEndFieldName())[0];
        final boolean isRevisionEndTimestampEnabled=enversService.getAuditEntitiesConfiguration().isRevisionEndTimestampEnabled();
        final Update update=new Update(sessionImplementor.getFactory().getDialect()).setTableName(updateTableName);
        update.addColumn(revEndColumnName);
        if (isRevisionEndTimestampEnabled) {
          update.addColumn(rootAuditedEntityQueryable.toColumns(enversService.getAuditEntitiesConfiguration().getRevisionEndTimestampFieldName())[0]);
        }
        update.addPrimaryKeyColumns(rootProductionEntityQueryable.getIdentifierColumnNames());
        update.addWhereColumn(rootAuditedEntityQueryable.toColumns(enversService.getAuditEntitiesConfiguration().getRevisionNumberPath())[0],"<> ?");
        update.addWhereColumn(revEndColumnName," is null");
        final String updateSql=update.toStatementString();
        int rowCount=((Session)sessionImplementor).doReturningWork(new ReturningWork<Integer>(){
          @Override public Integer execute(          Connection connection) throws SQLException {
            PreparedStatement preparedStatement=sessionImplementor.getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().prepareStatement(updateSql);
            try {
              int index=1;
              final Number revisionNumber=enversService.getRevisionInfoNumberReader().getRevisionNumber(revision);
              revisionInfoIdType.nullSafeSet(preparedStatement,revisionNumber,index,sessionImplementor);
              index+=revisionInfoIdType.getColumnSpan(sessionImplementor.getFactory());
              if (isRevisionEndTimestampEnabled) {
                final Object revEndTimestampObj=revisionTimestampGetter.get(revision);
                final Date revisionEndTimestamp=convertRevEndTimestampToDate(revEndTimestampObj);
                final Type revEndTsType=rootAuditedEntityQueryable.getPropertyType(enversService.getAuditEntitiesConfiguration().getRevisionEndTimestampFieldName());
                revEndTsType.nullSafeSet(preparedStatement,revisionEndTimestamp,index,sessionImplementor);
                index+=revEndTsType.getColumnSpan(sessionImplementor.getFactory());
              }
              final Type idType=rootProductionEntityQueryable.getIdentifierType();
              idType.nullSafeSet(preparedStatement,id,index,sessionImplementor);
              index+=idType.getColumnSpan(sessionImplementor.getFactory());
              final Type revType=rootAuditedEntityQueryable.getPropertyType(enversService.getAuditEntitiesConfiguration().getRevisionNumberPath());
              revType.nullSafeSet(preparedStatement,revisionNumber,index,sessionImplementor);
              return sessionImplementor.getTransactionCoordinator().getJdbcCoordinator().getResultSetReturn().executeUpdate(preparedStatement);
            }
  finally {
              sessionImplementor.getTransactionCoordinator().getJdbcCoordinator().release(preparedStatement);
            }
          }
        }
);
        if (rowCount != 1 && (!reuseEntityIdentifier || (getRevisionType(enversService,data) != RevisionType.ADD))) {
          throw new RuntimeException("Cannot update previous revision for entity " + auditedEntityName + " and id "+ id);
        }
      }
    }
);
  }
  sessionCacheCleaner.scheduleAuditDataRemoval(session,data);
}
