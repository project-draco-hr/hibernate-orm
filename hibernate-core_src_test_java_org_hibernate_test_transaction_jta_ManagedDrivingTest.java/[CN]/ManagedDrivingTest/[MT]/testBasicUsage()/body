{
  final TransactionContext transactionContext=new TransactionContextImpl(new TransactionEnvironmentImpl(serviceRegistry)){
    @Override public ConnectionReleaseMode getConnectionReleaseMode(){
      return ConnectionReleaseMode.AFTER_STATEMENT;
    }
  }
;
  final TransactionCoordinatorImpl transactionCoordinator=new TransactionCoordinatorImpl(null,transactionContext);
  final JournalingTransactionObserver transactionObserver=new JournalingTransactionObserver();
  transactionCoordinator.addObserver(transactionObserver);
  final LogicalConnectionImplementor logicalConnection=transactionCoordinator.getJdbcCoordinator().getLogicalConnection();
  Connection connection=logicalConnection.getShareableConnectionProxy();
  try {
    Statement statement=connection.createStatement();
    statement.execute("drop table SANDBOX_JDBC_TST if exists");
    statement.execute("create table SANDBOX_JDBC_TST ( ID integer, NAME varchar(100) )");
    assertTrue(logicalConnection.getResourceRegistry().hasRegisteredResources());
    assertTrue(logicalConnection.isPhysicallyConnected());
    statement.close();
    assertFalse(logicalConnection.getResourceRegistry().hasRegisteredResources());
    assertFalse(logicalConnection.isPhysicallyConnected());
  }
 catch (  SQLException sqle) {
    fail("incorrect exception type : SQLException");
  }
  JtaPlatform instance=((ServiceProxy)serviceRegistry.getService(JtaPlatform.class)).getTargetInstance();
  TransactionManager transactionManager=instance.retrieveTransactionManager();
  transactionManager.begin();
  TransactionImplementor txn=transactionCoordinator.getTransaction();
  txn.begin();
  assertEquals(1,transactionObserver.getBegins());
  assertFalse(txn.isInitiator());
  connection=logicalConnection.getShareableConnectionProxy();
  try {
    PreparedStatement ps=connection.prepareStatement("insert into SANDBOX_JDBC_TST( ID, NAME ) values ( ?, ? )");
    ps.setLong(1,1);
    ps.setString(2,"name");
    ps.execute();
    assertTrue(logicalConnection.getResourceRegistry().hasRegisteredResources());
    ps.close();
    assertFalse(logicalConnection.getResourceRegistry().hasRegisteredResources());
    ps=connection.prepareStatement("select * from SANDBOX_JDBC_TST");
    ps.executeQuery();
    connection.prepareStatement("delete from SANDBOX_JDBC_TST").execute();
    assertTrue(logicalConnection.getResourceRegistry().hasRegisteredResources());
    assertTrue(logicalConnection.isPhysicallyConnected());
    txn.commit();
    assertTrue(logicalConnection.getResourceRegistry().hasRegisteredResources());
    assertTrue(logicalConnection.isPhysicallyConnected());
    assertEquals(0,transactionObserver.getBeforeCompletions());
    assertEquals(0,transactionObserver.getAfterCompletions());
    transactionManager.commit();
    assertFalse(logicalConnection.getResourceRegistry().hasRegisteredResources());
    assertFalse(logicalConnection.isPhysicallyConnected());
    assertEquals(1,transactionObserver.getBeforeCompletions());
    assertEquals(1,transactionObserver.getAfterCompletions());
  }
 catch (  SQLException sqle) {
    try {
      transactionManager.rollback();
    }
 catch (    Exception ignore) {
    }
    fail("incorrect exception type : SQLException");
  }
catch (  Throwable reThrowable) {
    try {
      transactionManager.rollback();
    }
 catch (    Exception ignore) {
    }
    throw reThrowable;
  }
 finally {
    logicalConnection.close();
  }
}
