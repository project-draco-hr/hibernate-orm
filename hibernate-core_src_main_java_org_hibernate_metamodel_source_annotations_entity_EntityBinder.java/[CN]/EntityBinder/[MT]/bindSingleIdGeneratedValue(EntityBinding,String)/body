{
  AnnotationInstance generatedValueAnn=JandexHelper.getSingleAnnotation(entityClass.getClassInfo(),JPADotNames.GENERATED_VALUE);
  if (generatedValueAnn == null) {
    return;
  }
  String idName=JandexHelper.getPropertyName(generatedValueAnn.target());
  if (!idPropertyName.equals(idName)) {
    throw new AssertionFailure(String.format("Attribute[%s.%s] with @GeneratedValue doesn't have a @Id.",entityClass.getName(),idPropertyName));
  }
  String generator=JandexHelper.getValue(generatedValueAnn,"generator",String.class);
  IdGenerator idGenerator=null;
  if (StringHelper.isNotEmpty(generator)) {
    idGenerator=meta.getIdGenerator(generator);
    if (idGenerator == null) {
      throw new MappingException(String.format("@GeneratedValue on %s.%s referring an undefined generator [%s]",entityClass.getName(),idName,generator));
    }
    entityBinding.getEntityIdentifier().setIdGenerator(idGenerator);
  }
  GenerationType generationType=JandexHelper.getValueAsEnum(generatedValueAnn,"strategy",GenerationType.class);
  String strategy=IdGeneratorBinder.generatorType(generationType,meta.getOptions().useNewIdentifierGenerators());
  if (idGenerator != null && !strategy.equals(idGenerator.getStrategy())) {
    throw new MappingException(String.format("Inconsistent Id Generation strategy of @GeneratedValue on %s.%s",entityClass.getName(),idName));
  }
  if (idGenerator == null) {
    idGenerator=new IdGenerator("NAME",strategy,new HashMap<String,String>());
    entityBinding.getEntityIdentifier().setIdGenerator(idGenerator);
  }
}
