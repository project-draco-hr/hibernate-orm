{
  EmbeddedCacheManager localManager=ClusterAwareRegionFactory.getCacheManager(DualNodeTestCase.LOCAL);
  EmbeddedCacheManager remoteManager=ClusterAwareRegionFactory.getCacheManager(DualNodeTestCase.REMOTE);
  String cacheName;
  if (useNamedRegion) {
    cacheName="AccountRegion";
    localManager.defineConfiguration(cacheName,localManager.getCacheConfiguration("replicated-query"));
    remoteManager.defineConfiguration(cacheName,remoteManager.getCacheConfiguration("replicated-query"));
  }
 else {
    cacheName="replicated-query";
  }
  localQueryCache=localManager.getCache(cacheName);
  localQueryListener=new CacheAccessListener();
  localQueryCache.addListener(localQueryListener);
  TransactionManager localTM=DualNodeJtaTransactionManagerImpl.getInstance(DualNodeTestCase.LOCAL);
  remoteQueryCache=remoteManager.getCache(cacheName);
  remoteQueryListener=new CacheAccessListener();
  remoteQueryCache.addListener(remoteQueryListener);
  TransactionManager remoteTM=DualNodeJtaTransactionManagerImpl.getInstance(DualNodeTestCase.REMOTE);
  SessionFactory localFactory=sessionFactory();
  SessionFactory remoteFactory=secondNodeEnvironment().getSessionFactory();
  ClassLoaderTestDAO dao0=new ClassLoaderTestDAO(localFactory,localTM);
  ClassLoaderTestDAO dao1=new ClassLoaderTestDAO(remoteFactory,remoteTM);
  setupEntities(dao0);
  String branch="63088";
  assertEquals(branch + " has correct # of accounts",6,dao0.getCountForBranch(branch,useNamedRegion));
  assertEquals("Query cache used",1,localQueryListener.getSawRegionModificationCount());
  localQueryListener.clearSawRegionModification();
  sleep(SLEEP_TIME);
  assertEquals("Query cache used",1,remoteQueryListener.getSawRegionModificationCount());
  remoteQueryListener.clearSawRegionModification();
  log.info("Repeat first query (get count for branch + " + branch + " ) on remote node");
  assertEquals("63088 has correct # of accounts",6,dao1.getCountForBranch(branch,useNamedRegion));
  assertEquals("Query cache used",1,remoteQueryListener.getSawRegionModificationCount());
  remoteQueryListener.clearSawRegionModification();
  sleep(SLEEP_TIME);
  assertEquals("Query cache used",1,localQueryListener.getSawRegionModificationCount());
  localQueryListener.clearSawRegionModification();
  log.info("First query on node 1 done");
  sleep(SLEEP_TIME);
  log.info("Do query Smith's branch");
  assertEquals("Correct branch for Smith","94536",dao0.getBranch(dao0.getSmith(),useNamedRegion));
  log.info("Do query Jone's balance");
  assertEquals("Correct high balances for Jones",40,dao0.getTotalBalance(dao0.getJones(),useNamedRegion));
  assertEquals("Query cache used",2,localQueryListener.getSawRegionModificationCount());
  localQueryListener.clearSawRegionModification();
  log.info("Second set of queries on node0 done");
  sleep(SLEEP_TIME);
  assertEquals("Query cache remotely modified",2,remoteQueryListener.getSawRegionModificationCount());
  remoteQueryListener.clearSawRegionModification();
  log.info("Repeat second set of queries on node1");
  log.info("Again query Smith's branch");
  assertEquals("Correct branch for Smith","94536",dao1.getBranch(dao1.getSmith(),useNamedRegion));
  log.info("Again query Jone's balance");
  assertEquals("Correct high balances for Jones",40,dao1.getTotalBalance(dao1.getJones(),useNamedRegion));
  assertEquals("Query cache modified",0,remoteQueryListener.getSawRegionModificationCount());
  assertEquals("Query cache accessed",2,remoteQueryListener.getSawRegionAccessCount());
  remoteQueryListener.clearSawRegionAccess();
  log.info("Second set of queries on node1 done");
  sleep(SLEEP_TIME);
  modifyEntities(dao1);
  sleep(SLEEP_TIME);
  assertEquals("63088 has correct # of accounts",7,dao0.getCountForBranch("63088",useNamedRegion));
  assertEquals("Correct branch for Smith","63088",dao0.getBranch(dao0.getSmith(),useNamedRegion));
  assertEquals("Correct high balances for Jones",50,dao0.getTotalBalance(dao0.getJones(),useNamedRegion));
  log.info("Third set of queries on node0 done");
}
