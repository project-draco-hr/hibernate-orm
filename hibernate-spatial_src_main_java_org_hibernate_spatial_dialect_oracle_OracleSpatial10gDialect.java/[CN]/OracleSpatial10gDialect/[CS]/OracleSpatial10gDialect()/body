{
  super();
  features.put(OGC_STRICT,new Boolean(true));
  configure();
  registerColumnType(java.sql.Types.STRUCT,"MDSYS.SDO_GEOMETRY");
  registerFunction("dimension",new GetDimensionFunction());
  registerFunction("geometrytype",new GetGeometryTypeFunction());
  registerFunction("srid",new SDOObjectProperty("SDO_SRID",StandardBasicTypes.INTEGER));
  registerFunction("envelope",new StandardSQLFunction("SDO_GEOM.SDO_MBR",GeometryType.INSTANCE));
  registerFunction("astext",new AsTextFunction());
  registerFunction("asbinary",new StandardSQLFunction("SDO_UTIL.TO_WKBGEOMETRY",StandardBasicTypes.BINARY));
  registerFunction("isempty",new WrappedOGCFunction("OGC_ISEMPTY",StandardBasicTypes.BOOLEAN,new boolean[]{true}));
  registerFunction("issimple",new WrappedOGCFunction("OGC_ISSIMPLE",StandardBasicTypes.BOOLEAN,new boolean[]{true}));
  registerFunction("boundary",new WrappedOGCFunction("OGC_BOUNDARY",GeometryType.INSTANCE,new boolean[]{true}));
  registerFunction("overlaps",new SpatialRelateFunction("overlaps",SpatialRelation.OVERLAPS));
  registerFunction("intersects",new SpatialRelateFunction("intersects",SpatialRelation.INTERSECTS));
  registerFunction("contains",new SpatialRelateFunction("contains",SpatialRelation.CONTAINS));
  registerFunction("crosses",new SpatialRelateFunction("crosses",SpatialRelation.CROSSES));
  registerFunction("disjoint",new SpatialRelateFunction("disjoint",SpatialRelation.DISJOINT));
  registerFunction("equals",new SpatialRelateFunction("equals",SpatialRelation.EQUALS));
  registerFunction("touches",new SpatialRelateFunction("touches",SpatialRelation.TOUCHES));
  registerFunction("within",new SpatialRelateFunction("within",SpatialRelation.WITHIN));
  registerFunction("relate",new WrappedOGCFunction("OGC_RELATE",StandardBasicTypes.BOOLEAN,new boolean[]{true,true,false}));
  registerFunction("distance",new SpatialAnalysisFunction("distance",StandardBasicTypes.DOUBLE,SpatialAnalysis.DISTANCE));
  registerFunction("buffer",new SpatialAnalysisFunction("buffer",GeometryType.INSTANCE,SpatialAnalysis.BUFFER));
  registerFunction("convexhull",new SpatialAnalysisFunction("convexhull",GeometryType.INSTANCE,SpatialAnalysis.CONVEXHULL));
  registerFunction("difference",new SpatialAnalysisFunction("difference",GeometryType.INSTANCE,SpatialAnalysis.DIFFERENCE));
  registerFunction("intersection",new SpatialAnalysisFunction("intersection",GeometryType.INSTANCE,SpatialAnalysis.INTERSECTION));
  registerFunction("symdifference",new SpatialAnalysisFunction("symdifference",GeometryType.INSTANCE,SpatialAnalysis.SYMDIFFERENCE));
  registerFunction("geomunion",new SpatialAnalysisFunction("union",GeometryType.INSTANCE,SpatialAnalysis.UNION));
  registerFunction("extent",new SpatialAggregationFunction("extent",GeometryType.INSTANCE,false,OracleSpatialAggregate.EXTENT));
  registerFunction("transform",new StandardSQLFunction("SDO_CS.TRANSFORM",GeometryType.INSTANCE));
  registerFunction("centroid",new SpatialAggregationFunction("extent",GeometryType.INSTANCE,false,OracleSpatialAggregate.CENTROID));
  registerFunction("concat_lines",new SpatialAggregationFunction("extent",GeometryType.INSTANCE,false,OracleSpatialAggregate.CONCAT_LINES));
  registerFunction("aggr_convexhull",new SpatialAggregationFunction("extent",GeometryType.INSTANCE,false,OracleSpatialAggregate.CONVEXHULL));
  registerFunction("aggr_union",new SpatialAggregationFunction("extent",GeometryType.INSTANCE,false,OracleSpatialAggregate.UNION));
  registerFunction("lrs_concat",new SpatialAggregationFunction("lrsconcat",GeometryType.INSTANCE,false,OracleSpatialAggregate.LRS_CONCAT));
}
