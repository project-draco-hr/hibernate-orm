{
  Session s=openSession();
  Transaction t=s.beginTransaction();
  Course course=new Course();
  course.setCourseCode("HIB");
  course.setDescription("Hibernate Training");
  s.save(course);
  Student gavin=new Student();
  gavin.setName("Gavin King");
  gavin.setStudentNumber(666);
  s.save(gavin);
  Student xam=new Student();
  xam.setName("Max Rydahl Andersen");
  xam.setStudentNumber(101);
  s.save(xam);
  Enrolment enrolment1=new Enrolment();
  enrolment1.setCourse(course);
  enrolment1.setCourseCode(course.getCourseCode());
  enrolment1.setSemester((short)1);
  enrolment1.setYear((short)1999);
  enrolment1.setStudent(xam);
  enrolment1.setStudentNumber(xam.getStudentNumber());
  xam.getEnrolments().add(enrolment1);
  s.save(enrolment1);
  Enrolment enrolment2=new Enrolment();
  enrolment2.setCourse(course);
  enrolment2.setCourseCode(course.getCourseCode());
  enrolment2.setSemester((short)3);
  enrolment2.setYear((short)1998);
  enrolment2.setStudent(gavin);
  enrolment2.setStudentNumber(gavin.getStudentNumber());
  gavin.getEnrolments().add(enrolment2);
  s.save(enrolment2);
  List list=s.createCriteria(Enrolment.class).createAlias("student","s").createAlias("course","c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list();
  assertEquals(list.size(),2);
  assertEquals(((Object[])list.get(0)).length,2);
  assertEquals(((Object[])list.get(1)).length,2);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  s.createCriteria(Enrolment.class).createAlias("student","s").createAlias("course","c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list();
  assertEquals(list.size(),2);
  assertEquals(((Object[])list.get(0)).length,2);
  assertEquals(((Object[])list.get(1)).length,2);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  s.createCriteria(Enrolment.class).createAlias("student","s").createAlias("course","c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list();
  assertEquals(list.size(),2);
  assertEquals(((Object[])list.get(0)).length,2);
  assertEquals(((Object[])list.get(1)).length,2);
  s.delete(enrolment1);
  s.delete(enrolment2);
  s.delete(course);
  s.delete(gavin);
  s.delete(xam);
  t.commit();
  s.close();
}
