{
  final ClassLoaderService classLoaderService=options.getServiceRegistry().getService(ClassLoaderService.class);
  final BasicTypeRegistry basicTypeRegistry=new BasicTypeRegistry();
  final TypeContributions typeContributions=new TypeContributions(){
    @Override public void contributeType(    org.hibernate.type.BasicType type){
      basicTypeRegistry.register(type);
    }
    @Override public void contributeType(    BasicType type,    String... keys){
      basicTypeRegistry.register(type,keys);
    }
    @Override public void contributeType(    UserType type,    String[] keys){
      basicTypeRegistry.register(type,keys);
    }
    @Override public void contributeType(    CompositeUserType type,    String[] keys){
      basicTypeRegistry.register(type,keys);
    }
  }
;
  final Dialect dialect=options.getServiceRegistry().getService(JdbcServices.class).getDialect();
  dialect.contributeTypes(typeContributions,options.getServiceRegistry());
  for (  TypeContributor contributor : classLoaderService.loadJavaServices(TypeContributor.class)) {
    contributor.contribute(typeContributions,options.getServiceRegistry());
  }
  for (  BasicTypeRegistration basicTypeRegistration : options.getBasicTypeRegistrations()) {
    basicTypeRegistry.register(basicTypeRegistration.getBasicType(),basicTypeRegistration.getRegistrationKeys());
  }
  return basicTypeRegistry;
}
