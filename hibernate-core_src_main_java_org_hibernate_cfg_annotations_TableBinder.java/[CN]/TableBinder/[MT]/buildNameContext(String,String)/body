{
  if (name != null) {
    return new AssociationTableNameSource(name,null);
  }
  final Identifier logicalName;
  if (isJPA2ElementCollection) {
    logicalName=buildingContext.getBuildingOptions().getImplicitNamingStrategy().determineCollectionTableName(new ImplicitCollectionTableNameSource(){
      private final EntityNaming owningEntityNaming=new EntityNaming(){
        @Override public String getClassName(){
          return ownerClassName;
        }
        @Override public String getEntityName(){
          return ownerEntity;
        }
        @Override public String getJpaEntityName(){
          return ownerJpaEntity;
        }
      }
;
      @Override public Identifier getOwningPhysicalTableName(){
        return toIdentifier(ownerEntityTable);
      }
      @Override public EntityNaming getOwningEntityNaming(){
        return owningEntityNaming;
      }
      @Override public AttributePath getOwningAttributePath(){
        return AttributePath.parse(propertyName);
      }
      @Override public MetadataBuildingContext getBuildingContext(){
        return buildingContext;
      }
    }
);
  }
 else {
    logicalName=buildingContext.getBuildingOptions().getImplicitNamingStrategy().determineJoinTableName(new ImplicitJoinTableNameSource(){
      private final EntityNaming owningEntityNaming=new EntityNaming(){
        @Override public String getClassName(){
          return ownerClassName;
        }
        @Override public String getEntityName(){
          return ownerEntity;
        }
        @Override public String getJpaEntityName(){
          return ownerJpaEntity;
        }
      }
;
      private final EntityNaming nonOwningEntityNaming=new EntityNaming(){
        @Override public String getClassName(){
          return associatedClassName;
        }
        @Override public String getEntityName(){
          return associatedEntity;
        }
        @Override public String getJpaEntityName(){
          return associatedJpaEntity;
        }
      }
;
      @Override public String getOwningPhysicalTableName(){
        return ownerEntityTable;
      }
      @Override public EntityNaming getOwningEntityNaming(){
        return owningEntityNaming;
      }
      @Override public String getNonOwningPhysicalTableName(){
        return associatedEntityTable;
      }
      @Override public EntityNaming getNonOwningEntityNaming(){
        return nonOwningEntityNaming;
      }
      @Override public AttributePath getAssociationOwningAttributePath(){
        return AttributePath.parse(propertyName);
      }
      @Override public MetadataBuildingContext getBuildingContext(){
        return buildingContext;
      }
    }
);
  }
  return new AssociationTableNameSource(name,logicalName.render());
}
