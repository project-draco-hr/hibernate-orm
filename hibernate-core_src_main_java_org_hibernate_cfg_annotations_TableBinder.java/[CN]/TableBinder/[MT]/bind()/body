{
  final String unquotedOwnerTable=StringHelper.unquote(ownerEntityTable);
  final String unquotedAssocTable=StringHelper.unquote(associatedEntityTable);
  final String ownerObjectName=isJPA2ElementCollection && ownerEntity != null ? StringHelper.unqualify(ownerEntity) : unquotedOwnerTable;
  final ObjectNameSource nameSource=buildNameContext(ownerObjectName,unquotedAssocTable);
  final boolean ownerEntityTableQuoted=StringHelper.isQuoted(ownerEntityTable);
  final boolean associatedEntityTableQuoted=StringHelper.isQuoted(associatedEntityTable);
  final ObjectNameNormalizer.NamingStrategyHelper namingStrategyHelper=new ObjectNameNormalizer.NamingStrategyHelper(){
    public String determineImplicitName(    NamingStrategy strategy){
      final String strategyResult=strategy.collectionTableName(ownerEntity,ownerObjectName,associatedEntity,unquotedAssocTable,propertyName);
      return ownerEntityTableQuoted || associatedEntityTableQuoted ? StringHelper.quote(strategyResult) : strategyResult;
    }
    public String handleExplicitName(    NamingStrategy strategy,    String name){
      return strategy.tableName(name);
    }
  }
;
  return buildAndFillTable(schema,catalog,nameSource,namingStrategyHelper,isAbstract,uniqueConstraints,jpaIndexHolders,constraints,denormalizedSuperTable,mappings,null);
}
