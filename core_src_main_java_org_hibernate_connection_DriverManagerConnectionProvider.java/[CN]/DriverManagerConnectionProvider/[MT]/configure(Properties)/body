{
  String driverClass=props.getProperty(Environment.DRIVER);
  poolSize=PropertiesHelper.getInt(Environment.POOL_SIZE,props,20);
  log.info("Using Hibernate built-in connection pool (not for production use!)");
  log.info("Hibernate connection pool size: " + poolSize);
  autocommit=PropertiesHelper.getBoolean(Environment.AUTOCOMMIT,props);
  log.info("autocommit mode: " + autocommit);
  isolation=PropertiesHelper.getInteger(Environment.ISOLATION,props);
  if (isolation != null)   log.info("JDBC isolation level: " + Environment.isolationLevelToString(isolation.intValue()));
  if (driverClass == null) {
    log.warn("no JDBC Driver class was specified by property " + Environment.DRIVER);
  }
 else {
    try {
      Class.forName(driverClass);
    }
 catch (    ClassNotFoundException cnfe) {
      try {
        ReflectHelper.classForName(driverClass);
      }
 catch (      ClassNotFoundException e) {
        String msg="JDBC Driver class not found: " + driverClass;
        log.error(msg,e);
        throw new HibernateException(msg,e);
      }
    }
  }
  url=props.getProperty(Environment.URL);
  if (url == null) {
    String msg="JDBC URL was not specified by property " + Environment.URL;
    log.error(msg);
    throw new HibernateException(msg);
  }
  connectionProps=ConnectionProviderFactory.getConnectionProperties(props);
  log.info("using driver: " + driverClass + " at URL: "+ url);
  if (log.isDebugEnabled()) {
    log.info("connection properties: " + connectionProps);
  }
 else   if (log.isInfoEnabled()) {
    log.info("connection properties: " + PropertiesHelper.maskOut(connectionProps,"password"));
  }
}
