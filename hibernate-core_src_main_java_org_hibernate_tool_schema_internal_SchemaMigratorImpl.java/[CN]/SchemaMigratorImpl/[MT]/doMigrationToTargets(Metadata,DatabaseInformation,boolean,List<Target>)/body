{
  final Set<String> exportIdentifiers=new HashSet<String>(50);
  final Database database=metadata.getDatabase();
  final JdbcEnvironment jdbcEnvironment=database.getJdbcEnvironment();
  final Dialect dialect=jdbcEnvironment.getDialect();
  for (  AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) {
    if (!auxiliaryDatabaseObject.appliesToDialect(dialect)) {
      continue;
    }
    applySqlStrings(dialect.getAuxiliaryDatabaseObjectExporter().getSqlDropStrings(auxiliaryDatabaseObject,metadata),targets,true);
  }
  for (  AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) {
    if (auxiliaryDatabaseObject.beforeTablesOnCreation()) {
      continue;
    }
    if (!auxiliaryDatabaseObject.appliesToDialect(dialect)) {
      continue;
    }
    applySqlStrings(auxiliaryDatabaseObject.sqlCreateStrings(jdbcEnvironment.getDialect()),targets,true);
  }
  boolean tryToCreateCatalogs=false;
  boolean tryToCreateSchemas=false;
  if (createNamespaces) {
    if (database.getJdbcEnvironment().getDialect().canCreateSchema()) {
      tryToCreateSchemas=true;
    }
    if (database.getJdbcEnvironment().getDialect().canCreateCatalog()) {
      tryToCreateCatalogs=true;
    }
  }
  Set<Identifier> exportedCatalogs=new HashSet<Identifier>();
  for (  Namespace namespace : database.getNamespaces()) {
    if (!filter.includeNamespace(namespace)) {
      continue;
    }
    if (tryToCreateCatalogs || tryToCreateSchemas) {
      if (tryToCreateCatalogs) {
        final Identifier catalogLogicalName=namespace.getName().getCatalog();
        final Identifier catalogPhysicalName=namespace.getPhysicalName().getCatalog();
        if (catalogPhysicalName != null && !exportedCatalogs.contains(catalogLogicalName) && !existingDatabase.catalogExists(catalogLogicalName)) {
          applySqlStrings(database.getJdbcEnvironment().getDialect().getCreateCatalogCommand(catalogPhysicalName.render(database.getJdbcEnvironment().getDialect())),targets,false);
          exportedCatalogs.add(catalogLogicalName);
        }
      }
      if (tryToCreateSchemas && namespace.getPhysicalName().getSchema() != null && !existingDatabase.schemaExists(namespace.getName())) {
        applySqlStrings(database.getJdbcEnvironment().getDialect().getCreateSchemaCommand(namespace.getPhysicalName().getSchema().render(database.getJdbcEnvironment().getDialect())),targets,false);
      }
    }
    for (    Table table : namespace.getTables()) {
      if (!table.isPhysicalTable()) {
        continue;
      }
      if (!filter.includeTable(table)) {
        continue;
      }
      checkExportIdentifier(table,exportIdentifiers);
      final TableInformation tableInformation=existingDatabase.getTableInformation(table.getQualifiedTableName());
      if (tableInformation != null && !tableInformation.isPhysicalTable()) {
        continue;
      }
      if (tableInformation == null) {
        createTable(table,metadata,targets);
      }
 else {
        migrateTable(table,tableInformation,targets,metadata);
      }
    }
    for (    Table table : namespace.getTables()) {
      if (!table.isPhysicalTable()) {
        continue;
      }
      if (!filter.includeTable(table)) {
        continue;
      }
      final TableInformation tableInformation=existingDatabase.getTableInformation(table.getQualifiedTableName());
      if (tableInformation != null && !tableInformation.isPhysicalTable()) {
        continue;
      }
      applyIndexes(table,tableInformation,metadata,targets);
      applyUniqueKeys(table,tableInformation,metadata,targets);
    }
    for (    Sequence sequence : namespace.getSequences()) {
      checkExportIdentifier(sequence,exportIdentifiers);
      final SequenceInformation sequenceInformation=existingDatabase.getSequenceInformation(sequence.getName());
      if (sequenceInformation != null) {
        continue;
      }
      applySqlStrings(database.getJdbcEnvironment().getDialect().getSequenceExporter().getSqlCreateStrings(sequence,metadata),targets,false);
    }
  }
  for (  Namespace namespace : database.getNamespaces()) {
    for (    Table table : namespace.getTables()) {
      final TableInformation tableInformation=existingDatabase.getTableInformation(table.getQualifiedTableName());
      if (tableInformation != null && !tableInformation.isPhysicalTable()) {
        continue;
      }
      applyForeignKeys(table,tableInformation,metadata,targets);
    }
  }
  for (  AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) {
    if (!auxiliaryDatabaseObject.beforeTablesOnCreation()) {
      continue;
    }
    if (!auxiliaryDatabaseObject.appliesToDialect(dialect)) {
      continue;
    }
    applySqlStrings(auxiliaryDatabaseObject.sqlCreateStrings(jdbcEnvironment.getDialect()),targets,true);
  }
}
