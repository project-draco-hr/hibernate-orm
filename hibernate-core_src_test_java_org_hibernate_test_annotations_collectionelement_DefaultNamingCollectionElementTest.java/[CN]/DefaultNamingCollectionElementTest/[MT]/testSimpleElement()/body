{
  assertEquals("BoyFavoriteNumbers",metadata().getCollectionBinding(Boy.class.getName() + '.' + "favoriteNumbers").getCollectionTable().getName());
  Session s=openSession();
  s.getTransaction().begin();
  Boy boy=new Boy();
  boy.setFirstName("John");
  boy.setLastName("Doe");
  boy.getNickNames().add("Johnny");
  boy.getNickNames().add("Thing");
  boy.getScorePerNickName().put("Johnny",3);
  boy.getScorePerNickName().put("Thing",5);
  int[] favNbrs=new int[4];
  for (int index=0; index < favNbrs.length - 1; index++) {
    favNbrs[index]=index * 3;
  }
  boy.setFavoriteNumbers(favNbrs);
  boy.getCharacters().add(Character.GENTLE);
  boy.getCharacters().add(Character.CRAFTY);
  HashMap<String,FavoriteFood> foods=new HashMap<String,FavoriteFood>();
  foods.put("breakfast",FavoriteFood.PIZZA);
  foods.put("lunch",FavoriteFood.KUNGPAOCHICKEN);
  foods.put("dinner",FavoriteFood.SUSHI);
  boy.setFavoriteFood(foods);
  s.persist(boy);
  s.getTransaction().commit();
  s.clear();
  Transaction tx=s.beginTransaction();
  boy=(Boy)s.get(Boy.class,boy.getId());
  assertNotNull(boy.getNickNames());
  assertTrue(boy.getNickNames().contains("Thing"));
  assertNotNull(boy.getScorePerNickName());
  assertTrue(boy.getScorePerNickName().containsKey("Thing"));
  assertEquals(Integer.valueOf(5),boy.getScorePerNickName().get("Thing"));
  assertNotNull(boy.getFavoriteNumbers());
  assertEquals(3,boy.getFavoriteNumbers()[1]);
  assertTrue(boy.getCharacters().contains(Character.CRAFTY));
  assertTrue(boy.getFavoriteFood().get("dinner").equals(FavoriteFood.SUSHI));
  assertTrue(boy.getFavoriteFood().get("lunch").equals(FavoriteFood.KUNGPAOCHICKEN));
  assertTrue(boy.getFavoriteFood().get("breakfast").equals(FavoriteFood.PIZZA));
  List result=s.createQuery("select boy from Boy boy join boy.nickNames names where names = :name").setParameter("name","Thing").list();
  assertEquals(1,result.size());
  s.delete(boy);
  tx.commit();
  s.close();
}
