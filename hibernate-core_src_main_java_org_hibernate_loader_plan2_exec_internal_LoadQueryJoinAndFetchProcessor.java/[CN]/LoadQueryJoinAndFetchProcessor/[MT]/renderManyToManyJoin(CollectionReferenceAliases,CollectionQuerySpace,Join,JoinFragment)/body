{
  final CollectionPersister persister=rightHandSide.getCollectionPersister();
  final QueryableCollection queryableCollection=(QueryableCollection)persister;
  final String collectionTableAlias=aliases.getCollectionTableAlias();
  final String elementTableAlias=aliases.getElementTableAlias();
  if (StringHelper.isEmpty(collectionTableAlias)) {
    throw new IllegalStateException("Collection table alias cannot be empty");
  }
  if (StringHelper.isEmpty(elementTableAlias)) {
    throw new IllegalStateException("Collection element (many-to-many) table alias cannot be empty");
  }
{
    final AssociationType associationType=join instanceof JoinDefinedByMetadata ? ((JoinDefinedByMetadata)join).getJoinedAssociationPropertyType() : null;
    final String additionalJoinConditions=resolveAdditionalJoinCondition(elementTableAlias,join.getAnyAdditionalJoinConditions(elementTableAlias),queryableCollection,associationType);
    final String manyToManyFilter=persister.getManyToManyFilterFragment(elementTableAlias,buildingParameters.getQueryInfluencers().getEnabledFilters());
    final String condition;
    if (StringHelper.isEmpty(manyToManyFilter)) {
      condition=additionalJoinConditions;
    }
 else     if (StringHelper.isEmpty(additionalJoinConditions)) {
      condition=manyToManyFilter;
    }
 else {
      condition=additionalJoinConditions + " and " + manyToManyFilter;
    }
    final OuterJoinLoadable elementPersister=(OuterJoinLoadable)queryableCollection.getElementPersister();
    addJoins(joinFragment,elementPersister,JoinType.LEFT_OUTER_JOIN,elementTableAlias,elementPersister.getIdentifierColumnNames(),StringHelper.qualify(collectionTableAlias,queryableCollection.getElementColumnNames()),condition);
  }
}
