{
  final List<NativeSQLQueryReturn> collectedQueryReturns=new ArrayList<NativeSQLQueryReturn>();
  final Set<String> collectedQuerySpaces=new HashSet<String>();
  final boolean specifiesResultClasses=resultClasses != null && resultClasses.length > 0;
  final boolean specifiesResultSetMappings=resultSetMappings != null && resultSetMappings.length > 0;
  if (specifiesResultClasses) {
    Util.resolveResultClasses(new Util.ResultClassesResolutionContext(){
      @Override public SessionFactoryImplementor getSessionFactory(){
        return sessionFactory;
      }
      @Override public void addQueryReturns(      NativeSQLQueryReturn... queryReturns){
        Collections.addAll(collectedQueryReturns,queryReturns);
      }
      @Override public void addQuerySpaces(      String... spaces){
        Collections.addAll(collectedQuerySpaces,spaces);
      }
    }
,resultClasses);
  }
 else   if (specifiesResultSetMappings) {
    Util.resolveResultSetMappings(new Util.ResultSetMappingResolutionContext(){
      @Override public SessionFactoryImplementor getSessionFactory(){
        return sessionFactory;
      }
      @Override public ResultSetMappingDefinition findResultSetMapping(      String name){
        return resultSetMappingDefinitions.get(name);
      }
      @Override public void addQueryReturns(      NativeSQLQueryReturn... queryReturns){
        Collections.addAll(collectedQueryReturns,queryReturns);
      }
      @Override public void addQuerySpaces(      String... spaces){
        Collections.addAll(collectedQuerySpaces,spaces);
      }
    }
,resultSetMappings);
  }
  return new ProcedureCallMementoImpl(procedureName,collectedQueryReturns.toArray(new NativeSQLQueryReturn[collectedQueryReturns.size()]),parameterDefinitions.getParameterStrategy(),parameterDefinitions.toMementos(sessionFactory),collectedQuerySpaces,hints);
}
