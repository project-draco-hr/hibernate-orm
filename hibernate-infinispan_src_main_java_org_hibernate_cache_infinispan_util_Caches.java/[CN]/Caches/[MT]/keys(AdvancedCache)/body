{
  final CloseableIterable<CacheEntry<Object,Void>> entryIterable=cache.filterEntries(AcceptAllKeyValueFilter.getInstance()).converter(NullValueConverter.getInstance());
  return new CollectableCloseableIterable(){
    @Override public void close(){
      entryIterable.close();
    }
    @Override public CloseableIterator iterator(){
      final CloseableIterator<CacheEntry<Object,Void>> entryIterator=entryIterable.iterator();
      return new CloseableIterator(){
        @Override public void close(){
          entryIterator.close();
        }
        @Override public boolean hasNext(){
          return entryIterator.hasNext();
        }
        @Override public Object next(){
          return entryIterator.next().getKey();
        }
      }
;
    }
    @Override public String toString(){
      CloseableIterator<CacheEntry<Object,Void>> it=entryIterable.iterator();
      try {
        if (!it.hasNext()) {
          return "[]";
        }
        StringBuilder sb=new StringBuilder();
        sb.append('[');
        for (; ; ) {
          CacheEntry<Object,Void> entry=it.next();
          sb.append(entry.getKey());
          if (!it.hasNext()) {
            return sb.append(']').toString();
          }
          sb.append(',').append(' ');
        }
      }
  finally {
        it.close();
      }
    }
    @Override public Set toSet(){
      HashSet set=new HashSet();
      CloseableIterator it=iterator();
      try {
        while (it.hasNext()) {
          set.add(it.next());
        }
      }
  finally {
        it.close();
      }
      return set;
    }
  }
;
}
