{
  String type=null;
  Geometry geom;
  int srid=geometryFactory.getSRID();
  try {
    String firstWord=getNextWord();
    if ("SRID".equals(firstWord)) {
      srid=getSRID();
      type=getNextWord();
    }
 else {
      type=firstWord;
    }
  }
 catch (  IOException e) {
    return null;
  }
catch (  ParseException e) {
    return null;
  }
  if (type.equals("POINT")) {
    geom=readPointText();
  }
 else   if (type.equals("POINTM")) {
    setHasM(true);
    geom=readPointText();
  }
 else   if (type.equalsIgnoreCase("LINESTRING")) {
    geom=readLineStringText();
  }
 else   if (type.equalsIgnoreCase("LINESTRINGM")) {
    setHasM(true);
    geom=readLineStringText();
  }
 else   if (type.equalsIgnoreCase("LINEARRING")) {
    geom=readLinearRingText();
  }
 else   if (type.equalsIgnoreCase("LINEARRINGM")) {
    setHasM(true);
    geom=readLinearRingText();
  }
 else   if (type.equalsIgnoreCase("POLYGON")) {
    geom=readPolygonText();
  }
 else   if (type.equalsIgnoreCase("POLYGONM")) {
    throw new RuntimeException("PolygonM is not supported.");
  }
 else   if (type.equalsIgnoreCase("MULTIPOINT")) {
    geom=readMultiPointText();
  }
 else   if (type.equalsIgnoreCase("MULTIPOINTM")) {
    setHasM(true);
    geom=readMultiPointText();
  }
 else   if (type.equalsIgnoreCase("MULTILINESTRING")) {
    geom=readMultiLineStringText();
  }
 else   if (type.equalsIgnoreCase("MULTILINESTRINGM")) {
    setHasM(true);
    geom=readMultiLineStringText();
  }
 else   if (type.equalsIgnoreCase("MULTIPOLYGON")) {
    geom=readMultiPolygonText();
  }
 else   if (type.equalsIgnoreCase("MULTIPOLYGONM")) {
    throw new RuntimeException("MultiPolygonM is not supported.");
  }
 else   if (type.equalsIgnoreCase("GEOMETRYCOLLECTION")) {
    geom=readGeometryCollectionText();
  }
 else   if (type.equalsIgnoreCase("GEOMETRYCOLLECTIONM")) {
    setHasM(true);
    geom=readGeometryCollectionText();
  }
 else {
    throw new ParseException("Unknown geometry type: " + type);
  }
  geom.setSRID(srid);
  return geom;
}
