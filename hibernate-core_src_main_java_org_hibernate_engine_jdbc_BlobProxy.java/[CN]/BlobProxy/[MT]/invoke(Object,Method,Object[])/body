{
  final String methodName=method.getName();
  final int argCount=method.getParameterCount();
  if ("length".equals(methodName) && argCount == 0) {
    return getLength();
  }
  if ("getUnderlyingStream".equals(methodName)) {
    return getUnderlyingStream();
  }
  if ("getBinaryStream".equals(methodName)) {
    if (argCount == 0) {
      return getStream();
    }
 else     if (argCount == 2) {
      final long start=(Long)args[0];
      if (start < 1) {
        throw new SQLException("Start position 1-based; must be 1 or more.");
      }
      if (start > getLength()) {
        throw new SQLException("Start position [" + start + "] cannot exceed overall CLOB length ["+ getLength()+ "]");
      }
      final int length=(Integer)args[1];
      if (length < 0) {
        throw new SQLException("Length must be great-than-or-equal to zero.");
      }
      return DataHelper.subStream(getStream(),start - 1,length);
    }
  }
  if ("getBytes".equals(methodName)) {
    if (argCount == 2) {
      final long start=(Long)args[0];
      if (start < 1) {
        throw new SQLException("Start position 1-based; must be 1 or more.");
      }
      final int length=(Integer)args[1];
      if (length < 0) {
        throw new SQLException("Length must be great-than-or-equal to zero.");
      }
      return DataHelper.extractBytes(getStream(),start - 1,length);
    }
  }
  if ("free".equals(methodName) && argCount == 0) {
    binaryStream.release();
    return null;
  }
  if ("toString".equals(methodName) && argCount == 0) {
    return this.toString();
  }
  if ("equals".equals(methodName) && argCount == 1) {
    return proxy == args[0];
  }
  if ("hashCode".equals(methodName) && argCount == 0) {
    return this.hashCode();
  }
  throw new UnsupportedOperationException("Blob may not be manipulated from creating session");
}
