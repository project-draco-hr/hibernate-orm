{
  Session s=openSession();
  Transaction t=s.beginTransaction();
  Container c=new Container();
  Contained c1=new Contained();
  Contained c2=new Contained();
  c.setBag(new ArrayList());
  c.getBag().add(c1);
  c.getBag().add(c2);
  c1.getBag().add(c);
  c2.getBag().add(c);
  s.save(c);
  c.getBag().add(c2);
  c2.getBag().add(c);
  c.getLazyBag().add(c1);
  c1.getLazyBag().add(c);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  c=(Container)s.find("from ContainerX c").get(0);
  c.getLazyBag().size();
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  c=(Container)s.find("from ContainerX c").get(0);
  Contained c3=new Contained();
  c.getLazyBag().add(c3);
  c3.getLazyBag().add(c);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  c=(Container)s.find("from ContainerX c").get(0);
  Contained c4=new Contained();
  c.getLazyBag().add(c4);
  c4.getLazyBag().add(c);
  assertTrue(c.getLazyBag().size() == 3);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  c=(Container)s.find("from ContainerX c").get(0);
  Iterator i=c.getBag().iterator();
  int j=0;
  while (i.hasNext()) {
    assertTrue(i.next() != null);
    j++;
  }
  assertTrue(j == 3);
  assertTrue(c.getLazyBag().size() == 3);
  s.delete(c);
  c.getBag().remove(c2);
  Iterator iter=c.getBag().iterator();
  j=0;
  while (iter.hasNext()) {
    j++;
    s.delete(iter.next());
  }
  assertTrue(j == 2);
  s.delete(s.load(Contained.class,new Long(c4.getId())));
  s.delete(s.load(Contained.class,new Long(c3.getId())));
  t.commit();
  s.close();
}
