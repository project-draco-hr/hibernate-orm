{
  return new ClassLoader(){
    @Override public Class<?> loadClass(    String name) throws ClassNotFoundException {
      if (!name.startsWith(packageName)) {
        return getParent().loadClass(name);
      }
      final Class c=findLoadedClass(name);
      if (c != null) {
        return c;
      }
      final InputStream is=this.getResourceAsStream(name.replace('.','/') + ".class");
      if (is == null) {
        throw new ClassNotFoundException(name + " not found");
      }
      try {
        final byte[] original=new byte[is.available()];
        new BufferedInputStream(is).read(original);
        final byte[] enhanced=new Enhancer(enhancementContext).enhance(name,original);
        Path debugOutput=Paths.get(workingDir + File.separator + name.replace('.','/')+ ".class");
        Files.createDirectories(debugOutput.getParent());
        Files.write(debugOutput,enhanced,StandardOpenOption.CREATE);
        return defineClass(name,enhanced,0,enhanced.length);
      }
 catch (      Throwable t) {
        throw new ClassNotFoundException(name + " not found",t);
      }
 finally {
        try {
          is.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
;
}
