{
  boolean success=true;
  PendingPutMap pending=pendingPuts.get(key);
  if (pending != null) {
    if (pending.acquireLock(60,TimeUnit.SECONDS)) {
      try {
        pending.invalidate();
      }
  finally {
        pending.releaseLock();
      }
    }
 else {
      success=false;
    }
  }
  RecentRemoval removal=new RecentRemoval(key,this.nakedPutInvalidationPeriod);
  recentRemovals.put(key,removal.timestamp);
  RecentRemoval toClean=null;
  boolean attemptClean=removal.timestamp.longValue() > earliestRemovalTimestamp;
  removalsLock.lock();
  try {
    removalsQueue.add(removal);
    if (attemptClean) {
      if (removalsQueue.size() > 1) {
        toClean=removalsQueue.remove(0);
      }
      earliestRemovalTimestamp=removalsQueue.get(0).timestamp.longValue();
    }
  }
  finally {
    removalsLock.unlock();
  }
  if (toClean != null) {
    Long cleaned=recentRemovals.get(toClean.key);
    if (cleaned != null && cleaned.equals(toClean.timestamp)) {
      cleaned=recentRemovals.remove(toClean.key);
      if (cleaned != null && cleaned.equals(toClean.timestamp) == false) {
        recentRemovals.putIfAbsent(toClean.key,cleaned);
      }
    }
  }
  return success;
}
