{
  Session s=openSession();
  Transaction txn=s.beginTransaction();
  Publisher publisher=new Publisher();
  publisher.setName("name");
  s.save(publisher);
  assertTrue("autoflush entity create",s.createQuery("from Publisher p").list().size() == 1);
  publisher.setName("name");
  assertTrue("autoflush entity update",s.createQuery("from Publisher p where p.name='name'").list().size() == 1);
  txn.commit();
  s.close();
  s=openSession();
  txn=s.beginTransaction();
  publisher=(Publisher)s.get(Publisher.class,publisher.getId());
  assertTrue(publisher.getAuthors().isEmpty());
  final PersistenceContext persistenceContext=((SessionImplementor)s).getPersistenceContext();
  final ActionQueue actionQueue=((SessionImpl)s).getActionQueue();
  assertEquals(1,persistenceContext.getCollectionEntries().size());
  assertEquals(1,persistenceContext.getCollectionsByKey().size());
  assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()));
  assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()));
  assertEquals(0,actionQueue.numberOfCollectionRemovals());
  Author author1=new Author();
  author1.setPublisher(publisher);
  publisher.getAuthors().add(author1);
  assertTrue("autoflush collection update",s.createQuery("select a from Publisher p join p.authors a").list().size() == 1);
  assertEquals(2,persistenceContext.getCollectionEntries().size());
  assertEquals(2,persistenceContext.getCollectionsByKey().size());
  assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()));
  assertTrue(persistenceContext.getCollectionEntries().containsKey(author1.getBooks()));
  assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()));
  assertTrue(persistenceContext.getCollectionsByKey().values().contains(author1.getBooks()));
  assertEquals(0,actionQueue.numberOfCollectionRemovals());
  author1.setPublisher(null);
  s.delete(author1);
  publisher.getAuthors().clear();
  assertEquals(0,actionQueue.numberOfCollectionRemovals());
  assertTrue("autoflush collection update",s.createQuery("select a from Publisher p join p.authors a").list().size() == 0);
  assertEquals(1,persistenceContext.getCollectionEntries().size());
  assertEquals(1,persistenceContext.getCollectionsByKey().size());
  assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()));
  assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()));
  assertEquals(0,actionQueue.numberOfCollectionRemovals());
  Set<Author> authorsOld=publisher.getAuthors();
  publisher.setAuthors(new HashSet<Author>());
  Author author2=new Author();
  author2.setName("author2");
  author2.setPublisher(publisher);
  publisher.getAuthors().add(author2);
  List results=s.createQuery("select a from Publisher p join p.authors a").list();
  assertEquals(1,results.size());
  assertEquals(2,persistenceContext.getCollectionEntries().size());
  assertEquals(2,persistenceContext.getCollectionsByKey().size());
  assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()));
  assertTrue(persistenceContext.getCollectionEntries().containsKey(author2.getBooks()));
  assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()));
  assertTrue(persistenceContext.getCollectionsByKey().values().contains(author2.getBooks()));
  assertEquals(0,actionQueue.numberOfCollectionRemovals());
  s.delete(publisher);
  assertTrue("autoflush delete",s.createQuery("from Publisher p").list().size() == 0);
  txn.commit();
  s.close();
}
