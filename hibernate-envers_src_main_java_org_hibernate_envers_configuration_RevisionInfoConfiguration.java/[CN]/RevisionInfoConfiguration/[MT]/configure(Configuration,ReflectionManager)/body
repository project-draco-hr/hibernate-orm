{
  Iterator<PersistentClass> classes=cfg.getClassMappings();
  boolean revisionEntityFound=false;
  RevisionInfoGenerator revisionInfoGenerator=null;
  Class<?> revisionInfoClass=null;
  while (classes.hasNext()) {
    PersistentClass pc=classes.next();
    XClass clazz;
    try {
      clazz=reflectionManager.classForName(pc.getClassName(),this.getClass());
    }
 catch (    ClassNotFoundException e) {
      throw new MappingException(e);
    }
    RevisionEntity revisionEntity=clazz.getAnnotation(RevisionEntity.class);
    if (revisionEntity != null) {
      if (revisionEntityFound) {
        throw new MappingException("Only one entity may be annotated with @RevisionEntity!");
      }
      if (clazz.getAnnotation(Audited.class) != null) {
        throw new MappingException("An entity annotated with @RevisionEntity cannot be audited!");
      }
      revisionEntityFound=true;
      MutableBoolean revisionNumberFound=new MutableBoolean();
      MutableBoolean revisionTimestampFound=new MutableBoolean();
      MutableBoolean modifiedEntityNamesFound=new MutableBoolean();
      searchForRevisionInfoCfg(clazz,reflectionManager,revisionNumberFound,revisionTimestampFound,modifiedEntityNamesFound);
      if (!revisionNumberFound.isSet()) {
        throw new MappingException("An entity annotated with @RevisionEntity must have a field annotated " + "with @RevisionNumber!");
      }
      if (!revisionTimestampFound.isSet()) {
        throw new MappingException("An entity annotated with @RevisionEntity must have a field annotated " + "with @RevisionTimestamp!");
      }
      revisionInfoEntityName=pc.getEntityName();
      revisionInfoClass=pc.getMappedClass();
      Class<? extends RevisionListener> revisionListenerClass=getRevisionListenerClass(revisionEntity.value());
      revisionInfoTimestampType=pc.getProperty(revisionInfoTimestampData.getName()).getType();
      if (globalCfg.isTrackEntitiesChangedInRevisionEnabled() || (globalCfg.isUseRevisionEntityWithNativeId() && DefaultTrackingModifiedEntitiesRevisionEntity.class.isAssignableFrom(revisionInfoClass)) || (!globalCfg.isUseRevisionEntityWithNativeId() && SequenceIdTrackingModifiedEntitiesRevisionEntity.class.isAssignableFrom(revisionInfoClass))|| modifiedEntityNamesFound.isSet()) {
        revisionInfoGenerator=new DefaultTrackingModifiedEntitiesRevisionInfoGenerator(revisionInfoEntityName,revisionInfoClass,revisionListenerClass,revisionInfoTimestampData,isTimestampAsDate(),modifiedEntityNamesData);
        globalCfg.setTrackEntitiesChangedInRevisionEnabled(true);
      }
 else {
        revisionInfoGenerator=new DefaultRevisionInfoGenerator(revisionInfoEntityName,revisionInfoClass,revisionListenerClass,revisionInfoTimestampData,isTimestampAsDate());
      }
    }
  }
  Document revisionInfoXmlMapping=null;
  Class<? extends RevisionListener> revisionListenerClass=getRevisionListenerClass(RevisionListener.class);
  if (revisionInfoGenerator == null) {
    if (globalCfg.isTrackEntitiesChangedInRevisionEnabled()) {
      revisionInfoClass=globalCfg.isUseRevisionEntityWithNativeId() ? DefaultTrackingModifiedEntitiesRevisionEntity.class : SequenceIdTrackingModifiedEntitiesRevisionEntity.class;
      revisionInfoEntityName=revisionInfoClass.getName();
      revisionInfoGenerator=new DefaultTrackingModifiedEntitiesRevisionInfoGenerator(revisionInfoEntityName,revisionInfoClass,revisionListenerClass,revisionInfoTimestampData,isTimestampAsDate(),modifiedEntityNamesData);
    }
 else {
      revisionInfoClass=globalCfg.isUseRevisionEntityWithNativeId() ? DefaultRevisionEntity.class : SequenceIdRevisionEntity.class;
      revisionInfoGenerator=new DefaultRevisionInfoGenerator(revisionInfoEntityName,revisionInfoClass,revisionListenerClass,revisionInfoTimestampData,isTimestampAsDate());
    }
    revisionInfoXmlMapping=generateDefaultRevisionInfoXmlMapping();
  }
  return new RevisionInfoConfigurationResult(revisionInfoGenerator,revisionInfoXmlMapping,new RevisionInfoQueryCreator(revisionInfoEntityName,revisionInfoIdData.getName(),revisionInfoTimestampData.getName(),isTimestampAsDate()),generateRevisionInfoRelationMapping(),new RevisionInfoNumberReader(revisionInfoClass,revisionInfoIdData),globalCfg.isTrackEntitiesChangedInRevisionEnabled() ? new ModifiedEntityNamesReader(revisionInfoClass,modifiedEntityNamesData) : null,revisionInfoEntityName,revisionInfoClass,revisionInfoTimestampData);
}
