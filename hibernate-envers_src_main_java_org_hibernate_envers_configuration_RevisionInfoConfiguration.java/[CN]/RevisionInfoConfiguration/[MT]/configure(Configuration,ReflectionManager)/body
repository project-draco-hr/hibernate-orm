{
  Iterator<PersistentClass> classes=(Iterator<PersistentClass>)cfg.getClassMappings();
  boolean revisionEntityFound=false;
  RevisionInfoGenerator revisionInfoGenerator=null;
  Class<?> revisionInfoClass=null;
  while (classes.hasNext()) {
    PersistentClass pc=classes.next();
    XClass clazz;
    try {
      clazz=reflectionManager.classForName(pc.getClassName(),this.getClass());
    }
 catch (    ClassNotFoundException e) {
      throw new MappingException(e);
    }
    RevisionEntity revisionEntity=clazz.getAnnotation(RevisionEntity.class);
    if (revisionEntity != null) {
      if (revisionEntityFound) {
        throw new MappingException("Only one entity may be annotated with @RevisionEntity!");
      }
      if (clazz.getAnnotation(Audited.class) != null) {
        throw new MappingException("An entity annotated with @RevisionEntity cannot be audited!");
      }
      revisionEntityFound=true;
      MutableBoolean revisionNumberFound=new MutableBoolean();
      MutableBoolean revisionTimestampFound=new MutableBoolean();
      MutableBoolean modifiedEntityTypesFound=new MutableBoolean();
      searchForRevisionInfoCfg(clazz,reflectionManager,revisionNumberFound,revisionTimestampFound,modifiedEntityTypesFound);
      if (!revisionNumberFound.isSet()) {
        throw new MappingException("An entity annotated with @RevisionEntity must have a field annotated " + "with @RevisionNumber!");
      }
      if (!revisionTimestampFound.isSet()) {
        throw new MappingException("An entity annotated with @RevisionEntity must have a field annotated " + "with @RevisionTimestamp!");
      }
      revisionInfoEntityName=pc.getEntityName();
      revisionInfoClass=pc.getMappedClass();
      revisionInfoTimestampType=pc.getProperty(revisionInfoTimestampData.getName()).getType();
      if (globalCfg.isTrackEntitiesChangedInRevisionEnabled() || DefaultTrackingModifiedTypesRevisionEntity.class.isAssignableFrom(revisionInfoClass) || modifiedEntityTypesFound.isSet()) {
        revisionInfoGenerator=new DefaultTrackingModifiedTypesRevisionInfoGenerator(revisionInfoEntityName,revisionInfoClass,revisionEntity.value(),revisionInfoTimestampData,isTimestampAsDate(),modifiedEntityTypesData);
        globalCfg.setTrackEntitiesChangedInRevisionEnabled(true);
      }
 else {
        revisionInfoGenerator=new DefaultRevisionInfoGenerator(revisionInfoEntityName,revisionInfoClass,revisionEntity.value(),revisionInfoTimestampData,isTimestampAsDate());
      }
    }
  }
  Document revisionInfoXmlMapping=null;
  if (revisionInfoGenerator == null) {
    if (globalCfg.isTrackEntitiesChangedInRevisionEnabled()) {
      revisionInfoClass=DefaultTrackingModifiedTypesRevisionEntity.class;
      revisionInfoEntityName=DefaultTrackingModifiedTypesRevisionEntity.class.getName();
      revisionInfoGenerator=new DefaultTrackingModifiedTypesRevisionInfoGenerator(revisionInfoEntityName,revisionInfoClass,RevisionListener.class,revisionInfoTimestampData,isTimestampAsDate(),modifiedEntityTypesData);
    }
 else {
      revisionInfoClass=DefaultRevisionEntity.class;
      revisionInfoGenerator=new DefaultRevisionInfoGenerator(revisionInfoEntityName,revisionInfoClass,RevisionListener.class,revisionInfoTimestampData,isTimestampAsDate());
    }
    revisionInfoXmlMapping=generateDefaultRevisionInfoXmlMapping();
  }
  return new RevisionInfoConfigurationResult(revisionInfoGenerator,revisionInfoXmlMapping,new RevisionInfoQueryCreator(revisionInfoEntityName,revisionInfoIdData.getName(),revisionInfoTimestampData.getName(),isTimestampAsDate()),generateRevisionInfoRelationMapping(),new RevisionInfoNumberReader(revisionInfoClass,revisionInfoIdData),globalCfg.isTrackEntitiesChangedInRevisionEnabled() ? new ModifiedEntityTypesReader(revisionInfoClass,modifiedEntityTypesData) : null,revisionInfoEntityName,revisionInfoClass,revisionInfoTimestampData);
}
