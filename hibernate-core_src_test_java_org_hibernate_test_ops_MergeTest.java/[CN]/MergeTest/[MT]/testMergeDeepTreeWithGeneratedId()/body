{
  clearCounts();
  Session s=openSession();
  Transaction tx=s.beginTransaction();
  NumberedNode root=new NumberedNode("root");
  NumberedNode child=new NumberedNode("child");
  NumberedNode grandchild=new NumberedNode("grandchild");
  root.addChild(child);
  child.addChild(grandchild);
  root=(NumberedNode)s.merge(root);
  tx.commit();
  s.close();
  assertInsertCount(3);
  assertUpdateCount(0);
  clearCounts();
  child=(NumberedNode)root.getChildren().iterator().next();
  grandchild=(NumberedNode)child.getChildren().iterator().next();
  grandchild.setDescription("the grand child");
  NumberedNode grandchild2=new NumberedNode("grandchild2");
  child.addChild(grandchild2);
  s=openSession();
  tx=s.beginTransaction();
  root=(NumberedNode)s.merge(root);
  tx.commit();
  s.close();
  assertInsertCount(1);
  assertUpdateCount(1);
  clearCounts();
  getSessions().getCache().evictEntityRegion(NumberedNode.class);
  NumberedNode child2=new NumberedNode("child2");
  NumberedNode grandchild3=new NumberedNode("grandchild3");
  child2.addChild(grandchild3);
  root.addChild(child2);
  s=openSession();
  tx=s.beginTransaction();
  root=(NumberedNode)s.merge(root);
  tx.commit();
  s.close();
  assertInsertCount(2);
  assertUpdateCount(0);
  clearCounts();
  s=openSession();
  tx=s.beginTransaction();
  s.createQuery("delete from NumberedNode where name like 'grand%'").executeUpdate();
  s.createQuery("delete from NumberedNode where name like 'child%'").executeUpdate();
  s.createQuery("delete from NumberedNode").executeUpdate();
  tx.commit();
  s.close();
}
