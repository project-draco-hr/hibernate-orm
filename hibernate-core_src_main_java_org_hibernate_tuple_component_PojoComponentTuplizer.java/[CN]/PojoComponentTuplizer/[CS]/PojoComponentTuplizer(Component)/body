{
  super(component);
  this.componentClass=component.getComponentClass();
  String[] getterNames=new String[propertySpan];
  String[] setterNames=new String[propertySpan];
  Class[] propTypes=new Class[propertySpan];
  for (int i=0; i < propertySpan; i++) {
    getterNames[i]=getters[i].getMethodName();
    setterNames[i]=setters[i].getMethodName();
    propTypes[i]=getters[i].getReturnType();
  }
  final String parentPropertyName=component.getParentProperty();
  if (parentPropertyName == null) {
    parentSetter=null;
    parentGetter=null;
  }
 else {
    final ServiceRegistry serviceRegistry=component.getMetadata().getMetadataBuildingOptions().getServiceRegistry();
    final PropertyAccess propertyAccess=PropertyAccessStrategyBasicImpl.INSTANCE.buildPropertyAccess(componentClass,parentPropertyName);
    parentSetter=propertyAccess.getSetter();
    parentGetter=propertyAccess.getGetter();
  }
  if (hasCustomAccessors || !Environment.useReflectionOptimizer()) {
    optimizer=null;
  }
 else {
    optimizer=Environment.getBytecodeProvider().getReflectionOptimizer(componentClass,getterNames,setterNames,propTypes);
  }
}
