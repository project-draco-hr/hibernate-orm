{
  PersistentClass referencedPersistentClass=(PersistentClass)persistentClasses.get(referencedEntityName);
  if (referencedPersistentClass == null) {
    throw new AnnotationException("Unknown entity name: " + referencedEntityName);
  }
  if (!(referencedPersistentClass.getIdentifier() instanceof Component)) {
    throw new AssertionFailure("Unexpected identifier type on the referenced entity when mapping a @MapsId: " + referencedEntityName);
  }
  Component referencedComponent=(Component)referencedPersistentClass.getIdentifier();
  Iterator<Property> properties=referencedComponent.getPropertyIterator();
  boolean isExplicitReference=true;
  Map<String,Ejb3JoinColumn> columnByReferencedName=new HashMap<String,Ejb3JoinColumn>(joinColumns.length);
  for (  Ejb3JoinColumn joinColumn : joinColumns) {
    final String referencedColumnName=joinColumn.getReferencedColumn();
    if (referencedColumnName == null || BinderHelper.isEmptyAnnotationValue(referencedColumnName)) {
      break;
    }
    columnByReferencedName.put(referencedColumnName.toLowerCase(Locale.ROOT),joinColumn);
  }
  int index=0;
  if (columnByReferencedName.isEmpty()) {
    isExplicitReference=false;
    for (    Ejb3JoinColumn joinColumn : joinColumns) {
      columnByReferencedName.put("" + index,joinColumn);
      index++;
    }
    index=0;
  }
  while (properties.hasNext()) {
    Property referencedProperty=properties.next();
    if (referencedProperty.isComposite()) {
      throw new AssertionFailure("Unexpected nested component on the referenced entity when mapping a @MapsId: " + referencedEntityName);
    }
 else {
      Property property=new Property();
      property.setName(referencedProperty.getName());
      property.setPersistentClass(component.getOwner());
      property.setPropertyAccessorName(referencedProperty.getPropertyAccessorName());
      SimpleValue value=new SimpleValue(buildingContext.getMetadataCollector(),component.getTable());
      property.setValue(value);
      final SimpleValue referencedValue=(SimpleValue)referencedProperty.getValue();
      value.setTypeName(referencedValue.getTypeName());
      value.setTypeParameters(referencedValue.getTypeParameters());
      final Iterator<Selectable> columns=referencedValue.getColumnIterator();
      if (joinColumns[0].isNameDeferred()) {
        joinColumns[0].copyReferencedStructureAndCreateDefaultJoinColumns(referencedPersistentClass,columns,value);
      }
 else {
        while (columns.hasNext()) {
          final Selectable selectable=columns.next();
          if (!Column.class.isInstance(selectable)) {
            log.debug("Encountered formula definition; skipping");
            continue;
          }
          final Column column=(Column)selectable;
          final Ejb3JoinColumn joinColumn;
          String logicalColumnName=null;
          if (isExplicitReference) {
            final String columnName=column.getName();
            logicalColumnName=buildingContext.getMetadataCollector().getLogicalColumnName(referencedPersistentClass.getTable(),columnName);
            joinColumn=columnByReferencedName.get(logicalColumnName.toLowerCase(Locale.ROOT));
          }
 else {
            joinColumn=columnByReferencedName.get("" + index);
            index++;
          }
          if (joinColumn == null && !joinColumns[0].isNameDeferred()) {
            throw new AnnotationException(isExplicitReference ? "Unable to find column reference in the @MapsId mapping: " + logicalColumnName : "Implicit column reference in the @MapsId mapping fails, try to use explicit referenceColumnNames: " + referencedEntityName);
          }
          final String columnName=joinColumn == null || joinColumn.isNameDeferred() ? "tata_" + column.getName() : joinColumn.getName();
          value.addColumn(new Column(columnName));
          column.setValue(value);
        }
      }
      component.addProperty(property);
    }
  }
}
