{
  final List<FromElement> fromElements=new ArrayList<FromElement>();
  for (  Object obj : attributeNodes) {
    final AttributeNode<?> attributeNode=(AttributeNode<?>)obj;
    final String attributeName=attributeNode.getAttributeName();
    final String className=origin.getClassName();
    final String role=className + "." + attributeName;
    final String classAlias=origin.getClassAlias();
    final String originTableAlias=origin.getTableAlias();
    final Type propertyType=origin.getPropertyType(attributeName,attributeName);
    try {
      FromElement fromElement=null;
      if (!explicitFetches.containsKey(role)) {
        if (propertyType.isEntityType()) {
          final EntityType entityType=(EntityType)propertyType;
          final String[] columns=origin.toColumns(originTableAlias,attributeName,false);
          final String tableAlias=walker.getAliasGenerator().createName(entityType.getAssociatedEntityName());
          final FromElementFactory fromElementFactory=new FromElementFactory(fromClause,origin,attributeName,classAlias,columns,false);
          final JoinSequence joinSequence=walker.getSessionFactoryHelper().createJoinSequence(false,entityType,tableAlias,JoinType.LEFT_OUTER_JOIN,columns);
          fromElement=fromElementFactory.createEntityJoin(entityType.getAssociatedEntityName(),tableAlias,joinSequence,true,walker.isInFrom(),entityType,role,null);
        }
 else         if (propertyType.isCollectionType()) {
          CollectionType collectionType=(CollectionType)propertyType;
          final String[] columns=origin.toColumns(originTableAlias,attributeName,false);
          final FromElementFactory fromElementFactory=new FromElementFactory(fromClause,origin,attributeName,classAlias,columns,false);
          final QueryableCollection queryableCollection=walker.getSessionFactoryHelper().requireQueryableCollection(collectionType.getRole());
          fromElement=fromElementFactory.createCollection(queryableCollection,collectionType.getRole(),JoinType.LEFT_OUTER_JOIN,true,false);
        }
      }
      if (fromElement != null) {
        fromElements.add(fromElement);
        for (        Subgraph<?> subgraph : attributeNode.getSubgraphs().values()) {
          fromElements.addAll(getFromElements(subgraph.getAttributeNodes(),fromElement,fromClause,walker,explicitFetches));
        }
      }
    }
 catch (    Exception e) {
      throw new QueryException("Could not apply the EntityGraph to the Query!",e);
    }
  }
  return fromElements;
}
