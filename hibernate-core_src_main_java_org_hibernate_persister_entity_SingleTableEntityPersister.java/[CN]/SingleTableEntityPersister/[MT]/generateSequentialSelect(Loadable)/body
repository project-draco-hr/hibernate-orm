{
  AbstractEntityPersister subclassPersister=(AbstractEntityPersister)persister;
  HashSet tableNumbers=new HashSet();
  String[] props=subclassPersister.getPropertyNames();
  String[] classes=subclassPersister.getPropertySubclassNames();
  for (int i=0; i < props.length; i++) {
    int propTableNumber=getSubclassPropertyTableNumber(props[i],classes[i]);
    if (isSubclassTableSequentialSelect(propTableNumber) && !isSubclassTableLazy(propTableNumber)) {
      tableNumbers.add(propTableNumber);
    }
  }
  if (tableNumbers.isEmpty())   return null;
  ArrayList columnNumbers=new ArrayList();
  final int[] columnTableNumbers=getSubclassColumnTableNumberClosure();
  for (int i=0; i < getSubclassColumnClosure().length; i++) {
    if (tableNumbers.contains(columnTableNumbers[i])) {
      columnNumbers.add(i);
    }
  }
  ArrayList formulaNumbers=new ArrayList();
  final int[] formulaTableNumbers=getSubclassColumnTableNumberClosure();
  for (int i=0; i < getSubclassFormulaTemplateClosure().length; i++) {
    if (tableNumbers.contains(formulaTableNumbers[i])) {
      formulaNumbers.add(i);
    }
  }
  return renderSelect(ArrayHelper.toIntArray(tableNumbers),ArrayHelper.toIntArray(columnNumbers),ArrayHelper.toIntArray(formulaNumbers));
}
