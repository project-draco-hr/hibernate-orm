{
  String name=JandexHelper.getValueAsString(generator,"name");
  String strategy;
  Map<String,String> prms=new HashMap<String,String>();
  addStringParameter(generator,"sequenceName",prms,SequenceStyleGenerator.SEQUENCE_PARAM);
  boolean useNewIdentifierGenerators=metadata.getOptions().useNewIdentifierGenerators();
  strategy=DefaultIdentifierGeneratorFactory.generatorType(GenerationType.SEQUENCE,useNewIdentifierGenerators);
  if (useNewIdentifierGenerators) {
    addStringParameter(generator,"catalog",prms,PersistentIdentifierGenerator.CATALOG);
    addStringParameter(generator,"schema",prms,PersistentIdentifierGenerator.SCHEMA);
    prms.put(SequenceStyleGenerator.INCREMENT_PARAM,String.valueOf(JandexHelper.getValueAsInt(generator,"allocationSize")));
    prms.put(SequenceStyleGenerator.INITIAL_PARAM,String.valueOf(JandexHelper.getValueAsInt(generator,"initialValue")));
  }
 else {
    if (JandexHelper.getValueAsInt(generator,"initialValue") != 1) {
      LOG.unsupportedInitialValue(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS);
    }
    prms.put(SequenceHiLoGenerator.MAX_LO,String.valueOf(JandexHelper.getValueAsInt(generator,"allocationSize") - 1));
  }
  metadata.addIdGenerator(new IdGenerator(name,strategy,prms));
  LOG.tracef("Add sequence generator with name: %s",name);
}
