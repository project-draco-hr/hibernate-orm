{
  String name=JandexHelper.getValueAsString(jandex,generator,"name");
  String strategy;
  Map<String,String> prms=new HashMap<String,String>();
  addStringParameter(jandex,generator,"catalog",prms,PersistentIdentifierGenerator.CATALOG);
  addStringParameter(jandex,generator,"schema",prms,PersistentIdentifierGenerator.SCHEMA);
  if (metadata.getOptions().useNewIdentifierGenerators()) {
    strategy=TableGenerator.class.getName();
    prms.put(TableGenerator.CONFIG_PREFER_SEGMENT_PER_ENTITY,"true");
    addStringParameter(jandex,generator,"table",prms,TableGenerator.TABLE_PARAM);
    addStringParameter(jandex,generator,"pkColumnName",prms,TableGenerator.SEGMENT_COLUMN_PARAM);
    addStringParameter(jandex,generator,"pkColumnValue",prms,TableGenerator.SEGMENT_VALUE_PARAM);
    addStringParameter(jandex,generator,"valueColumnName",prms,TableGenerator.VALUE_COLUMN_PARAM);
    prms.put(TableGenerator.INCREMENT_PARAM,String.valueOf(JandexHelper.getValueAsInt(jandex,generator,"allocationSize")));
    prms.put(TableGenerator.INITIAL_PARAM,String.valueOf(JandexHelper.getValueAsInt(jandex,generator,"initialValue") + 1));
  }
 else {
    strategy=MultipleHiLoPerTableGenerator.class.getName();
    addStringParameter(jandex,generator,"table",prms,MultipleHiLoPerTableGenerator.ID_TABLE);
    addStringParameter(jandex,generator,"pkColumnName",prms,MultipleHiLoPerTableGenerator.PK_COLUMN_NAME);
    addStringParameter(jandex,generator,"pkColumnValue",prms,MultipleHiLoPerTableGenerator.PK_VALUE_NAME);
    addStringParameter(jandex,generator,"valueColumnName",prms,MultipleHiLoPerTableGenerator.VALUE_COLUMN_NAME);
    prms.put(TableHiLoGenerator.MAX_LO,String.valueOf(JandexHelper.getValueAsInt(jandex,generator,"allocationSize") - 1));
  }
  if (JandexHelper.getValueAsArray(generator,"uniqueConstraints").length > 0)   LOG.ignoringTableGeneratorConstraints(name);
  metadata.addIdGenerator(new IdGenerator(name,strategy,prms));
  LOG.tracef("Add table generator with name: %s",name);
}
