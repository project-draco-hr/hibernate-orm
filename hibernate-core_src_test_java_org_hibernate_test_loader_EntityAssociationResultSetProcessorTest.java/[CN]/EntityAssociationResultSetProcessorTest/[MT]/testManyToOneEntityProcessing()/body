{
  final EntityPersister entityPersister=sessionFactory().getEntityPersister(Message.class.getName());
  Session session=openSession();
  session.beginTransaction();
  Message message=new Message(1,"the message");
  Poster poster=new Poster(2,"the poster");
  session.save(message);
  session.save(poster);
  message.poster=poster;
  poster.messages.add(message);
  session.getTransaction().commit();
  session.close();
{
    final LoadPlan plan=Helper.INSTANCE.buildLoadPlan(sessionFactory(),entityPersister);
    final LoadQueryDetails queryDetails=Helper.INSTANCE.buildLoadQueryDetails(plan,sessionFactory());
    final String sql=queryDetails.getSqlStatement();
    final ResultSetProcessor resultSetProcessor=queryDetails.getResultSetProcessor();
    final List results=new ArrayList();
    final Session workSession=openSession();
    workSession.beginTransaction();
    workSession.doWork(new Work(){
      @Override public void execute(      Connection connection) throws SQLException {
        PreparedStatement ps=connection.prepareStatement(sql);
        ps.setInt(1,1);
        ResultSet resultSet=ps.executeQuery();
        results.addAll(resultSetProcessor.extractResults(resultSet,(SessionImplementor)workSession,new QueryParameters(),new NamedParameterContext(){
          @Override public int[] getNamedParameterLocations(          String name){
            return new int[0];
          }
        }
,true,false,null,null));
        resultSet.close();
        ps.close();
      }
    }
);
    assertEquals(1,results.size());
    Object result=results.get(0);
    assertNotNull(result);
    Message workMessage=ExtraAssertions.assertTyping(Message.class,result);
    assertEquals(1,workMessage.mid.intValue());
    assertEquals("the message",workMessage.msgTxt);
    assertTrue(Hibernate.isInitialized(workMessage.poster));
    Poster workPoster=workMessage.poster;
    assertEquals(2,workPoster.pid.intValue());
    assertEquals("the poster",workPoster.name);
    assertFalse(Hibernate.isInitialized(workPoster.messages));
    workSession.getTransaction().commit();
    workSession.close();
  }
  session=openSession();
  session.beginTransaction();
  session.createQuery("delete Message").executeUpdate();
  session.createQuery("delete Poster").executeUpdate();
  session.getTransaction().commit();
  session.close();
}
