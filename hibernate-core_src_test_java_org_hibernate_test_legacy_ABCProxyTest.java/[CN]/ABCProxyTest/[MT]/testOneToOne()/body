{
  Session s=openSession();
  Transaction t=s.beginTransaction();
  A a=new A();
  E d1=new E();
  C1 c=new C1();
  E d2=new E();
  a.setForward(d1);
  d1.setReverse(a);
  c.setForward(d2);
  d2.setReverse(c);
  Serializable aid=s.save(a);
  Serializable d2id=s.save(d2);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  List l=s.find("from E e, A a where e.reverse = a.forward and a = ?",a,Hibernate.entity(A.class));
  assertTrue(l.size() == 1);
  l=s.createQuery("from E e join fetch e.reverse").list();
  assertTrue(l.size() == 2);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  l=s.createQuery("from E e").list();
  assertTrue(l.size() == 2);
  E e=(E)l.get(0);
  assertTrue(e == e.getReverse().getForward());
  e=(E)l.get(1);
  assertTrue(e == e.getReverse().getForward());
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  a=(A)s.load(A.class,aid);
  d2=(E)s.load(E.class,d2id);
  assertTrue(a == a.getForward().getReverse());
  assertTrue(d2 == d2.getReverse().getForward());
  s.delete(a);
  s.delete(a.getForward());
  s.delete(d2);
  s.delete(d2.getReverse());
  t.commit();
  s=openSession();
  t=s.beginTransaction();
  l=s.createQuery("from E e").list();
  assertTrue(l.size() == 0);
  t.commit();
  s.close();
}
