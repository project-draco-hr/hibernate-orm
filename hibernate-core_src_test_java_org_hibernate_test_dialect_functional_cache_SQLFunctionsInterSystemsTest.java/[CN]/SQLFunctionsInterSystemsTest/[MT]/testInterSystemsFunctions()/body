{
  Calendar cal=new GregorianCalendar();
  cal.set(1977,6,3,0,0,0);
  java.sql.Timestamp testvalue=new java.sql.Timestamp(cal.getTimeInMillis());
  testvalue.setNanos(0);
  Calendar cal3=new GregorianCalendar();
  cal3.set(1976,2,3,0,0,0);
  java.sql.Timestamp testvalue3=new java.sql.Timestamp(cal3.getTimeInMillis());
  testvalue3.setNanos(0);
  final Session s=openSession();
  s.beginTransaction();
  try {
    s.doWork(new Work(){
      @Override public void execute(      Connection connection) throws SQLException {
        Statement stmt=((SessionImplementor)s).getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().createStatement();
        ((SessionImplementor)s).getTransactionCoordinator().getJdbcCoordinator().getResultSetReturn().executeUpdate(stmt,"DROP FUNCTION spLock FROM TestInterSystemsFunctionsClass");
      }
    }
);
  }
 catch (  Exception ex) {
    System.out.println("as we expected stored procedure sp does not exist when we drop it");
  }
  s.getTransaction().commit();
  s.beginTransaction();
  s.doWork(new Work(){
    @Override public void execute(    Connection connection) throws SQLException {
      Statement stmt=((SessionImplementor)s).getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().createStatement();
      String create_function="CREATE FUNCTION SQLUser.TestInterSystemsFunctionsClass_spLock\n" + "     ( INOUT pHandle %SQLProcContext, \n" + "       ROWID INTEGER \n"+ " )\n"+ " FOR User.TestInterSystemsFunctionsClass "+ "    PROCEDURE\n"+ "    RETURNS INTEGER\n"+ "    LANGUAGE OBJECTSCRIPT\n"+ "    {\n"+ "        q 0\n"+ "     }";
      ((SessionImplementor)s).getTransactionCoordinator().getJdbcCoordinator().getResultSetReturn().executeUpdate(stmt,create_function);
    }
  }
);
  s.getTransaction().commit();
  s.beginTransaction();
  TestInterSystemsFunctionsClass object=new TestInterSystemsFunctionsClass(Long.valueOf(10));
  object.setDateText("1977-07-03");
  object.setDate1(testvalue);
  object.setDate3(testvalue3);
  s.save(object);
  s.getTransaction().commit();
  s.close();
  Session s2=openSession();
  s2.beginTransaction();
  TestInterSystemsFunctionsClass test=(TestInterSystemsFunctionsClass)s2.get(TestInterSystemsFunctionsClass.class,Long.valueOf(10));
  assertTrue(test.getDate1().equals(testvalue));
  test=(TestInterSystemsFunctionsClass)s2.get(TestInterSystemsFunctionsClass.class,Long.valueOf(10),LockMode.UPGRADE);
  assertTrue(test.getDate1().equals(testvalue));
  Date value=(Date)s2.createQuery("select nvl(o.date,o.dateText) from TestInterSystemsFunctionsClass as o").list().get(0);
  assertTrue(value.equals(testvalue));
  Object nv=s2.createQuery("select nullif(o.dateText,o.dateText) from TestInterSystemsFunctionsClass as o").list().get(0);
  assertTrue(nv == null);
  String dateText=(String)s2.createQuery("select nvl(o.dateText,o.date) from TestInterSystemsFunctionsClass as o").list().get(0);
  assertTrue(dateText.equals("1977-07-03"));
  value=(Date)s2.createQuery("select ifnull(o.date,o.date1) from TestInterSystemsFunctionsClass as o").list().get(0);
  assertTrue(value.equals(testvalue));
  value=(Date)s2.createQuery("select ifnull(o.date3,o.date,o.date1) from TestInterSystemsFunctionsClass as o").list().get(0);
  assertTrue(value.equals(testvalue));
  Integer pos=(Integer)s2.createQuery("select position('07', o.dateText) from TestInterSystemsFunctionsClass as o").list().get(0);
  assertTrue(pos.intValue() == 6);
  String st=(String)s2.createQuery("select convert(o.date1, SQL_TIME) from TestInterSystemsFunctionsClass as o").list().get(0);
  assertTrue(st.equals("00:00:00"));
  java.sql.Time tm=(java.sql.Time)s2.createQuery("select cast(o.date1, time) from TestInterSystemsFunctionsClass as o").list().get(0);
  assertTrue(tm.toString().equals("00:00:00"));
  Double diff=(Double)s2.createQuery("select timestampdiff(SQL_TSI_FRAC_SECOND, o.date3, o.date1) from TestInterSystemsFunctionsClass as o").list().get(0);
  assertTrue(diff.doubleValue() != 0.0);
  diff=(Double)s2.createQuery("select timestampdiff(SQL_TSI_MONTH, o.date3, o.date1) from TestInterSystemsFunctionsClass as o").list().get(0);
  assertTrue(diff.doubleValue() == 16.0);
  diff=(Double)s2.createQuery("select timestampdiff(SQL_TSI_WEEK, o.date3, o.date1) from TestInterSystemsFunctionsClass as o").list().get(0);
  assertTrue(diff.doubleValue() >= 16 * 4);
  diff=(Double)s2.createQuery("select timestampdiff(SQL_TSI_YEAR, o.date3, o.date1) from TestInterSystemsFunctionsClass as o").list().get(0);
  assertTrue(diff.doubleValue() == 1.0);
  s2.getTransaction().commit();
  s2.close();
}
