{
  final Iterator itr=aliasedLockOptions.getAliasLockIterator();
  final StringBuilder buffer=new StringBuilder(sql);
  int correction=0;
  while (itr.hasNext()) {
    final Map.Entry entry=(Map.Entry)itr.next();
    final LockMode lockMode=(LockMode)entry.getValue();
    if (lockMode.greaterThan(LockMode.READ)) {
      final String alias=(String)entry.getKey();
      int start=-1;
      int end=-1;
      if (sql.endsWith(" " + alias)) {
        start=(sql.length() - alias.length()) + correction;
        end=start + alias.length();
      }
 else {
        int position=sql.indexOf(" " + alias + " ");
        if (position <= -1) {
          position=sql.indexOf(" " + alias + ",");
        }
        if (position > -1) {
          start=position + correction + 1;
          end=start + alias.length();
        }
      }
      if (start > -1) {
        final String lockHint=appendLockHint(lockMode,alias);
        buffer.replace(start,end,lockHint);
        correction+=(lockHint.length() - alias.length());
      }
    }
  }
  return buffer.toString();
}
