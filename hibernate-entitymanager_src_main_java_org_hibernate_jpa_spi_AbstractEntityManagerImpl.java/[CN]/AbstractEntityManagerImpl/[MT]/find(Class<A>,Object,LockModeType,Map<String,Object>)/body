{
  checkOpen();
  Session session=internalGetSession();
  CacheMode previousCacheMode=session.getCacheMode();
  CacheMode cacheMode=determineAppropriateLocalCacheMode(properties);
  LockOptions lockOptions=null;
  try {
    session.setCacheMode(cacheMode);
    if (lockModeType != null) {
      lockOptions=getLockRequest(lockModeType,properties);
      return (A)session.get(entityClass,(Serializable)primaryKey,lockOptions);
    }
 else {
      return (A)session.get(entityClass,(Serializable)primaryKey);
    }
  }
 catch (  EntityNotFoundException ignored) {
    if (LOG.isDebugEnabled()) {
      String entityName=entityClass != null ? entityClass.getName() : null;
      String identifierValue=primaryKey != null ? primaryKey.toString() : null;
      LOG.ignoringEntityNotFound(entityName,identifierValue);
    }
    return null;
  }
catch (  ObjectDeletedException e) {
    return null;
  }
catch (  ObjectNotFoundException e) {
    throw new IllegalArgumentException(e.getMessage(),e);
  }
catch (  MappingException e) {
    throw new IllegalArgumentException(e.getMessage(),e);
  }
catch (  TypeMismatchException e) {
    throw new IllegalArgumentException(e.getMessage(),e);
  }
catch (  ClassCastException e) {
    throw new IllegalArgumentException(e.getMessage(),e);
  }
catch (  HibernateException he) {
    throw convert(he,lockOptions);
  }
 finally {
    session.setCacheMode(previousCacheMode);
  }
}
