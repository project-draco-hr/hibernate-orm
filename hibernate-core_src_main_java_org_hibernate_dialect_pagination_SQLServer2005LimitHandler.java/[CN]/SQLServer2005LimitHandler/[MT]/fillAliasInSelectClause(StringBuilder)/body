{
  final List<String> aliases=new LinkedList<String>();
  final int startPos=shallowIndexOf(sb,SELECT_WITH_SPACE,0);
  int endPos=shallowIndexOfWord(sb,FROM,startPos);
  int nextComa=startPos;
  int prevComa=startPos;
  int unique=0;
  boolean selectsMultipleColumns=false;
  while (nextComa != -1) {
    prevComa=nextComa;
    nextComa=shallowIndexOf(sb,",",nextComa);
    if (nextComa > endPos) {
      break;
    }
    if (nextComa != -1) {
      final String expression=sb.substring(prevComa,nextComa);
      if (selectsMultipleColumns(expression)) {
        selectsMultipleColumns=true;
      }
 else {
        String alias=getAlias(expression);
        if (alias == null) {
          alias=StringHelper.generateAlias("page",unique);
          sb.insert(nextComa," as " + alias);
          int aliasExprLength=(" as " + alias).length();
          ++unique;
          nextComa+=aliasExprLength;
          endPos+=aliasExprLength;
        }
        aliases.add(alias);
      }
      ++nextComa;
    }
  }
  endPos=shallowIndexOfWord(sb,FROM,startPos);
  final String expression=sb.substring(prevComa,endPos);
  if (selectsMultipleColumns(expression)) {
    selectsMultipleColumns=true;
  }
 else {
    String alias=getAlias(expression);
    if (alias == null) {
      alias=StringHelper.generateAlias("page",unique);
      sb.insert(endPos - 1," as " + alias);
    }
    aliases.add(alias);
  }
  return selectsMultipleColumns ? "*" : StringHelper.join(", ",aliases.iterator());
}
