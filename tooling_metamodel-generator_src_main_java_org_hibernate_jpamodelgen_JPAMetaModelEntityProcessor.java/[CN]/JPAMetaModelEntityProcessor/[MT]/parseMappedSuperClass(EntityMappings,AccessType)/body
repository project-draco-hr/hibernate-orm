{
  String packageName=mappings.getPackage();
  Collection<org.hibernate.jpamodelgen.xml.jaxb.MappedSuperclass> mappedSuperClasses=mappings.getMappedSuperclass();
  for (  org.hibernate.jpamodelgen.xml.jaxb.MappedSuperclass mappedSuperClass : mappedSuperClasses) {
    String fullyQualifiedClassName=packageName + "." + mappedSuperClass.getClazz();
    if (!xmlMappedTypeExists(fullyQualifiedClassName)) {
      context.logMessage(Diagnostic.Kind.WARNING,fullyQualifiedClassName + " is mapped in xml, but class does not exists. Skipping meta model generation.");
      continue;
    }
    XmlMetaEntity metaEntity=new XmlMetaEntity(mappedSuperClass,packageName,getXmlMappedType(fullyQualifiedClassName));
    if (context.getMetaSuperclassAndEmbeddableToProcess().containsKey(fullyQualifiedClassName)) {
      context.logMessage(Diagnostic.Kind.WARNING,fullyQualifiedClassName + " was already processed once. Skipping second occurance.");
    }
    context.getMetaSuperclassAndEmbeddableToProcess().put(fullyQualifiedClassName,metaEntity);
  }
}
