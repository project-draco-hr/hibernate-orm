{
  super(configuredClass,null,InheritanceType.NO_INHERITANCE,bindingContext);
  final AnnotationInstance hibernateEntityAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.ENTITY);
  OptimisticLockType optimisticLockType=OptimisticLockType.VERSION;
  if (hibernateEntityAnnotation != null && hibernateEntityAnnotation.value("optimisticLock") != null) {
    optimisticLockType=OptimisticLockType.valueOf(hibernateEntityAnnotation.value("optimisticLock").asEnum());
  }
  this.optimisticLockStyle=OptimisticLockStyle.valueOf(optimisticLockType.name());
  final PolymorphismType polymorphism=hibernateEntityAnnotation != null && hibernateEntityAnnotation.value("polymorphism") != null ? PolymorphismType.valueOf(hibernateEntityAnnotation.value("polymorphism").asEnum()) : PolymorphismType.IMPLICIT;
  this.explicitPolymorphism=polymorphism != PolymorphismType.IMPLICIT;
  final AnnotationInstance hibernateImmutableAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.IMMUTABLE);
  this.mutable=hibernateImmutableAnnotation == null && hibernateEntityAnnotation != null && hibernateEntityAnnotation.value("mutable") != null && hibernateEntityAnnotation.value("mutable").asBoolean();
  final AnnotationInstance whereAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.WHERE);
  this.whereFilter=whereAnnotation != null && whereAnnotation.value("clause") != null ? whereAnnotation.value("clause").asString() : null;
  final AnnotationInstance rowIdAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),HibernateDotNames.ROW_ID);
  this.rowId=rowIdAnnotation != null && rowIdAnnotation.value() != null ? rowIdAnnotation.value().asString() : null;
  this.caching=interpretCaching(configuredClass,bindingContext);
  final AnnotationInstance tableAnnotation=JandexHelper.getSingleAnnotation(configuredClass.getClassInfo(),JPADotNames.TABLE);
  this.baseTableDescriptor=new TableDescriptorImpl(tableAnnotation.value("schema") == null ? null : tableAnnotation.value("schema").asString(),tableAnnotation.value("catalog") == null ? null : tableAnnotation.value("catalog").asString(),tableAnnotation.value("name") == null ? null : tableAnnotation.value("name").asString(),this,bindingContext);
}
