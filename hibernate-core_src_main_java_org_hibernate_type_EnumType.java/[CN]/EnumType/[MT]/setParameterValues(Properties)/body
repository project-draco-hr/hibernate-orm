{
  final ParameterType reader=(ParameterType)parameters.get(PARAMETER_TYPE);
  if (reader != null) {
    enumClass=reader.getReturnedClass().asSubclass(Enum.class);
    final boolean isOrdinal;
    final javax.persistence.EnumType enumType=getEnumType(reader);
    if (enumType == null) {
      isOrdinal=true;
    }
 else     if (javax.persistence.EnumType.ORDINAL.equals(enumType)) {
      isOrdinal=true;
    }
 else     if (javax.persistence.EnumType.STRING.equals(enumType)) {
      isOrdinal=false;
    }
 else {
      throw new AssertionFailure("Unknown EnumType: " + enumType);
    }
    if (isOrdinal) {
      treatAsOrdinal();
    }
 else {
      treatAsNamed();
    }
    sqlType=enumValueMapper.getSqlType();
  }
 else {
    String enumClassName=(String)parameters.get(ENUM);
    try {
      enumClass=ReflectHelper.classForName(enumClassName,this.getClass()).asSubclass(Enum.class);
    }
 catch (    ClassNotFoundException exception) {
      throw new HibernateException("Enum class not found",exception);
    }
    final Object useNamedSetting=parameters.get(NAMED);
    if (useNamedSetting != null) {
      final boolean useNamed=ConfigurationHelper.getBoolean(NAMED,parameters);
      if (useNamed) {
        treatAsNamed();
      }
 else {
        treatAsOrdinal();
      }
      sqlType=enumValueMapper.getSqlType();
    }
  }
  final String type=(String)parameters.get(TYPE);
  if (type != null) {
    sqlType=Integer.decode(type);
  }
}
