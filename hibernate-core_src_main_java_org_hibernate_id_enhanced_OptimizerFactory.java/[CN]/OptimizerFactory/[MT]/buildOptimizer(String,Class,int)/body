{
  String optimizerClassName;
  if (NONE.equals(type)) {
    optimizerClassName=NoopOptimizer.class.getName();
  }
 else   if (HILO.equals(type)) {
    optimizerClassName=HiLoOptimizer.class.getName();
  }
 else   if (LEGACY_HILO.equals(type)) {
    optimizerClassName=LegacyHiLoAlgorithmOptimizer.class.getName();
  }
 else   if (POOL.equals(type)) {
    optimizerClassName=PooledOptimizer.class.getName();
  }
 else   if (POOL_LO.equals(type)) {
    optimizerClassName=PooledLoOptimizer.class.getName();
  }
 else {
    optimizerClassName=type;
  }
  try {
    Class optimizerClass=ReflectHelper.classForName(optimizerClassName);
    Constructor ctor=optimizerClass.getConstructor(CTOR_SIG);
    return (Optimizer)ctor.newInstance(returnClass,Integer.valueOf(incrementSize));
  }
 catch (  Throwable ignore) {
    log.warn("Unable to instantiate specified optimizer [{}], falling back to noop",type);
  }
  return new NoopOptimizer(returnClass,incrementSize);
}
