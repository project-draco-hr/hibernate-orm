{
  final String databaseName=databaseInfo.getDatabaseName();
  if ("CUBRID".equalsIgnoreCase(databaseName)) {
    return new CUBRIDDialect();
  }
  if ("HSQL Database Engine".equals(databaseName)) {
    return new HSQLDialect();
  }
  if ("H2".equals(databaseName)) {
    return new H2Dialect();
  }
  if ("MySQL".equals(databaseName)) {
    final int majorVersion=databaseInfo.getDatabaseMajorVersion();
    if (majorVersion >= 5) {
      return new MySQL5Dialect();
    }
    return new MySQLDialect();
  }
  if ("PostgreSQL".equals(databaseName)) {
    final int majorVersion=databaseInfo.getDatabaseMajorVersion();
    final int minorVersion=databaseInfo.getDatabaseMinorVersion();
    if (majorVersion == 9) {
      return new PostgreSQL9Dialect();
    }
    if (majorVersion == 8 && minorVersion >= 2) {
      return new PostgreSQL82Dialect();
    }
    return new PostgreSQL81Dialect();
  }
  if ("EnterpriseDB".equals(databaseName)) {
    return new PostgresPlusDialect();
  }
  if ("Apache Derby".equals(databaseName)) {
    final int majorVersion=databaseInfo.getDatabaseMajorVersion();
    final int minorVersion=databaseInfo.getDatabaseMinorVersion();
    if (majorVersion > 10 || (majorVersion == 10 && minorVersion >= 7)) {
      return new DerbyTenSevenDialect();
    }
 else     if (majorVersion == 10 && minorVersion == 6) {
      return new DerbyTenSixDialect();
    }
 else     if (majorVersion == 10 && minorVersion == 5) {
      return new DerbyTenFiveDialect();
    }
 else {
      return new DerbyDialect();
    }
  }
  if ("ingres".equalsIgnoreCase(databaseName)) {
    final int majorVersion=databaseInfo.getDatabaseMajorVersion();
    final int minorVersion=databaseInfo.getDatabaseMinorVersion();
switch (majorVersion) {
case 9:
      if (minorVersion > 2) {
        return new Ingres9Dialect();
      }
    return new IngresDialect();
case 10:
  return new Ingres10Dialect();
default :
LOG.unknownIngresVersion(majorVersion);
}
return new IngresDialect();
}
if (databaseName.startsWith("Microsoft SQL Server")) {
final int majorVersion=databaseInfo.getDatabaseMajorVersion();
switch (majorVersion) {
case 8:
return new SQLServerDialect();
case 9:
return new SQLServer2005Dialect();
case 10:
return new SQLServer2008Dialect();
case 11:
return new SQLServer2012Dialect();
default :
LOG.unknownSqlServerVersion(majorVersion);
}
return new SQLServerDialect();
}
if ("Sybase SQL Server".equals(databaseName) || "Adaptive Server Enterprise".equals(databaseName)) {
return new SybaseASE15Dialect();
}
if (databaseName.startsWith("Adaptive Server Anywhere")) {
return new SybaseAnywhereDialect();
}
if ("Informix Dynamic Server".equals(databaseName)) {
return new InformixDialect();
}
if ("DB2 UDB for AS/400".equals(databaseName)) {
return new DB2400Dialect();
}
if (databaseName.startsWith("DB2/")) {
return new DB2Dialect();
}
if ("Oracle".equals(databaseName)) {
final int majorVersion=databaseInfo.getDatabaseMajorVersion();
switch (majorVersion) {
case 11:
return new Oracle10gDialect();
case 10:
return new Oracle10gDialect();
case 9:
return new Oracle9iDialect();
case 8:
return new Oracle8iDialect();
default :
LOG.unknownOracleVersion(majorVersion);
}
}
return null;
}
