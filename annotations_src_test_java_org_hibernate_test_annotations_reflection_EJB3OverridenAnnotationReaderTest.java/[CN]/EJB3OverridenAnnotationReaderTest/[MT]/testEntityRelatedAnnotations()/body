{
  XMLContext context=buildContext("org/hibernate/test/annotations/reflection/orm.xml");
  EJB3OverridenAnnotationReader reader=new EJB3OverridenAnnotationReader(Administration.class,context);
  assertNotNull(reader.getAnnotation(Entity.class));
  assertEquals("Default value in xml entity should not override @Entity.name","JavaAdministration",reader.getAnnotation(Entity.class).name());
  assertNotNull(reader.getAnnotation(Table.class));
  assertEquals("@Table not overriden","tbl_admin",reader.getAnnotation(Table.class).name());
  assertEquals("Default schema not overriden","myschema",reader.getAnnotation(Table.class).schema());
  assertEquals("Proper @Table.uniqueConstraints",2,reader.getAnnotation(Table.class).uniqueConstraints()[0].columnNames().length);
  String columnName=reader.getAnnotation(Table.class).uniqueConstraints()[0].columnNames()[0];
  assertTrue("Proper @Table.uniqueConstraints","firstname".equals(columnName) || "lastname".equals(columnName));
  assertNull("Both Java and XML used",reader.getAnnotation(SecondaryTable.class));
  assertNotNull("XML does not work",reader.getAnnotation(SecondaryTables.class));
  SecondaryTable[] tables=reader.getAnnotation(SecondaryTables.class).value();
  assertEquals(1,tables.length);
  assertEquals("admin2",tables[0].name());
  assertEquals("unique constraints ignored",1,tables[0].uniqueConstraints().length);
  assertEquals("pk join column ignored",1,tables[0].pkJoinColumns().length);
  assertEquals("pk join column ignored","admin_id",tables[0].pkJoinColumns()[0].name());
  assertNotNull("Sequence Overriding not working",reader.getAnnotation(SequenceGenerator.class));
  assertEquals("wrong sequence name","seqhilo",reader.getAnnotation(SequenceGenerator.class).sequenceName());
  assertEquals("default fails",50,reader.getAnnotation(SequenceGenerator.class).allocationSize());
  assertNotNull("TableOverriding not working",reader.getAnnotation(TableGenerator.class));
  assertEquals("wrong tble name","tablehilo",reader.getAnnotation(TableGenerator.class).table());
  assertEquals("no schema overriding","myschema",reader.getAnnotation(TableGenerator.class).schema());
  reader=new EJB3OverridenAnnotationReader(Match.class,context);
  assertNotNull(reader.getAnnotation(Table.class));
  assertEquals("Java annotation not taken into account","matchtable",reader.getAnnotation(Table.class).name());
  assertEquals("Java annotation not taken into account","matchschema",reader.getAnnotation(Table.class).schema());
  assertEquals("Overriding not taken into account","mycatalog",reader.getAnnotation(Table.class).catalog());
  assertNotNull("SecondaryTable swallowed",reader.getAnnotation(SecondaryTables.class));
  assertEquals("Default schema not taken into account","myschema",reader.getAnnotation(SecondaryTables.class).value()[0].schema());
  assertNotNull(reader.getAnnotation(Inheritance.class));
  assertEquals("inheritance strategy not overriden",InheritanceType.JOINED,reader.getAnnotation(Inheritance.class).strategy());
  assertNotNull("NamedQuery not overriden",reader.getAnnotation(NamedQueries.class));
  assertEquals("No deduplication",3,reader.getAnnotation(NamedQueries.class).value().length);
  assertEquals("deduplication kept the Java version",1,reader.getAnnotation(NamedQueries.class).value()[1].hints().length);
  assertEquals("org.hibernate.timeout",reader.getAnnotation(NamedQueries.class).value()[1].hints()[0].name());
  assertNotNull("NamedNativeQuery not overriden",reader.getAnnotation(NamedNativeQueries.class));
  assertEquals("No deduplication",3,reader.getAnnotation(NamedNativeQueries.class).value().length);
  assertEquals("deduplication kept the Java version",1,reader.getAnnotation(NamedNativeQueries.class).value()[1].hints().length);
  assertEquals("org.hibernate.timeout",reader.getAnnotation(NamedNativeQueries.class).value()[1].hints()[0].name());
  assertNotNull(reader.getAnnotation(SqlResultSetMappings.class));
  assertEquals("competitor1Point",reader.getAnnotation(SqlResultSetMappings.class).value()[0].columns()[0].name());
  assertEquals("competitor1Point",reader.getAnnotation(SqlResultSetMappings.class).value()[0].entities()[0].fields()[0].column());
  assertNotNull(reader.getAnnotation(ExcludeSuperclassListeners.class));
  assertNotNull(reader.getAnnotation(ExcludeDefaultListeners.class));
  reader=new EJB3OverridenAnnotationReader(Competition.class,context);
  assertNotNull(reader.getAnnotation(MappedSuperclass.class));
  reader=new EJB3OverridenAnnotationReader(TennisMatch.class,context);
  assertNull("Mutualize PKJC into PKJCs",reader.getAnnotation(PrimaryKeyJoinColumn.class));
  assertNotNull(reader.getAnnotation(PrimaryKeyJoinColumns.class));
  assertEquals("PrimaryKeyJoinColumn overrden","id",reader.getAnnotation(PrimaryKeyJoinColumns.class).value()[0].name());
  assertNotNull(reader.getAnnotation(AttributeOverrides.class));
  assertEquals("Wrong deduplication",3,reader.getAnnotation(AttributeOverrides.class).value().length);
  assertEquals("Wrong priority (XML vs java annotations)","fld_net",reader.getAnnotation(AttributeOverrides.class).value()[0].column().name());
  assertEquals("Column mapping",2,reader.getAnnotation(AttributeOverrides.class).value()[1].column().scale());
  assertEquals("Column mapping",true,reader.getAnnotation(AttributeOverrides.class).value()[1].column().unique());
  assertNotNull(reader.getAnnotation(AssociationOverrides.class));
  assertEquals("no XML processing",1,reader.getAnnotation(AssociationOverrides.class).value().length);
  assertEquals("wrong xml processing","id",reader.getAnnotation(AssociationOverrides.class).value()[0].joinColumns()[0].referencedColumnName());
  reader=new EJB3OverridenAnnotationReader(SocialSecurityPhysicalAccount.class,context);
  assertNotNull(reader.getAnnotation(IdClass.class));
  assertEquals("id-class not used",SocialSecurityNumber.class,reader.getAnnotation(IdClass.class).value());
  assertEquals("discriminator-value not used","Physical",reader.getAnnotation(DiscriminatorValue.class).value());
  assertNotNull("discriminator-column not used",reader.getAnnotation(DiscriminatorColumn.class));
  assertEquals("discriminator-column.name default value broken","DTYPE",reader.getAnnotation(DiscriminatorColumn.class).name());
  assertEquals("discriminator-column.length broken",34,reader.getAnnotation(DiscriminatorColumn.class).length());
}
