{
  final Map originalId=(Map)versionsEntity.get(verCfg.getAuditEntCfg().getOriginalIdPropName());
  for (  Object key : originalId.keySet()) {
    Object value=originalId.get(key);
    if (value instanceof HibernateProxy) {
      HibernateProxy hibernateProxy=(HibernateProxy)value;
      LazyInitializer initializer=hibernateProxy.getHibernateLazyInitializer();
      final String entityName=initializer.getEntityName();
      final Serializable entityId=initializer.getIdentifier();
      if (verCfg.getEntCfg().isVersioned(entityName)) {
        final String entityClassName=verCfg.getEntCfg().get(entityName).getEntityClassName();
        final Class entityClass=ReflectionTools.loadClass(entityClassName,verCfg.getClassLoaderService());
        final ToOneDelegateSessionImplementor delegate=new ToOneDelegateSessionImplementor(versionsReader,entityClass,entityId,revision,RevisionType.DEL.equals(versionsEntity.get(verCfg.getAuditEntCfg().getRevisionTypePropName())),verCfg);
        originalId.put(key,versionsReader.getSessionImplementor().getFactory().getEntityPersister(entityName).createProxy(entityId,delegate));
      }
    }
  }
}
