{
  if (versionsEntity == null) {
    return null;
  }
  String type=verCfg.getEntCfg().getEntityNameForVersionsEntityName((String)versionsEntity.get("$type$"));
  if (type != null) {
    entityName=type;
  }
  IdMapper idMapper=verCfg.getEntCfg().get(entityName).getIdMapper();
  Map originalId=(Map)versionsEntity.get(verCfg.getAuditEntCfg().getOriginalIdPropName());
  replaceNonAuditIdProxies(versionsEntity,revision);
  Object primaryKey=idMapper.mapToIdFromMap(originalId);
  if (versionsReader.getFirstLevelCache().contains(entityName,revision,primaryKey)) {
    return versionsReader.getFirstLevelCache().get(entityName,revision,primaryKey);
  }
  Object ret;
  try {
    EntityConfiguration entCfg=verCfg.getEntCfg().get(entityName);
    if (entCfg == null) {
      entCfg=verCfg.getEntCfg().getNotVersionEntityConfiguration(entityName);
    }
    Class<?> cls=ReflectionTools.loadClass(entCfg.getEntityClassName(),verCfg.getClassLoaderService());
    ret=ReflectHelper.getDefaultConstructor(cls).newInstance();
  }
 catch (  Exception e) {
    throw new AuditException(e);
  }
  versionsReader.getFirstLevelCache().put(entityName,revision,primaryKey,ret);
  verCfg.getEntCfg().get(entityName).getPropertyMapper().mapToEntityFromMap(verCfg,ret,versionsEntity,primaryKey,versionsReader,revision);
  idMapper.mapToEntityFromMap(ret,originalId);
  versionsReader.getFirstLevelCache().putOnEntityNameCache(primaryKey,revision,ret,entityName);
  return ret;
}
