{
  return region.invoke(key,new EntryProcessor<Object,Object,Boolean>(){
    @Override public Boolean process(    MutableEntry<Object,Object> entry,    Object... args) throws EntryProcessorException {
      final Lockable item=(Lockable)entry.getValue();
      if (item != null && item.isUnlockable((SoftLock)args[3])) {
        final Lock lockItem=(Lock)item;
        if (lockItem.wasLockedConcurrently()) {
          lockItem.unlock((Long)args[1]);
          entry.setValue(lockItem);
          return false;
        }
 else {
          entry.setValue(new Item(args[0],args[1],(Long)args[4]));
          return true;
        }
      }
 else {
        entry.setValue(null);
        return false;
      }
    }
  }
,value,currentVersion,previousVersion,lock,region.nextTimestamp());
}
