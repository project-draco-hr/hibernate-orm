{
  if (mode == ParameterMode.REF_CURSOR) {
    throw new NotYetImplementedException("Support for REF_CURSOR parameters not yet supported");
  }
  this.startIndex=startIndex;
  if (mode == ParameterMode.IN || mode == ParameterMode.INOUT || mode == ParameterMode.OUT) {
    if (mode == ParameterMode.INOUT || mode == ParameterMode.OUT) {
      if (sqlTypes.length > 1) {
        if (ProcedureParameterExtractionAware.class.isInstance(hibernateType) && ((ProcedureParameterExtractionAware)hibernateType).canDoExtraction()) {
        }
 else {
          throw new UnsupportedOperationException("Type [" + hibernateType + "] does support multi-parameter value extraction");
        }
      }
      for (int i=0; i < sqlTypes.length; i++) {
        statement.registerOutParameter(startIndex + i,sqlTypes[i]);
      }
    }
    if (mode == ParameterMode.INOUT || mode == ParameterMode.IN) {
      if (bind == null || bind.getValue() == null) {
        log.debugf("Stored procedure [%s] IN/INOUT parameter [%s] not bound; assuming procedure defines default value",procedureCall.getProcedureName(),this);
      }
 else {
        final Type typeToUse;
        if (bind.getExplicitTemporalType() != null && bind.getExplicitTemporalType() == TemporalType.TIMESTAMP) {
          typeToUse=hibernateType;
        }
 else         if (bind.getExplicitTemporalType() != null && bind.getExplicitTemporalType() == TemporalType.DATE) {
          typeToUse=DateType.INSTANCE;
        }
 else {
          typeToUse=hibernateType;
        }
        typeToUse.nullSafeSet(statement,bind.getValue(),startIndex,session());
      }
    }
  }
 else {
    if (procedureCall.getParameterStrategy() == ParameterStrategy.NAMED) {
      session().getFactory().getServiceRegistry().getService(RefCursorSupport.class).registerRefCursorParameter(statement,getName());
    }
 else {
      session().getFactory().getServiceRegistry().getService(RefCursorSupport.class).registerRefCursorParameter(statement,getPosition());
    }
  }
}
