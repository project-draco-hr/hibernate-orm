{
  Type typeToUse=hibernateType;
  int[] sqlTypesToUse=sqlTypes;
  if (bind != null && bind.getExplicitTemporalType() != null) {
    if (Calendar.class.isInstance(bind.getValue())) {
switch (bind.getExplicitTemporalType()) {
case TIMESTAMP:
{
          typeToUse=CalendarType.INSTANCE;
          sqlTypesToUse=typeToUse.sqlTypes(session().getFactory());
          break;
        }
case DATE:
{
        typeToUse=CalendarDateType.INSTANCE;
        sqlTypesToUse=typeToUse.sqlTypes(session().getFactory());
        break;
      }
case TIME:
{
      typeToUse=CalendarTimeType.INSTANCE;
      sqlTypesToUse=typeToUse.sqlTypes(session().getFactory());
      break;
    }
}
}
}
this.startIndex=startIndex;
if (mode == ParameterMode.IN || mode == ParameterMode.INOUT || mode == ParameterMode.OUT) {
if (mode == ParameterMode.INOUT || mode == ParameterMode.OUT) {
if (sqlTypesToUse.length > 1) {
  final boolean canHandleMultiParamExtraction=ProcedureParameterExtractionAware.class.isInstance(hibernateType) && ((ProcedureParameterExtractionAware)hibernateType).canDoExtraction();
  if (!canHandleMultiParamExtraction) {
    throw new UnsupportedOperationException("Type [" + hibernateType + "] does support multi-parameter value extraction");
  }
}
for (int i=0; i < sqlTypesToUse.length; i++) {
  statement.registerOutParameter(startIndex + i,sqlTypesToUse[i]);
}
}
if (mode == ParameterMode.INOUT || mode == ParameterMode.IN) {
if (bind == null || bind.getValue() == null) {
  if (passNulls) {
    log.debugf("Stored procedure [%s] IN/INOUT parameter [%s] not bound and `passNulls` was set to true; binding NULL",procedureCall.getProcedureName(),this);
    if (this.procedureCall.getParameterStrategy() == ParameterStrategy.NAMED && canDoNameParameterBinding()) {
      ((ProcedureParameterNamedBinder)typeToUse).nullSafeSet(statement,null,this.getName(),session());
    }
 else {
      typeToUse.nullSafeSet(statement,null,startIndex,session());
    }
  }
 else {
    log.debugf("Stored procedure [%s] IN/INOUT parameter [%s] not bound and `passNulls` was set to false; assuming procedure defines default value",procedureCall.getProcedureName(),this);
  }
}
 else {
  if (this.procedureCall.getParameterStrategy() == ParameterStrategy.NAMED && canDoNameParameterBinding()) {
    ((ProcedureParameterNamedBinder)typeToUse).nullSafeSet(statement,bind.getValue(),this.getName(),session());
  }
 else {
    typeToUse.nullSafeSet(statement,bind.getValue(),startIndex,session());
  }
}
}
}
 else {
if (procedureCall.getParameterStrategy() == ParameterStrategy.NAMED) {
session().getFactory().getServiceRegistry().getService(RefCursorSupport.class).registerRefCursorParameter(statement,getName());
}
 else {
session().getFactory().getServiceRegistry().getService(RefCursorSupport.class).registerRefCursorParameter(statement,startIndex);
}
}
}
