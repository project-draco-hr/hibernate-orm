{
  nullifyTransientReferencesIfNotAlready();
  final EntityPersister persister=getPersister();
  final SessionImplementor session=getSession();
  final Object instance=getInstance();
  final Serializable id=getId();
  final boolean veto=preInsert();
  if (!veto) {
    persister.insert(id,getState(),instance,session);
    PersistenceContext persistenceContext=session.getPersistenceContext();
    final EntityEntry entry=persistenceContext.getEntry(instance);
    if (entry == null) {
      throw new AssertionFailure("possible non-threadsafe access to session");
    }
    entry.postInsert(getState());
    if (persister.hasInsertGeneratedProperties()) {
      persister.processInsertGeneratedProperties(id,instance,getState(),session);
      if (persister.isVersionPropertyGenerated()) {
        version=Versioning.getVersion(getState(),persister);
      }
      entry.postUpdate(instance,getState(),version);
    }
    persistenceContext.registerInsertedKey(persister,getId());
  }
  final SessionFactoryImplementor factory=session.getFactory();
  if (isCachePutEnabled(persister,session)) {
    final CacheEntry ce=persister.buildCacheEntry(instance,getState(),version,session);
    cacheEntry=persister.getCacheEntryStructure().structure(ce);
    final EntityRegionAccessStrategy cache=persister.getCacheAccessStrategy();
    final EntityCacheKey ck=cache.generateCacheKey(id,persister,factory,session.getTenantIdentifier());
    final boolean put=cacheInsert(persister,ck);
    if (put && factory.getStatistics().isStatisticsEnabled()) {
      factory.getStatisticsImplementor().secondLevelCachePut(cache.getRegion().getName());
    }
  }
  handleNaturalIdPostSaveNotifications(id);
  postInsert();
  if (factory.getStatistics().isStatisticsEnabled() && !veto) {
    factory.getStatisticsImplementor().insertEntity(getPersister().getEntityName());
  }
  markExecuted();
}
