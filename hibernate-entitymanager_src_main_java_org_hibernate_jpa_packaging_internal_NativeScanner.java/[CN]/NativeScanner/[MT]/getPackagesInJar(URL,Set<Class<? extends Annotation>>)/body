{
  if (annotationsToLookFor.size() > 0) {
    throw new AssertionFailure("Improper use of NativeScanner: must not filter packages");
  }
  JarVisitor jarVisitor=getVisitor(jarToScan);
  final Set<Entry> packageEntries;
  try {
    packageEntries=(Set<Entry>)jarVisitor.getMatchingEntries()[PACKAGE_FILTER_INDEX];
  }
 catch (  IOException e) {
    throw new RuntimeException("Error while reading " + jarToScan.toString(),e);
  }
  Set<Package> packages=new HashSet<Package>(packageEntries.size());
  for (  Entry entry : packageEntries) {
    try {
      packages.add(ReflectHelper.classForName(entry.getName() + ".package-info").getPackage());
    }
 catch (    ClassNotFoundException e) {
    }
  }
  return packages;
}
