{
  final ClassLoader serviceLoaderClassLoader=new ClassLoader(){
    final ClassLoader[] classLoaderArray=new ClassLoader[]{getClass().getClassLoader(),resourcesClassLoader,classClassLoader};
    @Override public Enumeration<URL> getResources(    String name) throws IOException {
      final HashSet<URL> resourceUrls=new HashSet<URL>();
      for (      ClassLoader classLoader : classLoaderArray) {
        final Enumeration<URL> urls=classLoader.getResources(name);
        while (urls.hasMoreElements()) {
          resourceUrls.add(urls.nextElement());
        }
      }
      return new Enumeration<URL>(){
        final Iterator<URL> resourceUrlIterator=resourceUrls.iterator();
        @Override public boolean hasMoreElements(){
          return resourceUrlIterator.hasNext();
        }
        @Override public URL nextElement(){
          return resourceUrlIterator.next();
        }
      }
;
    }
    @Override protected Class<?> findClass(    String name) throws ClassNotFoundException {
      for (      ClassLoader classLoader : classLoaderArray) {
        try {
          classLoader.loadClass(name);
        }
 catch (        Exception ignore) {
        }
      }
      throw new ClassNotFoundException("Could not load requested class : " + name);
    }
  }
;
  final ServiceLoader<S> loader=ServiceLoader.load(serviceContract,serviceLoaderClassLoader);
  final LinkedHashSet<S> services=new LinkedHashSet<S>();
  for (  S service : loader) {
    services.add(service);
  }
  return services;
}
