{
  Session s=openSession();
  s.beginTransaction();
  Inner sup=new Inner();
  InnerKey sid=new InnerKey();
  sup.setDudu("dudu");
  sid.setAkey("a");
  sid.setBkey("b");
  sup.setId(sid);
  Middle m=new Middle();
  MiddleKey mid=new MiddleKey();
  mid.setOne("one");
  mid.setTwo("two");
  mid.setSup(sup);
  m.setId(mid);
  m.setBla("bla");
  Outer d=new Outer();
  OuterKey did=new OuterKey();
  did.setMaster(m);
  did.setDetailId("detail");
  d.setId(did);
  d.setBubu("bubu");
  s.save(sup);
  s.save(m);
  s.save(d);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  Inner in=(Inner)s.createQuery("from Inner").list().get(0);
  assertTrue(in.getMiddles().size() == 1);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  assertTrue(s.createQuery("from Inner _inner join _inner.middles middle").list().size() == 1);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  d=(Outer)s.load(Outer.class,did);
  assertTrue(d.getId().getMaster().getId().getSup().getDudu().equals("dudu"));
  s.delete(d);
  s.delete(d.getId().getMaster());
  s.save(d.getId().getMaster());
  s.save(d);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  d=(Outer)s.createQuery("from Outer o where o.id.detailId = ?").setParameter(0,d.getId().getDetailId(),Hibernate.STRING).list().get(0);
  s.createQuery("from Outer o where o.id.master.id.sup.dudu is not null").list();
  s.createQuery("from Outer o where o.id.master.id.sup.id.akey is not null").list();
  s.createQuery("from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list();
  List l=s.createQuery("select o.id.master.id.sup.dudu from Outer o where o.id.master.id.sup.dudu is not null").list();
  assertTrue(l.size() == 1);
  l=s.createQuery("select o.id.master.id.sup.id.akey from Outer o where o.id.master.id.sup.id.akey is not null").list();
  assertTrue(l.size() == 1);
  s.createQuery("select i.backOut.id.master.id.sup.id.akey from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list();
  s.createQuery("from Outer o where o.id.master.bla = ''").list();
  s.createQuery("from Outer o where o.id.master.id.one = ''").list();
  s.createQuery("from Inner inn where inn.id.bkey is not null and inn.backOut.id.master.id.sup.id.akey > 'a'").list();
  s.createQuery("from Outer as o left join o.id.master m left join m.id.sup where o.bubu is not null").list();
  s.createQuery("from Outer as o left join o.id.master.id.sup s where o.bubu is not null").list();
  s.createQuery("from Outer as o left join o.id.master m left join o.id.master.id.sup s where o.bubu is not null").list();
  s.delete(d);
  s.delete(d.getId().getMaster());
  s.delete(d.getId().getMaster().getId().getSup());
  s.getTransaction().commit();
  s.close();
}
