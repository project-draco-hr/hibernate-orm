{
  clearCounts();
  Contract c=new Contract(null,"gail","phone");
  Party party=new Party("party");
  Session s=openSession();
  Transaction t=s.beginTransaction();
  s.persist(c);
  s.persist(party);
  t.commit();
  s.close();
  assertInsertCount(2);
  assertUpdateCount(0);
  clearCounts();
  s=openSession();
  t=s.beginTransaction();
  c=(Contract)s.get(Contract.class,c.getId());
  assertEquals(0,c.getParties().size());
  party=(Party)s.get(Party.class,party.getId());
  if (isContractPartiesBidirectional) {
    assertNull(party.getContract());
  }
  c.addParty(party);
  t.commit();
  s.close();
  assertInsertCount(0);
  if (checkUpdateCountsAfterAddingExistingElement()) {
    assertUpdateCount(isContractVersioned && !isContractPartiesInverse ? 1 : 0);
  }
  clearCounts();
  s=openSession();
  t=s.beginTransaction();
  c=(Contract)s.createCriteria(Contract.class).uniqueResult();
  if (isContractPartiesInverse) {
    assertEquals(0,c.getParties().size());
    s.delete(party);
  }
 else {
    assertEquals(1,c.getParties().size());
    party=(Party)c.getParties().iterator().next();
    assertEquals("party",party.getName());
    if (isContractPartiesBidirectional) {
      assertSame(c,party.getContract());
    }
  }
  s.delete(c);
  assertEquals(Long.valueOf(0),s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult());
  assertEquals(Long.valueOf(0),s.createCriteria(Party.class).setProjection(Projections.rowCount()).uniqueResult());
  t.commit();
  s.close();
  assertUpdateCount(0);
  assertDeleteCount(2);
}
