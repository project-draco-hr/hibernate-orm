{
  clearCounts();
  Contract c=new Contract(null,"gail","phone");
  Party party=new Party("party");
  c.addParty(party);
  Session s=openSession();
  Transaction t=s.beginTransaction();
  s.persist(c);
  t.commit();
  s.close();
  assertInsertCount(2);
  assertUpdateCount(0);
  clearCounts();
  Party newParty=new Party("new party");
  c.addParty(newParty);
  s=openSession();
  t=s.beginTransaction();
  s.update(c);
  t.commit();
  s.close();
  assertInsertCount(1);
  assertUpdateCount(isContractVersioned ? 1 : 0);
  clearCounts();
  s=openSession();
  t=s.beginTransaction();
  c=(Contract)s.createCriteria(Contract.class).uniqueResult();
  assertEquals(2,c.getParties().size());
  for (  Object o : c.getParties()) {
    Party aParty=(Party)o;
    if (aParty.getId() == party.getId()) {
      assertEquals("party",aParty.getName());
    }
 else     if (aParty.getId() == newParty.getId()) {
      assertEquals("new party",aParty.getName());
    }
 else {
      fail("unknown party");
    }
    if (isContractPartiesBidirectional) {
      assertSame(c,aParty.getContract());
    }
  }
  s.delete(c);
  assertEquals(Long.valueOf(0),s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult());
  assertEquals(Long.valueOf(0),s.createCriteria(Party.class).setProjection(Projections.rowCount()).uniqueResult());
  t.commit();
  s.close();
  assertUpdateCount(0);
  assertDeleteCount(3);
}
