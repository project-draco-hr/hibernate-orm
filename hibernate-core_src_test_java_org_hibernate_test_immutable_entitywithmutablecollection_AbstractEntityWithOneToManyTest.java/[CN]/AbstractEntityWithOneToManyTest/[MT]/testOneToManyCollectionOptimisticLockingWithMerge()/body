{
  clearCounts();
  Contract cOrig=new Contract(null,"gail","phone");
  Party partyOrig=new Party("party");
  cOrig.addParty(partyOrig);
  Session s=openSession();
  Transaction t=s.beginTransaction();
  s.persist(cOrig);
  t.commit();
  s.close();
  assertInsertCount(2);
  assertUpdateCount(0);
  clearCounts();
  s=openSession();
  t=s.beginTransaction();
  Contract c=(Contract)s.get(Contract.class,cOrig.getId());
  Party newParty=new Party("new party");
  c.addParty(newParty);
  t.commit();
  s.close();
  assertInsertCount(1);
  assertUpdateCount(isContractVersioned ? 1 : 0);
  clearCounts();
  s=openSession();
  t=s.beginTransaction();
  cOrig.removeParty(partyOrig);
  try {
    s.merge(cOrig);
    assertFalse(isContractVersioned);
  }
 catch (  StaleObjectStateException ex) {
    assertTrue(isContractVersioned);
  }
 finally {
    t.rollback();
  }
  s.close();
  s=openSession();
  t=s.beginTransaction();
  c=(Contract)s.createCriteria(Contract.class).uniqueResult();
  s.delete(c);
  assertEquals(Long.valueOf(0),s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult());
  assertEquals(Long.valueOf(0),s.createCriteria(Party.class).setProjection(Projections.rowCount()).uniqueResult());
  t.commit();
  s.close();
  assertUpdateCount(0);
  assertDeleteCount(3);
}
