{
  final ConstPool constPool=managedCtClass.getClassFile().getConstPool();
  for (  Object oMethod : managedCtClass.getClassFile().getMethods()) {
    final MethodInfo methodInfo=(MethodInfo)oMethod;
    final String methodName=methodInfo.getName();
    if (methodName.startsWith("$$_hibernate_") || methodInfo.getCodeAttribute() == null) {
      continue;
    }
    try {
      final CodeIterator itr=methodInfo.getCodeAttribute().iterator();
      while (itr.hasNext()) {
        int index=itr.next();
        int op=itr.byteAt(index);
        if (op != Opcode.PUTFIELD && op != Opcode.GETFIELD) {
          continue;
        }
        String fieldName=constPool.getFieldrefName(itr.u16bitAt(index + 1));
        String fieldClassName=constPool.getClassInfo(constPool.getFieldrefClass(itr.u16bitAt(index + 1)));
        CtClass targetCtClass=this.classPool.getCtClass(fieldClassName);
        if (!enhancementContext.isEntityClass(targetCtClass) && !enhancementContext.isCompositeClass(targetCtClass)) {
          continue;
        }
        if (targetCtClass == managedCtClass || !enhancementContext.isPersistentField(targetCtClass.getField(fieldName)) || "this$0".equals(fieldName)) {
          continue;
        }
        log.debugf("Transforming access to field [%s] from method [%s]",fieldName,methodName);
        if (op == Opcode.GETFIELD) {
          int fieldReaderMethodIndex=constPool.addMethodrefInfo(constPool.addClassInfo(fieldClassName),EnhancerConstants.PERSISTENT_FIELD_READER_PREFIX + fieldName,"()" + constPool.getFieldrefType(itr.u16bitAt(index + 1)));
          itr.writeByte(Opcode.INVOKEVIRTUAL,index);
          itr.write16bit(fieldReaderMethodIndex,index + 1);
        }
 else {
          int fieldWriterMethodIndex=constPool.addMethodrefInfo(constPool.addClassInfo(fieldClassName),EnhancerConstants.PERSISTENT_FIELD_WRITER_PREFIX + fieldName,"(" + constPool.getFieldrefType(itr.u16bitAt(index + 1)) + ")V");
          itr.writeByte(Opcode.INVOKEVIRTUAL,index);
          itr.write16bit(fieldWriterMethodIndex,index + 1);
        }
      }
      methodInfo.getCodeAttribute().setAttribute(MapMaker.make(classPool,methodInfo));
    }
 catch (    BadBytecode bb) {
      final String msg=String.format("Unable to perform field access transformation in method [%s]",methodName);
      throw new EnhancementException(msg,bb);
    }
catch (    NotFoundException nfe) {
      final String msg=String.format("Unable to perform field access transformation in method [%s]",methodName);
      throw new EnhancementException(msg,nfe);
    }
  }
}
