{
  CyclicBarrier loadBarrier=new CyclicBarrier(2);
  CountDownLatch flushLatch=new CountDownLatch(2);
  CountDownLatch commitLatch=new CountDownLatch(1);
  Future<Boolean> first=removeFlushWait(itemId,loadBarrier,null,flushLatch,commitLatch);
  Future<Boolean> second=removeFlushWait(itemId,loadBarrier,null,flushLatch,commitLatch);
  awaitOrThrow(flushLatch);
  Map contents=Caches.entrySet(entityCache).toMap();
  assertEquals(1,contents.size());
  assertEquals(Tombstone.class,contents.get(itemId).getClass());
  commitLatch.countDown();
  first.get(WAIT_TIMEOUT,TimeUnit.SECONDS);
  second.get(WAIT_TIMEOUT,TimeUnit.SECONDS);
  contents=Caches.entrySet(entityCache).toMap();
  assertEquals(1,contents.size());
  assertEquals(Tombstone.class,contents.get(itemId).getClass());
  TIME_SERVICE.advance(timeout + 1);
  assertNull(entityCache.get(itemId));
  contents=Caches.entrySet(entityCache).toMap();
  assertEquals(Collections.EMPTY_MAP,contents);
}
