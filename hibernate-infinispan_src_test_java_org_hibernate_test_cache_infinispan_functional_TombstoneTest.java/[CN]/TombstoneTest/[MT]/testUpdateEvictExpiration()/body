{
  CyclicBarrier loadBarrier=new CyclicBarrier(2);
  CountDownLatch preEvictLatch=new CountDownLatch(1);
  CountDownLatch flushLatch=new CountDownLatch(1);
  CountDownLatch commitLatch=new CountDownLatch(1);
  Future<Boolean> first=updateFlushWait(itemId,loadBarrier,null,flushLatch,commitLatch);
  Future<Boolean> second=evictWait(itemId,loadBarrier,preEvictLatch,null);
  awaitOrThrow(flushLatch);
  Map contents=Caches.entrySet(entityCache).toMap();
  assertEquals(1,contents.size());
  assertEquals(FutureUpdate.class,contents.get(itemId).getClass());
  preEvictLatch.countDown();
  commitLatch.countDown();
  first.get(WAIT_TIMEOUT,TimeUnit.SECONDS);
  second.get(WAIT_TIMEOUT,TimeUnit.SECONDS);
  contents=Caches.entrySet(entityCache).toMap();
  assertEquals(0,contents.size());
  assertNull(contents.get(itemId));
}
