{
  Session s=openSession();
  Transaction t=s.beginTransaction();
  EmployeeGroup group1=new EmployeeGroup();
  Employee employee1=new Employee("Jane");
  Employee employee2=new Employee("Jeff");
  group1.addEmployee(employee1);
  group1.addEmployee(employee2);
  group1.setManager(new Employee("group1 manager"));
  group1.getManager().addCollaborator(new Employee("group1 manager's collaborator#1"));
  group1.getManager().addCollaborator(new Employee("group1 manager's collaborator#2"));
  group1.setLead(new Employee("group1 lead"));
  group1.getLead().addCollaborator(new Employee("group1 lead's collaborator#1"));
  EmployeeGroup group2=new EmployeeGroup();
  Employee employee3=new Employee("Joan");
  Employee employee4=new Employee("John");
  group2.addEmployee(employee3);
  group2.addEmployee(employee4);
  group2.setManager(new Employee("group2 manager"));
  group2.getManager().addCollaborator(new Employee("group2 manager's collaborator#1"));
  group2.getManager().addCollaborator(new Employee("group2 manager's collaborator#2"));
  group2.getManager().addCollaborator(new Employee("group2 manager's collaborator#3"));
  group2.setLead(new Employee("group2 lead"));
  group2.getLead().addCollaborator(new Employee("group2 lead's collaborator#1"));
  group2.getLead().addCollaborator(new Employee("group2 lead's collaborator#2"));
  s.save(group1);
  s.save(group2);
  s.flush();
  s.clear();
  sessionFactory().getStatistics().clear();
  EmployeeGroup[] groups=new EmployeeGroup[]{(EmployeeGroup)s.load(EmployeeGroup.class,group1.getId()),(EmployeeGroup)s.load(EmployeeGroup.class,group2.getId())};
  assertEquals(0,sessionFactory().getStatistics().getPrepareStatementCount());
  for (  EmployeeGroup group : groups) {
    assertFalse(Hibernate.isInitialized(group));
  }
  assertEquals(0,sessionFactory().getStatistics().getPrepareStatementCount());
  for (int i=0; i < groups.length; i++) {
    Hibernate.initialize(groups[i]);
    assertTrue(Hibernate.isInitialized(groups[i]));
    assertTrue(Hibernate.isInitialized(groups[i].getLead()));
    assertFalse(Hibernate.isInitialized(groups[i].getLead().getCollaborators()));
    assertTrue(Hibernate.isInitialized(groups[i].getManager()));
    assertFalse(Hibernate.isInitialized(groups[i].getManager().getCollaborators()));
    assertFalse(Hibernate.isInitialized(groups[i].getEmployees()));
  }
  assertEquals(1,sessionFactory().getStatistics().getPrepareStatementCount());
  sessionFactory().getStatistics().clear();
  for (  EmployeeGroup group : groups) {
    assertTrue(Hibernate.isInitialized(group));
    assertFalse(Hibernate.isInitialized(group.getEmployees()));
  }
  assertEquals(0,sessionFactory().getStatistics().getPrepareStatementCount());
  Hibernate.initialize(groups[0].getEmployees());
  assertEquals(1,sessionFactory().getStatistics().getPrepareStatementCount());
  sessionFactory().getStatistics().clear();
  for (  EmployeeGroup group : groups) {
    assertTrue(Hibernate.isInitialized(group.getEmployees()));
    assertFalse(Hibernate.isInitialized(group.getLead().getCollaborators()));
    assertFalse(Hibernate.isInitialized(group.getManager().getCollaborators()));
  }
  assertEquals(0,sessionFactory().getStatistics().getPrepareStatementCount());
  Hibernate.initialize(groups[0].getLead().getCollaborators());
  assertEquals(1,sessionFactory().getStatistics().getPrepareStatementCount());
  sessionFactory().getStatistics().clear();
  for (  EmployeeGroup group : groups) {
    assertTrue(Hibernate.isInitialized(group.getLead().getCollaborators()));
    assertFalse(Hibernate.isInitialized(group.getManager().getCollaborators()));
  }
  assertEquals(0,sessionFactory().getStatistics().getPrepareStatementCount());
  Hibernate.initialize(groups[0].getManager().getCollaborators());
  assertEquals(1,sessionFactory().getStatistics().getPrepareStatementCount());
  sessionFactory().getStatistics().clear();
  for (  EmployeeGroup group : groups) {
    assertTrue(Hibernate.isInitialized(group.getManager().getCollaborators()));
  }
  assertEquals(0,sessionFactory().getStatistics().getPrepareStatementCount());
  assertEquals(group1.getLead().getCollaborators().size(),groups[0].getLead().getCollaborators().size());
  assertEquals(group2.getLead().getCollaborators().size(),groups[1].getLead().getCollaborators().size());
  assertEquals(group1.getManager().getCollaborators().size(),groups[0].getManager().getCollaborators().size());
  assertEquals(group2.getManager().getCollaborators().size(),groups[1].getManager().getCollaborators().size());
  assertEquals(0,sessionFactory().getStatistics().getPrepareStatementCount());
  t.rollback();
  s.close();
}
