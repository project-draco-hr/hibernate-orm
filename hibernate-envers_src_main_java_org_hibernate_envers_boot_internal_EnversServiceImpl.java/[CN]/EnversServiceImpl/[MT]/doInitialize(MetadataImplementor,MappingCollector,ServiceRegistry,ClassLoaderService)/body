{
  final ConfigurationService cfgService=serviceRegistry.getService(ConfigurationService.class);
  final Properties properties=new Properties();
  properties.putAll(cfgService.getSettings());
  this.globalConfiguration=new GlobalConfiguration(properties,classLoaderService);
  final ReflectionManager reflectionManager=metadata.getMetadataBuildingOptions().getReflectionManager();
  final RevisionInfoConfiguration revInfoCfg=new RevisionInfoConfiguration(globalConfiguration);
  final RevisionInfoConfigurationResult revInfoCfgResult=revInfoCfg.configure(metadata,reflectionManager);
  EnversServiceImpl.this.auditEntitiesConfiguration=new AuditEntitiesConfiguration(properties,revInfoCfgResult.getRevisionInfoEntityName());
  EnversServiceImpl.this.auditProcessManager=new AuditProcessManager(revInfoCfgResult.getRevisionInfoGenerator());
  EnversServiceImpl.this.revisionInfoQueryCreator=revInfoCfgResult.getRevisionInfoQueryCreator();
  EnversServiceImpl.this.revisionInfoNumberReader=revInfoCfgResult.getRevisionInfoNumberReader();
  EnversServiceImpl.this.modifiedEntityNamesReader=revInfoCfgResult.getModifiedEntityNamesReader();
  EnversServiceImpl.this.auditStrategy=initializeAuditStrategy(auditEntitiesConfiguration.getAuditStrategyName(),revInfoCfgResult.getRevisionInfoClass(),revInfoCfgResult.getRevisionInfoTimestampData(),classLoaderService);
  EnversServiceImpl.this.entitiesConfigurations=new EntitiesConfigurator().configure(metadata,serviceRegistry,reflectionManager,mappingCollector,globalConfiguration,auditEntitiesConfiguration,auditStrategy,revInfoCfgResult.getRevisionInfoXmlMapping(),revInfoCfgResult.getRevisionInfoRelationMapping());
}
