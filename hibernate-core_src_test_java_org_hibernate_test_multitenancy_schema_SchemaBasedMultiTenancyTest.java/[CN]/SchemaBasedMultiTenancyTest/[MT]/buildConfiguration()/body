{
  Configuration cfg=new Configuration();
  cfg.getProperties().put(Environment.MULTI_TENANT,MultiTenancyStrategy.SCHEMA);
  cfg.setProperty(Environment.CACHE_REGION_FACTORY,CachingRegionFactory.class.getName());
  cfg.setProperty(Environment.GENERATE_STATISTICS,"true");
  cfg.addAnnotatedClass(Customer.class);
  cfg.addAnnotatedClass(Invoice.class);
  cfg.buildMappings();
  RootClass meta=(RootClass)cfg.getClassMapping(Customer.class.getName());
  meta.setCacheConcurrencyStrategy("read-write");
  new SchemaExport(new ConnectionHelper(){
    private Connection connection;
    @Override public void prepare(    boolean needsAutoCommit) throws SQLException {
      connection=acmeProvider.getConnection();
    }
    @Override public Connection getConnection() throws SQLException {
      return connection;
    }
    @Override public void release() throws SQLException {
      acmeProvider.closeConnection(connection);
    }
  }
,cfg.generateDropSchemaScript(ConnectionProviderBuilder.getCorrespondingDialect()),cfg.generateSchemaCreationScript(ConnectionProviderBuilder.getCorrespondingDialect())).execute(false,true,false,false);
  new SchemaExport(new ConnectionHelper(){
    private Connection connection;
    @Override public void prepare(    boolean needsAutoCommit) throws SQLException {
      connection=jbossProvider.getConnection();
    }
    @Override public Connection getConnection() throws SQLException {
      return connection;
    }
    @Override public void release() throws SQLException {
      jbossProvider.closeConnection(connection);
    }
  }
,cfg.generateDropSchemaScript(ConnectionProviderBuilder.getCorrespondingDialect()),cfg.generateSchemaCreationScript(ConnectionProviderBuilder.getCorrespondingDialect())).execute(false,true,false,false);
  return cfg;
}
