{
  Collection vals=(Collection)typedList.getValue();
  final Dialect dialect=session.getFactory().getDialect();
  final int inExprLimit=dialect.getInExpressionCountLimit();
  if (inExprLimit > 0 && vals.size() > inExprLimit) {
    log.tooManyInExpressions(dialect.getClass().getName(),inExprLimit,name,vals.size());
  }
  Type type=typedList.getType();
  boolean isJpaPositionalParam=parameterMetadata.getNamedParameterDescriptor(name).isJpaStyle();
  String paramPrefix=isJpaPositionalParam ? "?" : ParserHelper.HQL_VARIABLE_PREFIX;
  String placeholder=new StringBuilder(paramPrefix.length() + name.length()).append(paramPrefix).append(name).toString();
  if (query == null) {
    return query;
  }
  int loc=query.indexOf(placeholder);
  if (loc < 0) {
    return query;
  }
  String beforePlaceholder=query.substring(0,loc);
  String afterPlaceholder=query.substring(loc + placeholder.length());
  boolean isEnclosedInParens=StringHelper.getLastNonWhitespaceCharacter(beforePlaceholder) == '(' && StringHelper.getFirstNonWhitespaceCharacter(afterPlaceholder) == ')';
  if (vals.size() == 1 && isEnclosedInParens) {
    namedParamsCopy.put(name,new TypedValue(type,vals.iterator().next()));
    return query;
  }
  StringBuilder list=new StringBuilder(16);
  Iterator iter=vals.iterator();
  int i=0;
  while (iter.hasNext()) {
    String alias=(isJpaPositionalParam ? 'x' + name : name) + '_' + i+++ '_';
    if (namedParamsCopy.put(alias,new TypedValue(type,iter.next())) != null) {
      throw new HibernateException("Repeated usage of alias '" + alias + "' while expanding list parameter.");
    }
    list.append(ParserHelper.HQL_VARIABLE_PREFIX).append(alias);
    if (iter.hasNext()) {
      list.append(", ");
    }
  }
  return StringHelper.replace(beforePlaceholder,afterPlaceholder,placeholder.toString(),list.toString(),true,true);
}
