{
  LOG.usingHibernateBuiltInConnectionPool();
  final String driverClassName=(String)configurationValues.get(AvailableSettings.DRIVER);
  if (driverClassName == null) {
    LOG.jdbcDriverNotSpecified(AvailableSettings.DRIVER);
  }
 else   if (serviceRegistry != null) {
    try {
      driver=(Driver)serviceRegistry.getService(ClassLoaderService.class).classForName(driverClassName).newInstance();
    }
 catch (    Exception e) {
      throw new ClassLoadingException("Specified JDBC Driver " + driverClassName + " could not be loaded",e);
    }
  }
 else {
    try {
      driver=(Driver)Class.forName(driverClassName).newInstance();
    }
 catch (    Exception e1) {
      try {
        driver=(Driver)ReflectHelper.classForName(driverClassName).newInstance();
      }
 catch (      Exception e2) {
        throw new HibernateException("Specified JDBC Driver " + driverClassName + " could not be loaded",e2);
      }
    }
  }
  poolSize=ConfigurationHelper.getInt(AvailableSettings.POOL_SIZE,configurationValues,20);
  LOG.hibernateConnectionPoolSize(poolSize);
  autocommit=ConfigurationHelper.getBoolean(AvailableSettings.AUTOCOMMIT,configurationValues);
  LOG.autoCommitMode(autocommit);
  isolation=ConfigurationHelper.getInteger(AvailableSettings.ISOLATION,configurationValues);
  if (isolation != null) {
    LOG.jdbcIsolationLevel(Environment.isolationLevelToString(isolation.intValue()));
  }
  url=(String)configurationValues.get(AvailableSettings.URL);
  if (url == null) {
    final String msg=LOG.jdbcUrlNotSpecified(AvailableSettings.URL);
    LOG.error(msg);
    throw new HibernateException(msg);
  }
  connectionProps=ConnectionProviderInitiator.getConnectionProperties(configurationValues);
  LOG.usingDriver(driverClassName,url);
  if (LOG.isDebugEnabled()) {
    LOG.connectionProperties(connectionProps);
  }
 else {
    LOG.connectionProperties(ConfigurationHelper.maskOut(connectionProps,"password"));
  }
}
