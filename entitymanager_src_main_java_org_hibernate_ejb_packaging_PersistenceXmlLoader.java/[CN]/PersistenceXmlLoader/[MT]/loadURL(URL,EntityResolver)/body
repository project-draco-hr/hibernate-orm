{
  InputStream is=null;
  if (configURL != null) {
    URLConnection conn=configURL.openConnection();
    conn.setUseCaches(false);
    is=conn.getInputStream();
  }
  if (is == null) {
    throw new IOException("Failed to obtain InputStream from url: " + configURL);
  }
  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();
  docBuilderFactory.setNamespaceAware(true);
  final Schema v2Schema=SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema(new StreamSource(getStreamFromClasspath("persistence_2_0.xsd")));
  final Validator v2Validator=v2Schema.newValidator();
  final Schema v1Schema=SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema(new StreamSource(getStreamFromClasspath("persistence_1_0.xsd")));
  final Validator v1Validator=v2Schema.newValidator();
  InputSource source=new InputSource(is);
  DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();
  docBuilder.setEntityResolver(resolver);
  Document doc=docBuilder.parse(source);
  List errors=new ArrayList();
  v2Validator.setErrorHandler(new ErrorLogger("XML InputStream",errors,resolver));
  v2Validator.validate(new DOMSource(doc));
  if (errors.size() != 0) {
    throw new PersistenceException("Invlid persistence.xml. Check the error logs for parsing errors",(Throwable)errors.get(0));
  }
  return doc;
}
