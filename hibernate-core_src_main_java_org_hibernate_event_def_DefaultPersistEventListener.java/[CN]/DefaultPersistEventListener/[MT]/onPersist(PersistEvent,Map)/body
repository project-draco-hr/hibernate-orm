{
  final SessionImplementor source=event.getSession();
  final Object object=event.getObject();
  final Object entity;
  if (object instanceof HibernateProxy) {
    LazyInitializer li=((HibernateProxy)object).getHibernateLazyInitializer();
    if (li.isUninitialized()) {
      if (li.getSession() == source) {
        return;
      }
 else {
        throw new PersistentObjectException("uninitialized proxy passed to persist()");
      }
    }
    entity=li.getImplementation();
  }
 else {
    entity=object;
  }
  final String entityName;
  if (event.getEntityName() != null) {
    entityName=event.getEntityName();
  }
 else {
    entityName=source.bestGuessEntityName(entity);
    event.setEntityName(entityName);
  }
  final EntityEntry entityEntry=source.getPersistenceContext().getEntry(entity);
  int entityState=getEntityState(entity,entityName,entityEntry,source);
  if (entityState == DETACHED) {
    EntityPersister persister=source.getFactory().getEntityPersister(entityName);
    if (ForeignGenerator.class.isInstance(persister.getIdentifierGenerator())) {
      if (LOG.isDebugEnabled() && persister.getIdentifier(entity,source) != null)       LOG.debug("Resetting entity id attribute to null for foreign generator");
      persister.setIdentifier(entity,null,source);
      entityState=getEntityState(entity,entityName,entityEntry,source);
    }
  }
switch (entityState) {
case DETACHED:
    throw new PersistentObjectException("detached entity passed to persist: " + getLoggableName(event.getEntityName(),entity));
case PERSISTENT:
  entityIsPersistent(event,createCache);
break;
case TRANSIENT:
entityIsTransient(event,createCache);
break;
default :
throw new ObjectDeletedException("deleted entity passed to persist",null,getLoggableName(event.getEntityName(),entity));
}
}
