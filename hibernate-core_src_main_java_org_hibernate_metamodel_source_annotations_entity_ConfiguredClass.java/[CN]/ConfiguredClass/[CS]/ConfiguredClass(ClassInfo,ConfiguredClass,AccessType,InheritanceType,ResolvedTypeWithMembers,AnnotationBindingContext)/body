{
  this.context=context;
  this.classInfo=info;
  this.parent=parent;
  this.isRoot=parent == null;
  this.hierarchyAccessType=hierarchyAccessType;
  this.inheritanceType=inheritanceType;
  this.clazz=context.classLoaderService().classForName(info.toString());
  this.configuredClassType=determineType();
  this.classAccessType=determineClassAccessType();
  this.idType=determineIdType();
  this.hasOwnTable=definesItsOwnTable();
  this.primaryTableName=determinePrimaryTableName();
  findTransientFieldAndMethodNames();
  List<MappedAttribute> simpleProps=collectAttributes(resolvedType);
  Collections.sort(simpleProps);
  Map<String,MappedAttribute> tmpMap=new LinkedHashMap<String,MappedAttribute>();
  for (  MappedAttribute property : simpleProps) {
    tmpMap.put(property.getName(),property);
  }
  this.mappedAttributes=Collections.unmodifiableMap(tmpMap);
}
