{
  final String name=ReflectionHelper.getPropertyName(member);
  ResolvedMember[] resolvedMembers;
  if (member instanceof Field) {
    resolvedMembers=resolvedType.getMemberFields();
  }
 else {
    resolvedMembers=resolvedType.getMemberMethods();
  }
  final Type type=findResolvedType(member.getName(),resolvedMembers);
  final Map<DotName,List<AnnotationInstance>> annotations=JandexHelper.getMemberAnnotations(classInfo,member.getName());
  MappedAttribute attribute;
  AttributeType attributeType=determineAttributeType(annotations);
switch (attributeType) {
case BASIC:
{
      attribute=SimpleAttribute.createSimpleAttribute(name,((Class)type).getName(),annotations);
      break;
    }
case EMBEDDED:
{
    throw new HibernateException("foo");
  }
default :
{
  attribute=AssociationAttribute.createAssociationAttribute(name,((Class)type).getName(),attributeType,annotations);
}
}
return attribute;
}
