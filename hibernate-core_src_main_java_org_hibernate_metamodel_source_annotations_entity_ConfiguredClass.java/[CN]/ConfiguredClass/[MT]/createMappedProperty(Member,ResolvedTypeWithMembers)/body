{
  final String attributeName=ReflectionHelper.getPropertyName(member);
  ResolvedMember[] resolvedMembers;
  if (member instanceof Field) {
    resolvedMembers=resolvedType.getMemberFields();
  }
 else {
    resolvedMembers=resolvedType.getMemberMethods();
  }
  final Class<?> type=(Class<?>)findResolvedType(member.getName(),resolvedMembers);
  final Map<DotName,List<AnnotationInstance>> annotations=JandexHelper.getMemberAnnotations(classInfo,member.getName());
  MappedAttribute attribute;
  AttributeType attributeType=determineAttributeType(annotations);
switch (attributeType) {
case BASIC:
{
      attribute=SimpleAttribute.createSimpleAttribute(attributeName,type.getName(),annotations);
      break;
    }
case EMBEDDED:
{
    ClassInfo embeddableClassInfo=context.getClassInfo(type.getName());
    if (classInfo == null) {
      String msg=String.format("Attribute %s of entity %s is annotated with @Embedded, but no embeddable configuration for type %s can be found.",attributeName,getName(),type.getName());
      throw new AnnotationException(msg);
    }
    context.resolveAllTypes(type.getName());
    ConfiguredClassHierarchy<EmbeddableClass> hierarchy=ConfiguredClassHierarchyBuilder.createEmbeddableHierarchy(context.loadClass(embeddableClassInfo.toString()),classAccessType,context);
    embeddedClasses.put(attributeName,hierarchy.getLeaf());
  }
default :
{
  attribute=AssociationAttribute.createAssociationAttribute(attributeName,((Class)type).getName(),attributeType,annotations);
}
}
return attribute;
}
