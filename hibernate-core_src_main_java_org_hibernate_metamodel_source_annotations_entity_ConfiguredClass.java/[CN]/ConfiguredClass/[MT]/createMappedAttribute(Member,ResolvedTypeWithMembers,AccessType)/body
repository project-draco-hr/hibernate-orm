{
  final String attributeName=ReflectionHelper.getPropertyName(member);
  ResolvedMember[] resolvedMembers;
  if (member instanceof Field) {
    resolvedMembers=resolvedType.getMemberFields();
  }
 else {
    resolvedMembers=resolvedType.getMemberMethods();
  }
  Class<?> attributeType=(Class<?>)findResolvedType(member.getName(),resolvedMembers);
  final Map<DotName,List<AnnotationInstance>> annotations=JandexHelper.getMemberAnnotations(classInfo,member.getName());
  AttributeType attributeNature=determineAttributeType(annotations);
  String accessTypeString=accessType.toString().toLowerCase();
switch (attributeNature) {
case BASIC:
{
      BasicAttribute attribute=BasicAttribute.createSimpleAttribute(attributeName,attributeType,annotations,accessTypeString,getLocalBindingContext());
      if (attribute.isId()) {
        idAttributeMap.put(attributeName,attribute);
      }
 else       if (attribute.isVersioned()) {
        if (versionAttribute == null) {
          versionAttribute=attribute;
        }
 else {
          throw new MappingException("Multiple version attributes",localBindingContext.getOrigin());
        }
      }
 else {
        simpleAttributeMap.put(attributeName,attribute);
      }
      break;
    }
case ELEMENT_COLLECTION:
{
    throw new NotYetImplementedException("Element collections must still be implemented.");
  }
case EMBEDDED_ID:
{
  throw new NotYetImplementedException("Embedded ids must still be implemented.");
}
case EMBEDDED:
{
AnnotationInstance targetAnnotation=JandexHelper.getSingleAnnotation(getClassInfo(),HibernateDotNames.TARGET);
if (targetAnnotation != null) {
  attributeType=localBindingContext.locateClassByName(JandexHelper.getValue(targetAnnotation,"value",String.class));
}
resolveEmbeddable(attributeName,attributeType);
break;
}
default :
{
AssociationAttribute attribute=AssociationAttribute.createAssociationAttribute(attributeName,attributeType,attributeNature,accessTypeString,annotations,getLocalBindingContext());
associationAttributeMap.put(attributeName,attribute);
}
}
}
