{
  clearCounts();
  TestingJtaBootstrap.INSTANCE.getTransactionManager().begin();
  Session s=openSession();
  Employer emp=new Employer();
  s.persist(emp);
  Node node=new Node("foo");
  Node parent=new Node("bar");
  parent.addChild(node);
  s.persist(parent);
  TestingJtaBootstrap.INSTANCE.getTransactionManager().commit();
  TestingJtaBootstrap.INSTANCE.getTransactionManager().begin();
  s=openSession();
  assertFalse(s.isDefaultReadOnly());
  s.setDefaultReadOnly(true);
  emp=(Employer)s.get(Employer.class,emp.getId());
  assertTrue(s.isDefaultReadOnly());
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  assertTrue(s.isDefaultReadOnly());
  emp=(Employer)getOldToNewEntityRefMap().get(emp);
  assertTrue(Hibernate.isInitialized(emp));
  assertFalse(Hibernate.isInitialized(emp.getEmployees()));
  node=(Node)s.get(Node.class,node.getName());
  assertTrue(s.isReadOnly(emp));
  assertTrue(s.isReadOnly(node));
  s.setDefaultReadOnly(false);
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  assertFalse(s.isDefaultReadOnly());
  node=(Node)getOldToNewEntityRefMap().get(node);
  emp=(Employer)getOldToNewEntityRefMap().get(emp);
  assertTrue(Hibernate.isInitialized(node));
  assertTrue(s.isReadOnly(node));
  assertFalse(Hibernate.isInitialized(node.getParent()));
  assertTrue(s.isReadOnly(emp));
  assertFalse(Hibernate.isInitialized(node.getChildren()));
  Hibernate.initialize(node.getChildren());
  for (  Object o : node.getChildren()) {
    assertFalse(s.isReadOnly(o));
  }
  assertFalse(Hibernate.isInitialized(node.getParent()));
  assertNull(s.get(Node.class,"xyz"));
  TestingJtaBootstrap.INSTANCE.getTransactionManager().commit();
  TestingJtaBootstrap.INSTANCE.getTransactionManager().begin();
  s=openSession();
  assertFalse(s.isDefaultReadOnly());
  emp=(Employer)s.get("org.hibernate.test.nonflushedchanges.Employer",emp.getId());
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  assertFalse(s.isDefaultReadOnly());
  emp=(Employer)getOldToNewEntityRefMap().get(emp);
  assertTrue(Hibernate.isInitialized(emp));
  assertFalse(s.isReadOnly(emp));
  s.setReadOnly(emp,true);
  node=(Node)s.get("org.hibernate.test.nonflushedchanges.Node",node.getName());
  assertFalse(s.isReadOnly(node));
  s.setReadOnly(node,true);
  s=applyNonFlushedChangesToNewSessionCloseOldSession(s);
  emp=(Employer)getOldToNewEntityRefMap().get(emp);
  assertTrue(s.isReadOnly(emp));
  node=(Node)getOldToNewEntityRefMap().get(node);
  assertTrue(Hibernate.isInitialized(node));
  assertTrue(s.isReadOnly(node));
  TestingJtaBootstrap.INSTANCE.getTransactionManager().commit();
  assertFetchCount(0);
  TestingJtaBootstrap.INSTANCE.getTransactionManager().begin();
  s=openSession();
  s.createQuery("delete from Employer").executeUpdate();
  List list=s.createQuery("from Node").list();
  for (  Object aList : list) {
    s.delete(aList);
  }
  TestingJtaBootstrap.INSTANCE.getTransactionManager().commit();
}
