{
  final SchemaGenAction action=SchemaGenAction.interpret(hibernateConfiguration.getProperty(AvailableSettings.SCHEMA_GEN_ACTION));
  if (action == SchemaGenAction.NONE) {
    return;
  }
  final JdbcConnectionContext jdbcConnectionContext=determineAppropriateJdbcConnectionContext(hibernateConfiguration,serviceRegistry);
  final Dialect dialect=determineDialect(jdbcConnectionContext,hibernateConfiguration,serviceRegistry);
  final ImportSqlCommandExtractor scriptCommandExtractor=serviceRegistry.getService(ImportSqlCommandExtractor.class);
  final List<GenerationTarget> generationTargetList=new ArrayList<GenerationTarget>();
  SchemaGenTarget target=SchemaGenTarget.interpret(hibernateConfiguration.getProperty(AvailableSettings.SCHEMA_GEN_TARGET));
  final Object createScriptTargetSetting=hibernateConfiguration.getProperties().get(AvailableSettings.SCHEMA_GEN_CREATE_SCRIPT_TARGET);
  final Object dropScriptTargetSetting=hibernateConfiguration.getProperties().get(AvailableSettings.SCHEMA_GEN_CREATE_SCRIPT_TARGET);
  if (target == null) {
    if (createScriptTargetSetting != null && dropScriptTargetSetting != null) {
      target=SchemaGenTarget.SCRIPTS;
    }
 else {
      target=SchemaGenTarget.DATABASE;
    }
  }
  if (target == SchemaGenTarget.DATABASE || target == SchemaGenTarget.BOTH) {
    generationTargetList.add(new DatabaseTarget(jdbcConnectionContext));
  }
  if (target == SchemaGenTarget.SCRIPTS || target == SchemaGenTarget.BOTH) {
    if (createScriptTargetSetting == null) {
      throw new IllegalArgumentException("For schema generation creation script target missing");
    }
    if (dropScriptTargetSetting == null) {
      throw new IllegalArgumentException("For schema generation drop script target missing");
    }
    generationTargetList.add(new ScriptsTarget(createScriptTargetSetting,dropScriptTargetSetting));
  }
  final List<GenerationSource> generationSourceList=new ArrayList<GenerationSource>();
  SchemaGenSource source=SchemaGenSource.interpret(hibernateConfiguration.getProperty(AvailableSettings.SCHEMA_GEN_SOURCE));
  final Object createScriptSourceSetting=hibernateConfiguration.getProperties().get(AvailableSettings.SCHEMA_GEN_CREATE_SCRIPT_SOURCE);
  final Object dropScriptSourceSetting=hibernateConfiguration.getProperties().get(AvailableSettings.SCHEMA_GEN_DROP_SCRIPT_SOURCE);
  if (source == null) {
    if (createScriptSourceSetting != null && dropScriptSourceSetting != null) {
      source=SchemaGenSource.SCRIPTS;
    }
 else {
      source=SchemaGenSource.METADATA;
    }
  }
  final boolean createSchemas=ConfigurationHelper.getBoolean(AvailableSettings.SCHEMA_GEN_CREATE_SCHEMAS,hibernateConfiguration.getProperties(),false);
  if (createSchemas) {
    generationSourceList.add(new CreateSchemaCommandSource(hibernateConfiguration,dialect));
  }
  if (source == SchemaGenSource.METADATA) {
    generationSourceList.add(new MetadataSource(hibernateConfiguration,dialect));
  }
 else   if (source == SchemaGenSource.SCRIPTS) {
    generationSourceList.add(new ScriptSource(createScriptSourceSetting,dropScriptSourceSetting,scriptCommandExtractor));
  }
 else   if (source == SchemaGenSource.METADATA_THEN_SCRIPTS) {
    generationSourceList.add(new MetadataSource(hibernateConfiguration,dialect));
    generationSourceList.add(new ScriptSource(createScriptSourceSetting,dropScriptSourceSetting,scriptCommandExtractor));
  }
 else   if (source == SchemaGenSource.SCRIPTS_THEN_METADATA) {
    generationSourceList.add(new ScriptSource(createScriptSourceSetting,dropScriptSourceSetting,scriptCommandExtractor));
    generationSourceList.add(new MetadataSource(hibernateConfiguration,dialect));
  }
  final Object importScriptSetting=hibernateConfiguration.getProperties().get(AvailableSettings.SCHEMA_GEN_LOAD_SCRIPT_SOURCE);
  if (importScriptSetting != null) {
    generationSourceList.add(new ImportScriptSource(importScriptSetting,scriptCommandExtractor));
  }
  try {
    doGeneration(action,generationSourceList,generationTargetList);
  }
  finally {
    releaseResources(generationSourceList,generationTargetList,jdbcConnectionContext);
  }
}
