{
  InsertStatement insertStatement=(InsertStatement)insert;
  insertStatement.validate();
  SelectClause selectClause=insertStatement.getSelectClause();
  Queryable persister=insertStatement.getIntoClause().getQueryable();
  if (!insertStatement.getIntoClause().isExplicitIdInsertion()) {
    final IdentifierGenerator generator=persister.getIdentifierGenerator();
    if (!BulkInsertionCapableIdentifierGenerator.class.isInstance(generator)) {
      throw new QueryException("Invalid identifier generator encountered for implicit id handling as part of bulk insertions");
    }
    final BulkInsertionCapableIdentifierGenerator capableGenerator=BulkInsertionCapableIdentifierGenerator.class.cast(generator);
    if (!capableGenerator.supportsBulkInsertionIdentifierGeneration()) {
      throw new QueryException("Identifier generator reported it does not support implicit id handling as part of bulk insertions");
    }
    final String fragment=capableGenerator.determineBulkInsertionIdentifierGenerationSelectFragment(sessionFactoryHelper.getFactory().getDialect());
    if (fragment != null) {
      AST fragmentNode=getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN,fragment);
      AST originalFirstSelectExprNode=selectClause.getFirstChild();
      selectClause.setFirstChild(fragmentNode);
      fragmentNode.setNextSibling(originalFirstSelectExprNode);
      insertStatement.getIntoClause().prependIdColumnSpec();
    }
  }
  final boolean includeVersionProperty=persister.isVersioned() && !insertStatement.getIntoClause().isExplicitVersionInsertion() && persister.isVersionPropertyInsertable();
  if (includeVersionProperty) {
    VersionType versionType=persister.getVersionType();
    AST versionValueNode=null;
    if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) {
      int sqlTypes[]=versionType.sqlTypes(sessionFactoryHelper.getFactory());
      if (sqlTypes == null || sqlTypes.length == 0) {
        throw new IllegalStateException(versionType.getClass() + ".sqlTypes() returns null or empty array");
      }
      if (sqlTypes.length > 1) {
        throw new IllegalStateException(versionType.getClass() + ".sqlTypes() returns > 1 element; only single-valued versions are allowed.");
      }
      versionValueNode=getASTFactory().create(HqlSqlTokenTypes.PARAM,"?");
      ParameterSpecification paramSpec=new VersionTypeSeedParameterSpecification(versionType);
      ((ParameterNode)versionValueNode).setHqlParameterSpecification(paramSpec);
      parameters.add(0,paramSpec);
      if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) {
        MethodNode versionMethodNode=(MethodNode)getASTFactory().create(HqlSqlTokenTypes.METHOD_CALL,"(");
        AST methodIdentNode=getASTFactory().create(HqlSqlTokenTypes.IDENT,"cast");
        versionMethodNode.addChild(methodIdentNode);
        versionMethodNode.initializeMethodNode(methodIdentNode,true);
        AST castExprListNode=getASTFactory().create(HqlSqlTokenTypes.EXPR_LIST,"exprList");
        methodIdentNode.setNextSibling(castExprListNode);
        castExprListNode.addChild(versionValueNode);
        versionValueNode.setNextSibling(getASTFactory().create(HqlSqlTokenTypes.IDENT,sessionFactoryHelper.getFactory().getDialect().getTypeName(sqlTypes[0])));
        processFunction(versionMethodNode,true);
        versionValueNode=versionMethodNode;
      }
    }
 else {
      if (isIntegral(versionType)) {
        try {
          Object seedValue=versionType.seed(null);
          versionValueNode=getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN,seedValue.toString());
        }
 catch (        Throwable t) {
          throw new QueryException("could not determine seed value for version on bulk insert [" + versionType + "]");
        }
      }
 else       if (isDatabaseGeneratedTimestamp(versionType)) {
        String functionName=sessionFactoryHelper.getFactory().getDialect().getCurrentTimestampSQLFunctionName();
        versionValueNode=getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN,functionName);
      }
 else {
        throw new QueryException("cannot handle version type [" + versionType + "] on bulk inserts with dialects not supporting parameters in insert-select statements");
      }
    }
    AST currentFirstSelectExprNode=selectClause.getFirstChild();
    selectClause.setFirstChild(versionValueNode);
    versionValueNode.setNextSibling(currentFirstSelectExprNode);
    insertStatement.getIntoClause().prependVersionColumnSpec();
  }
  if (insertStatement.getIntoClause().isDiscriminated()) {
    String sqlValue=insertStatement.getIntoClause().getQueryable().getDiscriminatorSQLValue();
    AST discrimValue=getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN,sqlValue);
    insertStatement.getSelectClause().addChild(discrimValue);
  }
}
