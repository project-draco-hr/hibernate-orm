{
  final Class<?> callbackSuperclass=listenerClass.getSuperclass();
  if (callbackSuperclass != null) {
    Callback callback=createListenerCallback(entityClass,callbackSuperclass,methodName);
    if (callback != null) {
      return callback;
    }
  }
  final Object listenerInstance=jpaListenerFactory.buildListener(listenerClass);
  for (  Method method : listenerClass.getDeclaredMethods()) {
    if (!method.getName().equals(methodName)) {
      continue;
    }
    final Class<?>[] argTypes=method.getParameterTypes();
    if (argTypes.length != 1) {
      continue;
    }
    final Class<?> argType=argTypes[0];
    if (argType != Object.class && argType != entityClass) {
      continue;
    }
    if (!method.isAccessible()) {
      method.setAccessible(true);
    }
    return new ListenerCallback(listenerInstance,method);
  }
  return null;
}
