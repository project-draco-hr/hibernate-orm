{
  final EntityPersister entityPersister=sessionFactory().getEntityPersister(ReportedMessage.class.getName());
  Session session=openSession();
  session.beginTransaction();
  Message message=new Message(1,"the message");
  Poster poster=new Poster(2,"the poster");
  session.save(message);
  session.save(poster);
  message.poster=poster;
  poster.messages.add(message);
  ReportedMessage reportedMessage=new ReportedMessage(0,"inappropriate",message);
  session.save(reportedMessage);
  session.getTransaction().commit();
  session.close();
{
    final LoadPlan plan=Helper.INSTANCE.buildLoadPlan(sessionFactory(),entityPersister);
    final AliasResolutionContext aliasResolutionContext=new AliasResolutionContextImpl(sessionFactory(),0);
    final String sql=Helper.INSTANCE.generateSql(sessionFactory(),plan,aliasResolutionContext);
    final ResultSetProcessorImpl resultSetProcessor=new ResultSetProcessorImpl(plan,true);
    final List results=new ArrayList();
    final Session workSession=openSession();
    workSession.beginTransaction();
    workSession.doWork(new Work(){
      @Override public void execute(      Connection connection) throws SQLException {
        PreparedStatement ps=connection.prepareStatement(sql);
        ps.setInt(1,0);
        ResultSet resultSet=ps.executeQuery();
        results.addAll(resultSetProcessor.extractResults(NoOpLoadPlanAdvisor.INSTANCE,resultSet,(SessionImplementor)workSession,new QueryParameters(),new NamedParameterContext(){
          @Override public int[] getNamedParameterLocations(          String name){
            return new int[0];
          }
        }
,aliasResolutionContext,true,false,null,null));
        resultSet.close();
        ps.close();
      }
    }
);
    assertEquals(1,results.size());
    Object result=results.get(0);
    assertNotNull(result);
    ReportedMessage workReportedMessage=ExtraAssertions.assertTyping(ReportedMessage.class,result);
    assertEquals(0,workReportedMessage.id.intValue());
    assertEquals("inappropriate",workReportedMessage.reason);
    Message workMessage=workReportedMessage.message;
    assertNotNull(workMessage);
    assertTrue(Hibernate.isInitialized(workMessage));
    assertEquals(1,workMessage.mid.intValue());
    assertEquals("the message",workMessage.msgTxt);
    assertTrue(Hibernate.isInitialized(workMessage.poster));
    Poster workPoster=workMessage.poster;
    assertEquals(2,workPoster.pid.intValue());
    assertEquals("the poster",workPoster.name);
    assertFalse(Hibernate.isInitialized(workPoster.messages));
    workSession.getTransaction().commit();
    workSession.close();
  }
  session=openSession();
  session.beginTransaction();
  session.createQuery("delete ReportedMessage").executeUpdate();
  session.createQuery("delete Message").executeUpdate();
  session.createQuery("delete Poster").executeUpdate();
  session.getTransaction().commit();
  session.close();
}
