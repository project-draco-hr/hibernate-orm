{
  Table table=id.getTable();
  table.setIdentifierValue(id);
  id.setIdentifierGeneratorStrategy(generatorType);
  Properties params=new Properties();
  params.setProperty(PersistentIdentifierGenerator.TABLE,table.getName());
  final String implicitCatalogName=buildingContext.getBuildingOptions().getMappingDefaults().getImplicitCatalogName();
  if (implicitCatalogName != null) {
    params.put(PersistentIdentifierGenerator.CATALOG,implicitCatalogName);
  }
  final String implicitSchemaName=buildingContext.getBuildingOptions().getMappingDefaults().getImplicitSchemaName();
  if (implicitSchemaName != null) {
    params.put(PersistentIdentifierGenerator.SCHEMA,implicitSchemaName);
  }
  if (id.getColumnSpan() == 1) {
    params.setProperty(PersistentIdentifierGenerator.PK,((org.hibernate.mapping.Column)id.getColumnIterator().next()).getName());
  }
  params.put(PersistentIdentifierGenerator.IDENTIFIER_NORMALIZER,buildingContext.getObjectNameNormalizer());
  if (!isEmptyAnnotationValue(generatorName)) {
    IdentifierGeneratorDefinition gen=getIdentifierGenerator(generatorName,localGenerators,buildingContext);
    if (gen == null) {
      throw new AnnotationException("Unknown Id.generator: " + generatorName);
    }
    String identifierGeneratorStrategy=gen.getStrategy();
    final boolean avoidOverriding=identifierGeneratorStrategy.equals("identity") || identifierGeneratorStrategy.equals("seqhilo") || identifierGeneratorStrategy.equals(MultipleHiLoPerTableGenerator.class.getName());
    if (generatorType == null || !avoidOverriding) {
      id.setIdentifierGeneratorStrategy(identifierGeneratorStrategy);
    }
    for (    Object o : gen.getParameters().entrySet()) {
      Map.Entry elt=(Map.Entry)o;
      params.setProperty((String)elt.getKey(),(String)elt.getValue());
    }
  }
  if ("assigned".equals(generatorType))   id.setNullValue("undefined");
  id.setIdentifierGeneratorProperties(params);
}
