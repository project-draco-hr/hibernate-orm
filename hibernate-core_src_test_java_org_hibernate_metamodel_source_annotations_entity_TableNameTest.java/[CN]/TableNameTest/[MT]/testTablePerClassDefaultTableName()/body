{
@Entity @Inheritance(strategy=javax.persistence.InheritanceType.TABLE_PER_CLASS) class A {
    @Id @GeneratedValue private int id;
  }
@Entity class B extends A {
  }
  Index index=JandexHelper.indexForClass(service,A.class,B.class);
  Set<ConfiguredClassHierarchy<EntityClass>> hierarchies=ConfiguredClassHierarchyBuilder.createEntityHierarchies(new TestAnnotationsBindingContextImpl(index,serviceRegistry));
  assertEquals("There should be only one hierarchy",1,hierarchies.size());
  Iterator<EntityClass> iter=hierarchies.iterator().next().iterator();
  EntityClass entityClass=iter.next();
  ClassInfo info=entityClass.getClassInfo();
  assertEquals("wrong class",DotName.createSimple(A.class.getName()),info.name());
  assertTrue(entityClass.hasOwnTable());
  Assert.assertEquals("wrong inheritance type",InheritanceType.TABLE_PER_CLASS,entityClass.getInheritanceType());
  Assert.assertEquals("wrong table name","A",entityClass.getClassNameForTable());
  assertTrue(iter.hasNext());
  entityClass=iter.next();
  info=entityClass.getClassInfo();
  assertEquals("wrong class",DotName.createSimple(B.class.getName()),info.name());
  assertTrue(entityClass.hasOwnTable());
  Assert.assertEquals("wrong inheritance type",InheritanceType.TABLE_PER_CLASS,entityClass.getInheritanceType());
  Assert.assertEquals("wrong table name","B",entityClass.getClassNameForTable());
  assertFalse(iter.hasNext());
}
