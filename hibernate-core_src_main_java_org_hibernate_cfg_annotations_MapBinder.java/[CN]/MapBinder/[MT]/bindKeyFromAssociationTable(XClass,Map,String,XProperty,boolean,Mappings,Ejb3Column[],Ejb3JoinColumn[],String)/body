{
  if (mapKeyPropertyName != null) {
    PersistentClass associatedClass=(PersistentClass)persistentClasses.get(collType.getName());
    if (associatedClass == null)     throw new AnnotationException("Associated class not found: " + collType);
    Property mapProperty=BinderHelper.findPropertyByName(associatedClass,mapKeyPropertyName);
    if (mapProperty == null) {
      throw new AnnotationException("Map key property not found: " + collType + "."+ mapKeyPropertyName);
    }
    org.hibernate.mapping.Map map=(org.hibernate.mapping.Map)this.collection;
    Value indexValue=createFormulatedValue(mapProperty.getValue(),map,targetPropertyName,associatedClass,mappings);
    map.setIndex(indexValue);
  }
 else {
    String mapKeyType;
    Class target=void.class;
    if (property.isAnnotationPresent(MapKeyClass.class)) {
      target=property.getAnnotation(MapKeyClass.class).value();
    }
    if (!void.class.equals(target)) {
      mapKeyType=target.getName();
    }
 else {
      mapKeyType=property.getMapKey().getName();
    }
    PersistentClass collectionEntity=(PersistentClass)persistentClasses.get(mapKeyType);
    boolean isIndexOfEntities=collectionEntity != null;
    ManyToOne element=null;
    org.hibernate.mapping.Map mapValue=(org.hibernate.mapping.Map)this.collection;
    if (isIndexOfEntities) {
      element=new ManyToOne(mappings,mapValue.getCollectionTable());
      mapValue.setIndex(element);
      element.setReferencedEntityName(mapKeyType);
      element.setFetchMode(FetchMode.JOIN);
      element.setLazy(false);
    }
 else {
      XClass elementClass;
      AnnotatedClassType classType;
      PropertyHolder holder=null;
      if (BinderHelper.PRIMITIVE_NAMES.contains(mapKeyType)) {
        classType=AnnotatedClassType.NONE;
        elementClass=null;
      }
 else {
        try {
          elementClass=mappings.getReflectionManager().classForName(mapKeyType,MapBinder.class);
        }
 catch (        ClassNotFoundException e) {
          throw new AnnotationException("Unable to find class: " + mapKeyType,e);
        }
        classType=mappings.getClassType(elementClass);
        holder=PropertyHolderBuilder.buildPropertyHolder(mapValue,StringHelper.qualify(mapValue.getRole(),"mapkey"),elementClass,property,propertyHolder,mappings);
        boolean attributeOverride=property.isAnnotationPresent(AttributeOverride.class) || property.isAnnotationPresent(AttributeOverrides.class);
        if (isEmbedded || attributeOverride) {
          classType=AnnotatedClassType.EMBEDDABLE;
        }
      }
      PersistentClass owner=mapValue.getOwner();
      AccessType accessType;
      if (owner.getIdentifierProperty() != null) {
        accessType=owner.getIdentifierProperty().getPropertyAccessorName().equals("property") ? AccessType.PROPERTY : AccessType.FIELD;
      }
 else       if (owner.getIdentifierMapper() != null && owner.getIdentifierMapper().getPropertySpan() > 0) {
        Property prop=(Property)owner.getIdentifierMapper().getPropertyIterator().next();
        accessType=prop.getPropertyAccessorName().equals("property") ? AccessType.PROPERTY : AccessType.FIELD;
      }
 else {
        throw new AssertionFailure("Unable to guess collection property accessor name");
      }
      if (AnnotatedClassType.EMBEDDABLE.equals(classType)) {
        EntityBinder entityBinder=new EntityBinder();
        PropertyData inferredData;
        if (isHibernateExtensionMapping()) {
          inferredData=new PropertyPreloadedData(AccessType.PROPERTY,"index",elementClass);
        }
 else {
          inferredData=new PropertyPreloadedData(AccessType.PROPERTY,"key",elementClass);
        }
        Component component=AnnotationBinder.fillComponent(holder,inferredData,accessType,true,entityBinder,false,false,true,mappings,inheritanceStatePerClass);
        mapValue.setIndex(component);
      }
 else {
        SimpleValueBinder elementBinder=new SimpleValueBinder();
        elementBinder.setMappings(mappings);
        elementBinder.setReturnedClassName(mapKeyType);
        Ejb3Column[] elementColumns=mapKeyColumns;
        if (elementColumns == null || elementColumns.length == 0) {
          elementColumns=new Ejb3Column[1];
          Ejb3Column column=new Ejb3Column();
          column.setImplicit(false);
          column.setNullable(true);
          column.setLength(Ejb3Column.DEFAULT_COLUMN_LENGTH);
          column.setLogicalColumnName(Collection.DEFAULT_KEY_COLUMN_NAME);
          column.setJoins(new HashMap<String,Join>());
          column.setMappings(mappings);
          column.bind();
          elementColumns[0]=column;
        }
        for (        Ejb3Column column : elementColumns) {
          column.setTable(mapValue.getCollectionTable());
        }
        elementBinder.setColumns(elementColumns);
        elementBinder.setKey(true);
        MapKeyType mapKeyTypeAnnotation=property.getAnnotation(MapKeyType.class);
        if (mapKeyTypeAnnotation != null && !BinderHelper.isEmptyAnnotationValue(mapKeyTypeAnnotation.value().type())) {
          elementBinder.setExplicitType(mapKeyTypeAnnotation.value());
        }
 else {
          elementBinder.setType(property,elementClass);
        }
        elementBinder.setPersistentClassName(propertyHolder.getEntityName());
        elementBinder.setAccessType(accessType);
        mapValue.setIndex(elementBinder.make());
      }
    }
    if (!collection.isOneToMany()) {
      for (      Ejb3JoinColumn col : mapKeyManyToManyColumns) {
        col.forceNotNull();
      }
    }
    if (isIndexOfEntities) {
      bindManytoManyInverseFk(collectionEntity,mapKeyManyToManyColumns,element,false,mappings);
    }
  }
}
