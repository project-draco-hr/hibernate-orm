{
  Value element=collection.getElement();
  String fromAndWhere=null;
  if (!(element instanceof OneToMany)) {
    String referencedPropertyName=null;
    if (element instanceof ToOne) {
      referencedPropertyName=((ToOne)element).getReferencedPropertyName();
    }
 else     if (element instanceof DependantValue) {
      if (propertyName != null) {
        referencedPropertyName=collection.getReferencedPropertyName();
      }
 else {
        throw new AnnotationException("SecondaryTable JoinColumn cannot reference a non primary key");
      }
    }
    Iterator referencedEntityColumns;
    if (referencedPropertyName == null) {
      referencedEntityColumns=associatedClass.getIdentifier().getColumnIterator();
    }
 else {
      Property referencedProperty=associatedClass.getRecursiveProperty(referencedPropertyName);
      referencedEntityColumns=referencedProperty.getColumnIterator();
    }
    String alias="$alias$";
    StringBuilder fromAndWhereSb=new StringBuilder(" from ").append(associatedClass.getTable().getName()).append(" ").append(alias).append(" where ");
    Iterator collectionTableColumns=element.getColumnIterator();
    while (collectionTableColumns.hasNext()) {
      Column colColumn=(Column)collectionTableColumns.next();
      Column refColumn=(Column)referencedEntityColumns.next();
      fromAndWhereSb.append(alias).append('.').append(refColumn.getQuotedName()).append('=').append(colColumn.getQuotedName()).append(" and ");
    }
    fromAndWhere=fromAndWhereSb.substring(0,fromAndWhereSb.length() - 5);
  }
  if (value instanceof Component) {
    Component component=(Component)value;
    Iterator properties=component.getPropertyIterator();
    Component indexComponent=new Component(getBuildingContext().getMetadataCollector(),collection);
    indexComponent.setComponentClassName(component.getComponentClassName());
    indexComponent.setNodeName("index");
    while (properties.hasNext()) {
      Property current=(Property)properties.next();
      Property newProperty=new Property();
      newProperty.setCascade(current.getCascade());
      newProperty.setValueGenerationStrategy(current.getValueGenerationStrategy());
      newProperty.setInsertable(false);
      newProperty.setUpdateable(false);
      newProperty.setMetaAttributes(current.getMetaAttributes());
      newProperty.setName(current.getName());
      newProperty.setNodeName(current.getNodeName());
      newProperty.setNaturalIdentifier(false);
      newProperty.setOptional(false);
      newProperty.setPersistentClass(current.getPersistentClass());
      newProperty.setPropertyAccessorName(current.getPropertyAccessorName());
      newProperty.setSelectable(current.isSelectable());
      newProperty.setValue(createFormulatedValue(current.getValue(),collection,targetPropertyName,associatedClass,buildingContext));
      indexComponent.addProperty(newProperty);
    }
    return indexComponent;
  }
 else   if (value instanceof SimpleValue) {
    SimpleValue sourceValue=(SimpleValue)value;
    SimpleValue targetValue;
    if (value instanceof ManyToOne) {
      ManyToOne sourceManyToOne=(ManyToOne)sourceValue;
      ManyToOne targetManyToOne=new ManyToOne(getBuildingContext().getMetadataCollector(),collection.getCollectionTable());
      targetManyToOne.setFetchMode(FetchMode.DEFAULT);
      targetManyToOne.setLazy(true);
      targetManyToOne.setReferencedEntityName(sourceManyToOne.getReferencedEntityName());
      targetValue=targetManyToOne;
    }
 else {
      targetValue=new SimpleValue(getBuildingContext().getMetadataCollector(),collection.getCollectionTable());
      targetValue.setTypeName(sourceValue.getTypeName());
      targetValue.setTypeParameters(sourceValue.getTypeParameters());
    }
    Iterator columns=sourceValue.getColumnIterator();
    Random random=new Random();
    while (columns.hasNext()) {
      Object current=columns.next();
      Formula formula=new Formula();
      String formulaString;
      if (current instanceof Column) {
        formulaString=((Column)current).getQuotedName();
      }
 else       if (current instanceof Formula) {
        formulaString=((Formula)current).getFormula();
      }
 else {
        throw new AssertionFailure("Unknown element in column iterator: " + current.getClass());
      }
      if (fromAndWhere != null) {
        formulaString=Template.renderWhereStringTemplate(formulaString,"$alias$",new HSQLDialect());
        formulaString="(select " + formulaString + fromAndWhere+ ")";
        formulaString=StringHelper.replace(formulaString,"$alias$","a" + random.nextInt(16));
      }
      formula.setFormula(formulaString);
      targetValue.addFormula(formula);
    }
    return targetValue;
  }
 else {
    throw new AssertionFailure("Unknown type encounters for map key: " + value.getClass());
  }
}
