{
  if (!InheritanceType.SINGLE_TABLE.equals(inheritanceType)) {
    return;
  }
  final AnnotationInstance discriminatorValueAnnotation=JandexHelper.getSingleAnnotation(getClassInfo(),JPADotNames.DISCRIMINATOR_VALUE);
  if (discriminatorValueAnnotation != null) {
    this.discriminatorMatchValue=discriminatorValueAnnotation.value().asString();
  }
  final AnnotationInstance discriminatorColumnAnnotation=JandexHelper.getSingleAnnotation(getClassInfo(),JPADotNames.DISCRIMINATOR_COLUMN);
  final AnnotationInstance discriminatorFormulaAnnotation=JandexHelper.getSingleAnnotation(getClassInfo(),HibernateDotNames.DISCRIMINATOR_FORMULA);
  Class<?> type=String.class;
  if (discriminatorFormulaAnnotation != null) {
    String expression=JandexHelper.getValue(discriminatorFormulaAnnotation,"value",String.class);
    discriminatorFormula=new FormulaImpl(getPrimaryTableSource().getExplicitTableName(),expression);
  }
  discriminatorColumnValues=new ColumnValues(null);
  discriminatorColumnValues.setNullable(false);
  if (discriminatorColumnAnnotation != null) {
    DiscriminatorType discriminatorType=Enum.valueOf(DiscriminatorType.class,discriminatorColumnAnnotation.value("discriminatorType").asEnum());
switch (discriminatorType) {
case STRING:
{
        type=String.class;
        break;
      }
case CHAR:
{
      type=Character.class;
      break;
    }
case INTEGER:
{
    type=Integer.class;
    break;
  }
default :
{
  throw new AnnotationException("Unsupported discriminator type: " + discriminatorType);
}
}
discriminatorColumnValues.setName(JandexHelper.getValue(discriminatorColumnAnnotation,"name",String.class));
discriminatorColumnValues.setLength(JandexHelper.getValue(discriminatorColumnAnnotation,"length",Integer.class));
discriminatorColumnValues.setColumnDefinition(JandexHelper.getValue(discriminatorColumnAnnotation,"columnDefinition",String.class));
}
discriminatorType=type;
AnnotationInstance discriminatorOptionsAnnotation=JandexHelper.getSingleAnnotation(getClassInfo(),HibernateDotNames.DISCRIMINATOR_OPTIONS);
if (discriminatorOptionsAnnotation != null) {
isDiscriminatorForced=discriminatorOptionsAnnotation.value("force").asBoolean();
isDiscriminatorIncludedInSql=discriminatorOptionsAnnotation.value("insert").asBoolean();
}
 else {
isDiscriminatorForced=false;
isDiscriminatorIncludedInSql=true;
}
}
