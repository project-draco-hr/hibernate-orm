{
  final Node lhs=getLeftHandOperand();
  if (lhs == null) {
    throw new SemanticException("left-hand operand of in operator was null");
  }
  final Node inList=getInList();
  if (inList == null) {
    throw new SemanticException("right-hand operand of in operator was null");
  }
  if (SqlNode.class.isAssignableFrom(lhs.getClass())) {
    Type lhsType=((SqlNode)lhs).getDataType();
    AST inListChild=inList.getFirstChild();
    while (inListChild != null) {
      if (ExpectedTypeAwareNode.class.isAssignableFrom(inListChild.getClass())) {
        ((ExpectedTypeAwareNode)inListChild).setExpectedType(lhsType);
      }
      if (CollectionFunction.class.isInstance(inListChild) && ExpectedTypeAwareNode.class.isInstance(lhs)) {
        final Type rhsType=((CollectionFunction)inListChild).getDataType();
        ((ExpectedTypeAwareNode)lhs).setExpectedType(rhsType);
      }
      inListChild=inListChild.getNextSibling();
    }
  }
  final SessionFactoryImplementor sessionFactory=getSessionFactoryHelper().getFactory();
  if (sessionFactory.getDialect().supportsRowValueConstructorSyntaxInInList()) {
    return;
  }
  final Type lhsType=extractDataType(lhs);
  if (lhsType == null) {
    return;
  }
  final int lhsColumnSpan=lhsType.getColumnSpan(sessionFactory);
  final Node rhsNode=(Node)inList.getFirstChild();
  if (!isNodeAcceptable(rhsNode)) {
    return;
  }
  int rhsColumnSpan;
  if (rhsNode == null) {
    return;
  }
 else   if (rhsNode.getType() == HqlTokenTypes.VECTOR_EXPR) {
    rhsColumnSpan=rhsNode.getNumberOfChildren();
  }
 else {
    final Type rhsType=extractDataType(rhsNode);
    if (rhsType == null) {
      return;
    }
    rhsColumnSpan=rhsType.getColumnSpan(sessionFactory);
  }
  if (lhsColumnSpan > 1 && rhsColumnSpan > 1) {
    mutateRowValueConstructorSyntaxInInListSyntax(lhsColumnSpan,rhsColumnSpan);
  }
}
