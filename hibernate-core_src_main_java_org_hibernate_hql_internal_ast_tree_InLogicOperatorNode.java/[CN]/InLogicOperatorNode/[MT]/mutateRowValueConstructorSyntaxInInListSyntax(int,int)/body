{
  String[] lhsElementTexts=extractMutationTexts(getLeftHandOperand(),lhsColumnSpan);
  Node rhsNode=(Node)getInList().getFirstChild();
  ParameterSpecification lhsEmbeddedCompositeParameterSpecification=getLeftHandOperand() == null || (!ParameterNode.class.isInstance(getLeftHandOperand())) ? null : ((ParameterNode)getLeftHandOperand()).getHqlParameterSpecification();
  final boolean negated=getType() == HqlSqlTokenTypes.NOT_IN;
  if (rhsNode != null && rhsNode.getNextSibling() == null) {
    String[] rhsElementTexts=extractMutationTexts(rhsNode,rhsColumnSpan);
    setType(negated ? HqlTokenTypes.OR : HqlSqlTokenTypes.AND);
    setText(negated ? "or" : "and");
    ParameterSpecification rhsEmbeddedCompositeParameterSpecification=rhsNode == null || (!ParameterNode.class.isInstance(rhsNode)) ? null : ((ParameterNode)rhsNode).getHqlParameterSpecification();
    translate(lhsColumnSpan,negated ? HqlSqlTokenTypes.NE : HqlSqlTokenTypes.EQ,negated ? "<>" : "=",lhsElementTexts,rhsElementTexts,lhsEmbeddedCompositeParameterSpecification,rhsEmbeddedCompositeParameterSpecification,this);
  }
 else {
    List andElementsNodeList=new ArrayList();
    while (rhsNode != null) {
      String[] rhsElementTexts=extractMutationTexts(rhsNode,rhsColumnSpan);
      AST group=getASTFactory().create(negated ? HqlSqlTokenTypes.OR : HqlSqlTokenTypes.AND,negated ? "or" : "and");
      ParameterSpecification rhsEmbeddedCompositeParameterSpecification=rhsNode == null || (!ParameterNode.class.isInstance(rhsNode)) ? null : ((ParameterNode)rhsNode).getHqlParameterSpecification();
      translate(lhsColumnSpan,negated ? HqlSqlTokenTypes.NE : HqlSqlTokenTypes.EQ,negated ? "<>" : "=",lhsElementTexts,rhsElementTexts,lhsEmbeddedCompositeParameterSpecification,rhsEmbeddedCompositeParameterSpecification,group);
      andElementsNodeList.add(group);
      rhsNode=(Node)rhsNode.getNextSibling();
    }
    setType(negated ? HqlSqlTokenTypes.AND : HqlSqlTokenTypes.OR);
    setText(negated ? "and" : "or");
    AST curNode=this;
    for (int i=andElementsNodeList.size() - 1; i > 1; i--) {
      AST group=getASTFactory().create(negated ? HqlSqlTokenTypes.AND : HqlSqlTokenTypes.OR,negated ? "and" : "or");
      curNode.setFirstChild(group);
      curNode=group;
      AST and=(AST)andElementsNodeList.get(i);
      group.setNextSibling(and);
    }
    AST node0=(AST)andElementsNodeList.get(0);
    AST node1=(AST)andElementsNodeList.get(1);
    node0.setNextSibling(node1);
    curNode.setFirstChild(node0);
  }
}
