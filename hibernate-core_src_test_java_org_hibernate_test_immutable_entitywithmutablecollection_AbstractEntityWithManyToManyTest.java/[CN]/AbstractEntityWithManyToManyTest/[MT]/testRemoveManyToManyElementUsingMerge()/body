{
  clearCounts();
  Plan p=new Plan("plan");
  Contract c=new Contract(null,"gail","phone");
  p.addContract(c);
  Session s=openSession();
  Transaction t=s.beginTransaction();
  s.persist(p);
  t.commit();
  s.close();
  assertInsertCount(2);
  assertUpdateCount(0);
  clearCounts();
  p.removeContract(c);
  assertEquals(0,p.getContracts().size());
  if (isPlanContractsBidirectional) {
    assertEquals(0,c.getPlans().size());
  }
  s=openSession();
  t=s.beginTransaction();
  p=(Plan)s.merge(p);
  t.commit();
  s.close();
  assertUpdateCount(isContractVersioned ? 1 : 0);
  assertDeleteCount(0);
  clearCounts();
  s=openSession();
  t=s.beginTransaction();
  p=(Plan)s.createCriteria(Plan.class).uniqueResult();
  if (isPlanContractsInverse) {
    assertEquals(1,p.getContracts().size());
    c=(Contract)p.getContracts().iterator().next();
    assertEquals("gail",c.getCustomerName());
    assertSame(p,c.getPlans().iterator().next());
  }
 else {
    assertEquals(0,p.getContracts().size());
    c=(Contract)s.createCriteria(Contract.class).uniqueResult();
    if (isPlanContractsBidirectional) {
      assertEquals(0,c.getPlans().size());
    }
    s.delete(c);
  }
  s.delete(p);
  assertEquals(new Long(0),s.createCriteria(Plan.class).setProjection(Projections.rowCount()).uniqueResult());
  assertEquals(new Long(0),s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult());
  t.commit();
  s.close();
  assertUpdateCount(0);
  assertDeleteCount(2);
}
