{
  final ConfigurationService cfgService=serviceRegistry.getService(ConfigurationService.class);
  final Set<ValidationMode> modes=ValidationMode.getModes(cfgService.getSettings().get(MODE_PROPERTY));
  if (modes.size() > 1) {
    LOG.multipleValidationModes(ValidationMode.loggable(modes));
  }
  if (modes.size() == 1 && modes.contains(ValidationMode.NONE)) {
    return;
  }
  final ClassLoaderService classLoaderService=serviceRegistry.getService(ClassLoaderService.class);
  if (isBeanValidationApiAvailable(classLoaderService)) {
    try {
      final Class typeSafeActivatorClass=loadTypeSafeActivatorClass(classLoaderService);
      @SuppressWarnings("unchecked") final Method activateMethod=typeSafeActivatorClass.getMethod(ACTIVATE_METHOD_NAME,ActivationContext.class);
      final ActivationContext activationContext=new ActivationContext(){
        @Override public Set<ValidationMode> getValidationModes(){
          return modes;
        }
        @Override public Metadata getMetadata(){
          return metadata;
        }
        @Override public SessionFactoryImplementor getSessionFactory(){
          return sessionFactory;
        }
        @Override public SessionFactoryServiceRegistry getServiceRegistry(){
          return serviceRegistry;
        }
      }
;
      try {
        activateMethod.invoke(null,activationContext);
      }
 catch (      InvocationTargetException e) {
        if (HibernateException.class.isInstance(e.getTargetException())) {
          throw ((HibernateException)e.getTargetException());
        }
        throw new IntegrationException("Error activating Bean Validation integration",e.getTargetException());
      }
catch (      Exception e) {
        throw new IntegrationException("Error activating Bean Validation integration",e);
      }
    }
 catch (    NoSuchMethodException e) {
      throw new HibernateException("Unable to locate TypeSafeActivator#activate method",e);
    }
  }
 else {
    validateMissingBeanValidationApi(modes);
  }
}
