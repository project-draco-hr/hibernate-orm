{
  if (clazzToProcess.isAnnotationPresent(Entity.class) && clazzToProcess.isAnnotationPresent(MappedSuperclass.class)) {
    throw new AnnotationException("An entity cannot be annotated with both @Entity and @MappedSuperclass: " + clazzToProcess.getName());
  }
  InheritanceState inheritanceState=inheritanceStatePerClass.get(clazzToProcess);
  AnnotatedClassType classType=mappings.getClassType(clazzToProcess);
  if (AnnotatedClassType.EMBEDDABLE_SUPERCLASS.equals(classType)) {
    bindQueries(clazzToProcess,mappings);
    bindTypeDefs(clazzToProcess,mappings);
    bindFilterDefs(clazzToProcess,mappings);
  }
  if (!isEntityClassType(clazzToProcess,classType)) {
    return;
  }
  log.info("Binding entity from annotated class: {}",clazzToProcess.getName());
  PersistentClass superEntity=getSuperEntity(clazzToProcess,inheritanceStatePerClass,mappings,inheritanceState);
  bindQueries(clazzToProcess,mappings);
  bindFilterDefs(clazzToProcess,mappings);
  bindTypeDefs(clazzToProcess,mappings);
  bindFetchProfiles(clazzToProcess,mappings);
  BinderHelper.bindAnyMetaDefs(clazzToProcess,mappings);
  String schema="";
  String table="";
  String catalog="";
  List<UniqueConstraintHolder> uniqueConstraints=new ArrayList<UniqueConstraintHolder>();
  if (clazzToProcess.isAnnotationPresent(javax.persistence.Table.class)) {
    javax.persistence.Table tabAnn=clazzToProcess.getAnnotation(javax.persistence.Table.class);
    table=tabAnn.name();
    schema=tabAnn.schema();
    catalog=tabAnn.catalog();
    uniqueConstraints=TableBinder.buildUniqueConstraintHolders(tabAnn.uniqueConstraints());
  }
  Ejb3JoinColumn[] inheritanceJoinedColumns=makeInheritanceJoinColumns(clazzToProcess,mappings,inheritanceState,superEntity);
  Ejb3DiscriminatorColumn discriminatorColumn=null;
  String discrimValue=null;
  if (InheritanceType.SINGLE_TABLE.equals(inheritanceState.getType())) {
    javax.persistence.DiscriminatorColumn discAnn=clazzToProcess.getAnnotation(javax.persistence.DiscriminatorColumn.class);
    DiscriminatorType discriminatorType=discAnn != null ? discAnn.discriminatorType() : DiscriminatorType.STRING;
    org.hibernate.annotations.DiscriminatorFormula discFormulaAnn=clazzToProcess.getAnnotation(org.hibernate.annotations.DiscriminatorFormula.class);
    if (!inheritanceState.hasParents()) {
      discriminatorColumn=Ejb3DiscriminatorColumn.buildDiscriminatorColumn(discriminatorType,discAnn,discFormulaAnn,mappings);
    }
    if (discAnn != null && inheritanceState.hasParents()) {
      log.warn("Discriminator column has to be defined in the root entity, it will be ignored in subclass: {}",clazzToProcess.getName());
    }
    discrimValue=clazzToProcess.isAnnotationPresent(DiscriminatorValue.class) ? clazzToProcess.getAnnotation(DiscriminatorValue.class).value() : null;
  }
  PersistentClass persistentClass=makePersistentClass(inheritanceState,superEntity);
  Proxy proxyAnn=clazzToProcess.getAnnotation(Proxy.class);
  BatchSize sizeAnn=clazzToProcess.getAnnotation(BatchSize.class);
  Where whereAnn=clazzToProcess.getAnnotation(Where.class);
  Entity entityAnn=clazzToProcess.getAnnotation(Entity.class);
  org.hibernate.annotations.Entity hibEntityAnn=clazzToProcess.getAnnotation(org.hibernate.annotations.Entity.class);
  Cache cacheAnn=determineCacheSettings(clazzToProcess,mappings);
  EntityBinder entityBinder=new EntityBinder(entityAnn,hibEntityAnn,clazzToProcess,persistentClass,mappings);
  entityBinder.setDiscriminatorValue(discrimValue);
  entityBinder.setBatchSize(sizeAnn);
  entityBinder.setProxy(proxyAnn);
  entityBinder.setWhere(whereAnn);
  entityBinder.setCache(cacheAnn);
  entityBinder.setInheritanceState(inheritanceState);
  if (!inheritanceState.hasParents()) {
    bindFilters(clazzToProcess,entityBinder,mappings);
  }
  entityBinder.bindEntity();
  if (inheritanceState.hasTable()) {
    Check checkAnn=clazzToProcess.getAnnotation(Check.class);
    String constraints=checkAnn == null ? null : checkAnn.constraints();
    entityBinder.bindTable(schema,catalog,table,uniqueConstraints,constraints,inheritanceState.hasDenormalizedTable() ? superEntity.getTable() : null);
  }
 else {
    if (clazzToProcess.isAnnotationPresent(Table.class)) {
      log.warn("Illegal use of @Table in a subclass of a SINGLE_TABLE hierarchy: " + clazzToProcess.getName());
    }
  }
  PropertyHolder propertyHolder=PropertyHolderBuilder.buildPropertyHolder(clazzToProcess,persistentClass,entityBinder,mappings,inheritanceStatePerClass);
  javax.persistence.SecondaryTable secTabAnn=clazzToProcess.getAnnotation(javax.persistence.SecondaryTable.class);
  javax.persistence.SecondaryTables secTabsAnn=clazzToProcess.getAnnotation(javax.persistence.SecondaryTables.class);
  entityBinder.firstLevelSecondaryTablesBinding(secTabAnn,secTabsAnn);
  OnDelete onDeleteAnn=clazzToProcess.getAnnotation(OnDelete.class);
  boolean onDeleteAppropriate=false;
  if (InheritanceType.JOINED.equals(inheritanceState.getType()) && inheritanceState.hasParents()) {
    onDeleteAppropriate=true;
    final JoinedSubclass jsc=(JoinedSubclass)persistentClass;
    if (persistentClass.getEntityPersisterClass() == null) {
      persistentClass.getRootClass().setEntityPersisterClass(JoinedSubclassEntityPersister.class);
    }
    SimpleValue key=new DependantValue(mappings,jsc.getTable(),jsc.getIdentifier());
    jsc.setKey(key);
    ForeignKey fk=clazzToProcess.getAnnotation(ForeignKey.class);
    if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) {
      key.setForeignKeyName(fk.name());
    }
    if (onDeleteAnn != null) {
      key.setCascadeDeleteEnabled(OnDeleteAction.CASCADE.equals(onDeleteAnn.action()));
    }
 else {
      key.setCascadeDeleteEnabled(false);
    }
    SecondPass sp=new JoinedSubclassFkSecondPass(jsc,inheritanceJoinedColumns,key,mappings);
    mappings.addSecondPass(sp);
    mappings.addSecondPass(new CreateKeySecondPass(jsc));
  }
 else   if (InheritanceType.SINGLE_TABLE.equals(inheritanceState.getType())) {
    if (inheritanceState.hasParents()) {
      if (persistentClass.getEntityPersisterClass() == null) {
        persistentClass.getRootClass().setEntityPersisterClass(SingleTableEntityPersister.class);
      }
    }
 else {
      if (inheritanceState.hasSiblings() || !discriminatorColumn.isImplicit()) {
        bindDiscriminatorToPersistentClass((RootClass)persistentClass,discriminatorColumn,entityBinder.getSecondaryTables(),propertyHolder,mappings);
        entityBinder.bindDiscriminatorValue();
      }
    }
  }
 else   if (InheritanceType.TABLE_PER_CLASS.equals(inheritanceState.getType())) {
    if (inheritanceState.hasParents()) {
      if (persistentClass.getEntityPersisterClass() == null) {
        persistentClass.getRootClass().setEntityPersisterClass(UnionSubclassEntityPersister.class);
      }
    }
  }
  if (onDeleteAnn != null && !onDeleteAppropriate) {
    log.warn("Inapropriate use of @OnDelete on entity, annotation ignored: {}",propertyHolder.getEntityName());
  }
  HashMap<String,IdGenerator> classGenerators=buildLocalGenerators(clazzToProcess,mappings);
  final InheritanceState.ElementsToProcess elementsToProcess=inheritanceState.getElementsToProcess();
  inheritanceState.postProcess(persistentClass,entityBinder);
  final boolean subclassAndSingleTableStrategy=inheritanceState.getType() == InheritanceType.SINGLE_TABLE && inheritanceState.hasParents();
  Set<String> idPropertiesIfIdClass=new HashSet<String>();
  boolean isIdClass=mapAsIdClass(inheritanceStatePerClass,inheritanceState,persistentClass,entityBinder,propertyHolder,elementsToProcess,idPropertiesIfIdClass,mappings);
  if (!isIdClass) {
    entityBinder.setWrapIdsInEmbeddedComponents(elementsToProcess.getIdPropertyCount() > 1);
  }
  processIdPropertiesIfNotAlready(inheritanceStatePerClass,mappings,persistentClass,entityBinder,propertyHolder,classGenerators,elementsToProcess,subclassAndSingleTableStrategy,idPropertiesIfIdClass);
  if (!inheritanceState.hasParents()) {
    final RootClass rootClass=(RootClass)persistentClass;
    mappings.addSecondPass(new CreateKeySecondPass(rootClass));
  }
 else {
    superEntity.addSubclass((Subclass)persistentClass);
  }
  mappings.addClass(persistentClass);
  mappings.addSecondPass(new SecondaryTableSecondPass(entityBinder,propertyHolder,clazzToProcess));
  entityBinder.processComplementaryTableDefinitions(clazzToProcess.getAnnotation(org.hibernate.annotations.Table.class));
  entityBinder.processComplementaryTableDefinitions(clazzToProcess.getAnnotation(org.hibernate.annotations.Tables.class));
}
