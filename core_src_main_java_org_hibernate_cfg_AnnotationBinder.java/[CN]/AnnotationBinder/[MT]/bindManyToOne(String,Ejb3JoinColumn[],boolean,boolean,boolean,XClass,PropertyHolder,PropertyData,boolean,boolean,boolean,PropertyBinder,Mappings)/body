{
  org.hibernate.mapping.ManyToOne value=new org.hibernate.mapping.ManyToOne(mappings,columns[0].getTable());
  if (unique) {
    value.markAsLogicalOneToOne();
  }
  value.setReferencedEntityName(ToOneBinder.getReferenceEntityName(inferredData,targetEntity,mappings));
  final XProperty property=inferredData.getProperty();
  defineFetchingStrategy(value,property);
  value.setIgnoreNotFound(ignoreNotFound);
  value.setCascadeDeleteEnabled(cascadeOnDelete);
  if (!optional) {
    for (    Ejb3JoinColumn column : columns) {
      column.setNullable(false);
    }
  }
  if (property.isAnnotationPresent(MapsId.class)) {
    for (    Ejb3JoinColumn column : columns) {
      column.setInsertable(false);
      column.setUpdatable(false);
    }
  }
  value.setTypeName(inferredData.getClassOrElementName());
  final String propertyName=inferredData.getPropertyName();
  value.setTypeUsingReflection(propertyHolder.getClassName(),propertyName);
  ForeignKey fk=property.getAnnotation(ForeignKey.class);
  String fkName=fk != null ? fk.name() : "";
  if (!BinderHelper.isEmptyAnnotationValue(fkName)) {
    value.setForeignKeyName(fkName);
  }
  String path=propertyHolder.getPath() + "." + propertyName;
  FkSecondPass secondPass=new ToOneFkSecondPass(value,columns,!optional && unique,propertyHolder.getEntityOwnerClassName(),path,mappings);
  if (inSecondPass) {
    secondPass.doSecondPass(mappings.getClasses());
  }
 else {
    mappings.addSecondPass(secondPass);
  }
  Ejb3Column.checkPropertyConsistency(columns,propertyHolder.getEntityName() + propertyName);
  propertyBinder.setName(propertyName);
  propertyBinder.setValue(value);
  if (isIdentifierMapper) {
    propertyBinder.setInsertable(false);
    propertyBinder.setUpdatable(false);
  }
 else {
    propertyBinder.setInsertable(columns[0].isInsertable());
    propertyBinder.setUpdatable(columns[0].isUpdatable());
  }
  propertyBinder.setColumns(columns);
  propertyBinder.setAccessType(inferredData.getDefaultAccess());
  propertyBinder.setCascade(cascadeStrategy);
  propertyBinder.setProperty(property);
  propertyBinder.setXToMany(true);
  propertyBinder.makePropertyAndBind();
}
