{
  final XClass declaringClass=propertyContainer.getDeclaringClass();
  final XClass entity=propertyContainer.getEntityAtStake();
  int idPropertyCounter=0;
  PropertyData propertyAnnotatedElement=new PropertyInferredData(declaringClass,property,propertyAccessor,mappings.getReflectionManager());
  final XAnnotatedElement element=propertyAnnotatedElement.getProperty();
  if (element.isAnnotationPresent(Id.class) || element.isAnnotationPresent(EmbeddedId.class)) {
    annElts.add(0,propertyAnnotatedElement);
    if (mappings.isSpecjProprietarySyntaxEnabled()) {
      if (element.isAnnotationPresent(Id.class) && element.isAnnotationPresent(Column.class)) {
        String columnName=element.getAnnotation(Column.class).name();
        for (        XProperty prop : declaringClass.getDeclaredProperties(AccessType.FIELD.getType())) {
          if (prop.isAnnotationPresent(JoinColumn.class) && prop.getAnnotation(JoinColumn.class).name().equals(columnName) && !prop.isAnnotationPresent(MapsId.class)) {
            PropertyData specJPropertyData=new PropertyInferredData(declaringClass,prop,propertyAccessor,mappings.getReflectionManager());
            mappings.addPropertyAnnotatedWithMapsIdSpecj(entity,specJPropertyData,element.toString());
          }
        }
      }
    }
    if (element.isAnnotationPresent(ManyToOne.class) || element.isAnnotationPresent(OneToOne.class)) {
      mappings.addToOneAndIdProperty(entity,propertyAnnotatedElement);
    }
    idPropertyCounter++;
  }
 else {
    annElts.add(propertyAnnotatedElement);
  }
  if (element.isAnnotationPresent(MapsId.class)) {
    mappings.addPropertyAnnotatedWithMapsId(entity,propertyAnnotatedElement);
  }
  return idPropertyCounter;
}
