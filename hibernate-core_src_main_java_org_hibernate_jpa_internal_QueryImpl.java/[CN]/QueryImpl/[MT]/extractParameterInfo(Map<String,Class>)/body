{
  if (!org.hibernate.internal.AbstractQueryImpl.class.isInstance(query)) {
    throw new IllegalStateException("Unknown query type for parameter extraction");
  }
  boolean hadJpaPositionalParameters=false;
  final ParameterMetadata parameterMetadata=org.hibernate.internal.AbstractQueryImpl.class.cast(query).getParameterMetadata();
  for (  String name : (Set<String>)parameterMetadata.getNamedParameterNames()) {
    final NamedParameterDescriptor descriptor=parameterMetadata.getNamedParameterDescriptor(name);
    Class javaType=namedParameterTypeRedefinition.get(name);
    if (javaType != null && mightNeedRedefinition(javaType,descriptor.getExpectedType())) {
      descriptor.resetExpectedType(sfi().getTypeResolver().heuristicType(javaType.getName()));
    }
 else     if (descriptor.getExpectedType() != null) {
      javaType=descriptor.getExpectedType().getReturnedClass();
    }
    if (descriptor.isJpaStyle()) {
      hadJpaPositionalParameters=true;
      final Integer position=Integer.valueOf(name);
      registerParameter(new JpaPositionalParameterRegistrationImpl(this,query,position,javaType));
    }
 else {
      registerParameter(new ParameterRegistrationImpl(this,query,name,javaType));
    }
  }
  if (hadJpaPositionalParameters) {
    if (parameterMetadata.getOrdinalParameterCount() > 0) {
      throw new IllegalArgumentException("Cannot mix JPA positional parameters and native Hibernate positional/ordinal parameters");
    }
  }
  for (int i=0, max=parameterMetadata.getOrdinalParameterCount(); i < max; i++) {
    final OrdinalParameterDescriptor descriptor=parameterMetadata.getOrdinalParameterDescriptor(i + 1);
    Class javaType=descriptor.getExpectedType() == null ? null : descriptor.getExpectedType().getReturnedClass();
    registerParameter(new ParameterRegistrationImpl(this,query,i + 1,javaType));
  }
}
