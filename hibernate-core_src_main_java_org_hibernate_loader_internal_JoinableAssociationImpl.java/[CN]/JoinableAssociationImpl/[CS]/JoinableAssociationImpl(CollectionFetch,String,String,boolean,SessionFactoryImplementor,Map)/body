{
  this.propertyPath=collectionFetch.getPropertyPath();
  final CollectionType collectionType=collectionFetch.getCollectionPersister().getCollectionType();
  this.joinableType=collectionType;
  final EntityPersister fetchSourcePersister=collectionFetch.getOwner().retrieveFetchSourcePersister();
  final int propertyNumber=fetchSourcePersister.getEntityMetamodel().getPropertyIndex(collectionFetch.getOwnerPropertyName());
  if (EntityReference.class.isInstance(collectionFetch.getOwner())) {
    this.lhsAlias=((EntityReference)collectionFetch.getOwner()).getSqlTableAlias();
  }
 else {
    throw new NotYetImplementedException("Cannot determine LHS alias for a FetchOwner that is not an EntityReference.");
  }
  final OuterJoinLoadable ownerPersister=(OuterJoinLoadable)collectionFetch.getOwner().retrieveFetchSourcePersister();
  this.lhsColumns=JoinHelper.getAliasedLHSColumnNames(collectionType,lhsAlias,propertyNumber,ownerPersister,factory);
  this.rhsAlias=collectionFetch.getAlias();
  final boolean isNullable=ownerPersister.isSubclassPropertyNullable(propertyNumber);
  if (collectionFetch.getFetchStrategy().getStyle() == FetchStyle.JOIN) {
    joinType=isNullable ? JoinType.LEFT_OUTER_JOIN : JoinType.INNER_JOIN;
  }
 else {
    joinType=JoinType.NONE;
  }
  this.joinable=joinableType.getAssociatedJoinable(factory);
  this.rhsColumns=JoinHelper.getRHSColumnNames(joinableType,factory);
  this.currentEntitySuffix=currentEntitySuffix;
  this.currentCollectionSuffix=collectionFetch.getCollectionAliases().getSuffix();
  this.on=joinableType.getOnCondition(rhsAlias,factory,enabledFilters) + (withClause == null || withClause.trim().length() == 0 ? "" : " and ( " + withClause + " )");
  this.hasRestriction=hasRestriction;
  this.enabledFilters=enabledFilters;
}
