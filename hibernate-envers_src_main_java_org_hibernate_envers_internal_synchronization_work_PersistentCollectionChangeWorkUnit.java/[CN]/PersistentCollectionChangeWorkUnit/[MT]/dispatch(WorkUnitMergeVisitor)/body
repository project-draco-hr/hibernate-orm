{
  if (first instanceof PersistentCollectionChangeWorkUnit) {
    final PersistentCollectionChangeWorkUnit original=(PersistentCollectionChangeWorkUnit)first;
    final Map<Object,PersistentCollectionChangeData> newChangesIdMap=new HashMap<Object,PersistentCollectionChangeData>();
    for (    PersistentCollectionChangeData persistentCollectionChangeData : getCollectionChanges()) {
      newChangesIdMap.put(getOriginalId(persistentCollectionChangeData),persistentCollectionChangeData);
    }
    final List<PersistentCollectionChangeData> mergedChanges=new ArrayList<PersistentCollectionChangeData>();
    for (    PersistentCollectionChangeData originalCollectionChangeData : original.getCollectionChanges()) {
      final Object originalOriginalId=getOriginalId(originalCollectionChangeData);
      if (!newChangesIdMap.containsKey(originalOriginalId)) {
        mergedChanges.add(originalCollectionChangeData);
      }
 else {
        final String revTypePropName=enversService.getAuditEntitiesConfiguration().getRevisionTypePropName();
        if (RevisionType.ADD.equals(newChangesIdMap.get(originalOriginalId).getData().get(revTypePropName)) && RevisionType.DEL.equals(originalCollectionChangeData.getData().get(revTypePropName))) {
          newChangesIdMap.remove(originalOriginalId);
        }
      }
    }
    mergedChanges.addAll(newChangesIdMap.values());
    return new PersistentCollectionChangeWorkUnit(sessionImplementor,entityName,enversService,id,mergedChanges,referencingPropertyName);
  }
 else {
    throw new RuntimeException("Trying to merge a " + first + " with a PersitentCollectionChangeWorkUnit. "+ "This is not really possible.");
  }
}
