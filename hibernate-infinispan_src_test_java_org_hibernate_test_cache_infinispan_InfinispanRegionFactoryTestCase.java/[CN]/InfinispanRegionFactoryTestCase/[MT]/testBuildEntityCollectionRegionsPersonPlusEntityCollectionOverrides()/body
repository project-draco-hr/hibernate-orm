{
  final String person="com.acme.Person";
  final String address="com.acme.Address";
  final String car="com.acme.Car";
  final String addresses="com.acme.Person.addresses";
  final String parts="com.acme.Car.parts";
  Properties p=createProperties();
  p.setProperty("hibernate.cache.infinispan.com.acme.Person.cfg","person-cache");
  p.setProperty("hibernate.cache.infinispan.com.acme.Person.eviction.strategy","LRU");
  p.setProperty("hibernate.cache.infinispan.com.acme.Person.eviction.wake_up_interval","2000");
  p.setProperty("hibernate.cache.infinispan.com.acme.Person.eviction.max_entries","5000");
  p.setProperty("hibernate.cache.infinispan.com.acme.Person.expiration.lifespan","60000");
  p.setProperty("hibernate.cache.infinispan.com.acme.Person.expiration.max_idle","30000");
  p.setProperty("hibernate.cache.infinispan.entity.cfg","myentity-cache");
  p.setProperty("hibernate.cache.infinispan.entity.eviction.strategy","LIRS");
  p.setProperty("hibernate.cache.infinispan.entity.eviction.wake_up_interval","3000");
  p.setProperty("hibernate.cache.infinispan.entity.eviction.max_entries","20000");
  p.setProperty("hibernate.cache.infinispan.com.acme.Person.addresses.cfg","addresses-cache");
  p.setProperty("hibernate.cache.infinispan.com.acme.Person.addresses.eviction.strategy","LIRS");
  p.setProperty("hibernate.cache.infinispan.com.acme.Person.addresses.eviction.wake_up_interval","2500");
  p.setProperty("hibernate.cache.infinispan.com.acme.Person.addresses.eviction.max_entries","5500");
  p.setProperty("hibernate.cache.infinispan.com.acme.Person.addresses.expiration.lifespan","65000");
  p.setProperty("hibernate.cache.infinispan.com.acme.Person.addresses.expiration.max_idle","35000");
  p.setProperty("hibernate.cache.infinispan.collection.cfg","mycollection-cache");
  p.setProperty("hibernate.cache.infinispan.collection.eviction.strategy","LRU");
  p.setProperty("hibernate.cache.infinispan.collection.eviction.wake_up_interval","3500");
  p.setProperty("hibernate.cache.infinispan.collection.eviction.max_entries","25000");
  InfinispanRegionFactory factory=createRegionFactory(p);
  try {
    EmbeddedCacheManager manager=factory.getCacheManager();
    assertFalse(manager.getCacheManagerConfiguration().globalJmxStatistics().enabled());
    assertNotNull(factory.getTypeOverrides().get(person));
    assertFalse(factory.getDefinedConfigurations().contains(person));
    assertNotNull(factory.getTypeOverrides().get(addresses));
    assertFalse(factory.getDefinedConfigurations().contains(addresses));
    AdvancedCache cache;
    EntityRegionImpl region=(EntityRegionImpl)factory.buildEntityRegion(person,p,null);
    assertNotNull(factory.getTypeOverrides().get(person));
    assertTrue(factory.getDefinedConfigurations().contains(person));
    assertNull(factory.getTypeOverrides().get(address));
    cache=region.getCache();
    Configuration cacheCfg=cache.getCacheConfiguration();
    assertEquals(EvictionStrategy.LRU,cacheCfg.eviction().strategy());
    assertEquals(2000,cacheCfg.expiration().wakeUpInterval());
    assertEquals(5000,cacheCfg.eviction().maxEntries());
    assertEquals(60000,cacheCfg.expiration().lifespan());
    assertEquals(30000,cacheCfg.expiration().maxIdle());
    assertFalse(cacheCfg.jmxStatistics().enabled());
    region=(EntityRegionImpl)factory.buildEntityRegion(address,p,null);
    assertNotNull(factory.getTypeOverrides().get(person));
    assertTrue(factory.getDefinedConfigurations().contains(person));
    assertNull(factory.getTypeOverrides().get(address));
    cache=region.getCache();
    cacheCfg=cache.getCacheConfiguration();
    assertEquals(EvictionStrategy.LIRS,cacheCfg.eviction().strategy());
    assertEquals(3000,cacheCfg.expiration().wakeUpInterval());
    assertEquals(20000,cacheCfg.eviction().maxEntries());
    assertFalse(cacheCfg.jmxStatistics().enabled());
    region=(EntityRegionImpl)factory.buildEntityRegion(car,p,null);
    assertNotNull(factory.getTypeOverrides().get(person));
    assertTrue(factory.getDefinedConfigurations().contains(person));
    assertNull(factory.getTypeOverrides().get(address));
    cache=region.getCache();
    cacheCfg=cache.getCacheConfiguration();
    assertEquals(EvictionStrategy.LIRS,cacheCfg.eviction().strategy());
    assertEquals(3000,cacheCfg.expiration().wakeUpInterval());
    assertEquals(20000,cacheCfg.eviction().maxEntries());
    assertFalse(cacheCfg.jmxStatistics().enabled());
    CollectionRegionImpl collectionRegion=(CollectionRegionImpl)factory.buildCollectionRegion(addresses,p,null);
    assertNotNull(factory.getTypeOverrides().get(addresses));
    assertTrue(factory.getDefinedConfigurations().contains(person));
    assertNull(factory.getTypeOverrides().get(parts));
    cache=collectionRegion.getCache();
    cacheCfg=cache.getCacheConfiguration();
    assertEquals(EvictionStrategy.LIRS,cacheCfg.eviction().strategy());
    assertEquals(2500,cacheCfg.expiration().wakeUpInterval());
    assertEquals(5500,cacheCfg.eviction().maxEntries());
    assertEquals(65000,cacheCfg.expiration().lifespan());
    assertEquals(35000,cacheCfg.expiration().maxIdle());
    assertFalse(cacheCfg.jmxStatistics().enabled());
    collectionRegion=(CollectionRegionImpl)factory.buildCollectionRegion(parts,p,null);
    assertNotNull(factory.getTypeOverrides().get(addresses));
    assertTrue(factory.getDefinedConfigurations().contains(addresses));
    assertNull(factory.getTypeOverrides().get(parts));
    cache=collectionRegion.getCache();
    cacheCfg=cache.getCacheConfiguration();
    assertEquals(EvictionStrategy.LRU,cacheCfg.eviction().strategy());
    assertEquals(3500,cacheCfg.expiration().wakeUpInterval());
    assertEquals(25000,cacheCfg.eviction().maxEntries());
    assertFalse(cacheCfg.jmxStatistics().enabled());
    collectionRegion=(CollectionRegionImpl)factory.buildCollectionRegion(parts,p,null);
    assertNotNull(factory.getTypeOverrides().get(addresses));
    assertTrue(factory.getDefinedConfigurations().contains(addresses));
    assertNull(factory.getTypeOverrides().get(parts));
    cache=collectionRegion.getCache();
    cacheCfg=cache.getCacheConfiguration();
    assertEquals(EvictionStrategy.LRU,cacheCfg.eviction().strategy());
    assertEquals(3500,cacheCfg.expiration().wakeUpInterval());
    assertEquals(25000,cacheCfg.eviction().maxEntries());
    assertFalse(cacheCfg.jmxStatistics().enabled());
  }
  finally {
    factory.stop();
  }
}
