{
  final SqlStatementLogger statementLogger=session.getFactory().getServiceRegistry().getService(JdbcServices.class).getSqlStatementLogger();
  final SessionEventListenerManager statsCollector=session.getEventListenerManager();
  final WorkExecutorVisitable<IntegralDataTypeHolder> work=new AbstractReturningWork<IntegralDataTypeHolder>(){
    @Override public IntegralDataTypeHolder execute(    Connection connection) throws SQLException {
      IntegralDataTypeHolder value=IdentifierGeneratorHelper.getIntegralDataTypeHolder(returnClass);
      int rows;
      do {
        final PreparedStatement queryPreparedStatement=prepareStatement(connection,query,statementLogger,statsCollector);
        try {
          final ResultSet rs=executeQuery(queryPreparedStatement,statsCollector);
          boolean isInitialized=rs.next();
          if (!isInitialized) {
            value.initialize(0);
            final PreparedStatement insertPreparedStatement=prepareStatement(connection,insert,statementLogger,statsCollector);
            try {
              value.bind(insertPreparedStatement,1);
              executeUpdate(insertPreparedStatement,statsCollector);
            }
  finally {
              insertPreparedStatement.close();
            }
          }
 else {
            value.initialize(rs,0);
          }
          rs.close();
        }
 catch (        SQLException sqle) {
          LOG.unableToReadOrInitHiValue(sqle);
          throw sqle;
        }
 finally {
          queryPreparedStatement.close();
        }
        final PreparedStatement updatePreparedStatement=prepareStatement(connection,update,statementLogger,statsCollector);
        try {
          value.copy().increment().bind(updatePreparedStatement,1);
          value.bind(updatePreparedStatement,2);
          rows=executeUpdate(updatePreparedStatement,statsCollector);
        }
 catch (        SQLException sqle) {
          LOG.error(LOG.unableToUpdateHiValue(tableName),sqle);
          throw sqle;
        }
 finally {
          updatePreparedStatement.close();
        }
      }
 while (rows == 0);
      return value;
    }
  }
;
  if (maxLo < 1) {
    IntegralDataTypeHolder value=null;
    while (value == null || value.lt(1)) {
      value=session.getTransactionCoordinator().getTransaction().createIsolationDelegate().delegateWork(work,true);
    }
    return value.makeValue();
  }
  return hiloOptimizer.generate(new AccessCallback(){
    public IntegralDataTypeHolder getNextValue(){
      return session.getTransactionCoordinator().getTransaction().createIsolationDelegate().delegateWork(work,true);
    }
    @Override public String getTenantIdentifier(){
      return session.getTenantIdentifier();
    }
  }
);
}
