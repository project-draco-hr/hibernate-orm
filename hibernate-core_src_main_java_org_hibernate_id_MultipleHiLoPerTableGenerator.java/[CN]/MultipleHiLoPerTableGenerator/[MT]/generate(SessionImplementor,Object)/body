{
  final ReturningWork<IntegralDataTypeHolder> work=new ReturningWork<IntegralDataTypeHolder>(){
    @Override public IntegralDataTypeHolder execute(    Connection connection) throws SQLException {
      IntegralDataTypeHolder value=IdentifierGeneratorHelper.getIntegralDataTypeHolder(returnClass);
      SQLStatementLogger statementLogger=session.getFactory().getServiceRegistry().getService(JdbcServices.class).getSqlStatementLogger();
      int rows;
      do {
        statementLogger.logStatement(query,FormatStyle.BASIC.getFormatter());
        PreparedStatement qps=connection.prepareStatement(query);
        PreparedStatement ips=null;
        try {
          ResultSet rs=qps.executeQuery();
          boolean isInitialized=rs.next();
          if (!isInitialized) {
            value.initialize(0);
            statementLogger.logStatement(insert,FormatStyle.BASIC.getFormatter());
            ips=connection.prepareStatement(insert);
            value.bind(ips,1);
            ips.execute();
          }
 else {
            value.initialize(rs,0);
          }
          rs.close();
        }
 catch (        SQLException sqle) {
          log.error("could not read or init a hi value",sqle);
          throw sqle;
        }
 finally {
          if (ips != null) {
            ips.close();
          }
          qps.close();
        }
        statementLogger.logStatement(update,FormatStyle.BASIC.getFormatter());
        PreparedStatement ups=connection.prepareStatement(update);
        try {
          value.copy().increment().bind(ups,1);
          value.bind(ups,2);
          rows=ups.executeUpdate();
        }
 catch (        SQLException sqle) {
          log.error("could not update hi value in: " + tableName,sqle);
          throw sqle;
        }
 finally {
          ups.close();
        }
      }
 while (rows == 0);
      return value;
    }
  }
;
  if (maxLo < 1) {
    IntegralDataTypeHolder value=null;
    while (value == null || value.lt(1)) {
      value=session.getTransactionCoordinator().getTransaction().createIsolationDelegate().delegateWork(work,true);
    }
    return value.makeValue();
  }
  return hiloOptimizer.generate(new AccessCallback(){
    public IntegralDataTypeHolder getNextValue(){
      return session.getTransactionCoordinator().getTransaction().createIsolationDelegate().delegateWork(work,true);
    }
  }
);
}
