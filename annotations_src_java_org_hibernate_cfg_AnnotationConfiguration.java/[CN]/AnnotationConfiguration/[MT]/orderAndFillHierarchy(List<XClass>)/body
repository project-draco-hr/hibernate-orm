{
  List<XClass> copy=new ArrayList<XClass>(original);
  for (  XClass clazz : original) {
    XClass superClass=clazz.getSuperclass();
    while (superClass != null && !reflectionManager.equals(superClass,Object.class) && !copy.contains(superClass)) {
      if (superClass.isAnnotationPresent(Entity.class) || superClass.isAnnotationPresent(MappedSuperclass.class)) {
        copy.add(superClass);
      }
      superClass=superClass.getSuperclass();
    }
  }
  List<XClass> workingCopy=new ArrayList<XClass>(copy);
  List<XClass> newList=new ArrayList<XClass>(copy.size());
  while (workingCopy.size() > 0) {
    XClass clazz=workingCopy.get(0);
    orderHierarchy(workingCopy,newList,copy,clazz);
  }
  return newList;
}
