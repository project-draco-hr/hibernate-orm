{
  Type[] types=compositeType.getSubtypes();
  String[] propertyNames=compositeType.getPropertyNames();
  int begin=0;
  for (int i=0; i < types.length; i++) {
    int length=types[i].getColumnSpan(getFactory());
    String[] lhsColumns=ArrayHelper.slice(cols,begin,length);
    if (types[i].isAssociationType()) {
      AssociationType associationType=(AssociationType)types[i];
      String[] aliasedLhsColumns=StringHelper.qualify(alias,lhsColumns);
      String subpath=subPath(path,propertyNames[i]);
      final boolean[] propertyNullability=compositeType.getPropertyNullability();
      final int joinType=getJoinType(associationType,compositeType.getFetchMode(i),subpath,persister.getTableName(),lhsColumns,propertyNullability == null || propertyNullability[i],currentDepth,compositeType.getCascadeStyle(i));
      addAssociationToJoinTreeIfNecessary(associationType,aliasedLhsColumns,alias,subpath,currentDepth,joinType);
    }
 else     if (types[i].isComponentType()) {
      String subpath=subPath(path,propertyNames[i]);
      walkCompositeElementTree((AbstractComponentType)types[i],lhsColumns,persister,alias,subpath,currentDepth);
    }
    begin+=length;
  }
}
