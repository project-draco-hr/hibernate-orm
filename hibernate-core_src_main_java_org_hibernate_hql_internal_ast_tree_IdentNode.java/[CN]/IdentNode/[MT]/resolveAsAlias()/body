{
  final FromElement element=getWalker().getCurrentFromClause().getFromElement(getText());
  if (element == null) {
    return false;
  }
  setType(SqlTokenTypes.ALIAS_REF);
  setFromElement(element);
  String[] columnExpressions=element.getIdentityColumns();
  if (!isFromElementUpdateOrDeleteRoot(element)) {
    if (StringHelper.isNotEmpty(element.getTableAlias())) {
      columnExpressions=StringHelper.qualifyIfNot(element.getTableAlias(),columnExpressions);
    }
  }
  final boolean isInNonDistinctCount=getWalker().isInCount() && !getWalker().isInCountDistinct();
  final boolean isCompositeValue=columnExpressions.length > 1;
  if (isCompositeValue) {
    if (isInNonDistinctCount && !getWalker().getSessionFactoryHelper().getFactory().getDialect().supportsTupleCounts()) {
      setText(columnExpressions[0]);
    }
 else {
      String joinedFragment=StringHelper.join(", ",columnExpressions);
      final boolean shouldSkipWrappingInParenthesis=getWalker().isInCount() || getWalker().getCurrentTopLevelClauseType() == HqlSqlTokenTypes.ORDER || getWalker().getCurrentTopLevelClauseType() == HqlSqlTokenTypes.GROUP;
      if (!shouldSkipWrappingInParenthesis) {
        joinedFragment="(" + joinedFragment + ")";
      }
      setText(joinedFragment);
    }
    return true;
  }
 else   if (columnExpressions.length > 0) {
    setText(columnExpressions[0]);
    return true;
  }
  return false;
}
