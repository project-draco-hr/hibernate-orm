{
  final Type type=property.getValue().getType();
  final NonIdentifierAttributeNature nature=decode(type);
  boolean alwaysDirtyCheck=type.isAssociationType() && ((AssociationType)type).isAlwaysDirtyChecked();
switch (nature) {
case BASIC:
{
      return new EntityBasedBasicAttribute(persister,sessionFactory,attributeNumber,property.getName(),type,new BaselineAttributeInformation.Builder().setLazy(lazyAvailable && property.isLazy()).setInsertable(property.isInsertable()).setUpdateable(property.isUpdateable()).setInsertGenerated(property.getGeneration() == PropertyGeneration.INSERT || property.getGeneration() == PropertyGeneration.ALWAYS).setUpdateGenerated(property.getGeneration() == PropertyGeneration.ALWAYS).setNullable(property.isOptional()).setDirtyCheckable(alwaysDirtyCheck || property.isUpdateable()).setVersionable(property.isOptimisticLocked()).setCascadeStyle(property.getCascadeStyle()).setFetchMode(property.getValue().getFetchMode()).createInformation());
    }
case COMPOSITE:
{
    return new EntityBasedCompositeAttribute(persister,sessionFactory,attributeNumber,property.getName(),(CompositeType)type,new BaselineAttributeInformation.Builder().setLazy(lazyAvailable && property.isLazy()).setInsertable(property.isInsertable()).setUpdateable(property.isUpdateable()).setInsertGenerated(property.getGeneration() == PropertyGeneration.INSERT || property.getGeneration() == PropertyGeneration.ALWAYS).setUpdateGenerated(property.getGeneration() == PropertyGeneration.ALWAYS).setNullable(property.isOptional()).setDirtyCheckable(alwaysDirtyCheck || property.isUpdateable()).setVersionable(property.isOptimisticLocked()).setCascadeStyle(property.getCascadeStyle()).setFetchMode(property.getValue().getFetchMode()).createInformation());
  }
case ENTITY:
case ANY:
case COLLECTION:
{
  return new EntityBasedAssociationAttribute(persister,sessionFactory,attributeNumber,property.getName(),(AssociationType)type,new BaselineAttributeInformation.Builder().setLazy(lazyAvailable && property.isLazy()).setInsertable(property.isInsertable()).setUpdateable(property.isUpdateable()).setInsertGenerated(property.getGeneration() == PropertyGeneration.INSERT || property.getGeneration() == PropertyGeneration.ALWAYS).setUpdateGenerated(property.getGeneration() == PropertyGeneration.ALWAYS).setNullable(property.isOptional()).setDirtyCheckable(alwaysDirtyCheck || property.isUpdateable()).setVersionable(property.isOptimisticLocked()).setCascadeStyle(property.getCascadeStyle()).setFetchMode(property.getValue().getFetchMode()).createInformation());
}
default :
{
throw new HibernateException("Internal error");
}
}
}
