{
  this.identifierType=type;
  boolean forceTableUse=ConfigurationHelper.getBoolean(FORCE_TBL_PARAM,params,false);
  final String sequenceName=determineSequenceName(params,dialect);
  final int initialValue=determineInitialValue(params);
  int incrementSize=determineIncrementSize(params);
  final String optimizationStrategy=determineOptimizationStrategy(params,incrementSize);
  incrementSize=determineAdjustedIncrementSize(optimizationStrategy,incrementSize);
  if (dialect.supportsSequences() && !forceTableUse) {
    if (OptimizerFactory.POOL.equals(optimizationStrategy) && !dialect.supportsPooledSequences()) {
      forceTableUse=true;
      log.info("Forcing table use for sequence-style generator due to pooled optimizer selection where db does not support pooled sequences");
    }
  }
  this.databaseStructure=buildDatabaseStructure(type,params,dialect,forceTableUse,sequenceName,initialValue,incrementSize);
  this.optimizer=OptimizerFactory.buildOptimizer(optimizationStrategy,identifierType.getReturnedClass(),incrementSize,ConfigurationHelper.getInt(INITIAL_PARAM,params,-1));
  this.databaseStructure.prepare(optimizer);
}
