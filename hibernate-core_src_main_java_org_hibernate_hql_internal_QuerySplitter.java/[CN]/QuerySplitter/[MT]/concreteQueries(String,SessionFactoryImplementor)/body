{
  String[] tokens=StringHelper.split(StringHelper.WHITESPACE + "(),",query,true);
  if (tokens.length == 0)   return new String[]{query};
  ArrayList placeholders=new ArrayList();
  ArrayList replacements=new ArrayList();
  StringBuilder templateQuery=new StringBuilder(40);
  int start=getStartingPositionFor(tokens,templateQuery);
  int count=0;
  String next=null;
  String last=tokens[start - 1].toLowerCase();
  for (int i=start; i < tokens.length; i++) {
    String token=tokens[i];
    if (ParserHelper.isWhitespace(token)) {
      templateQuery.append(token);
      continue;
    }
    next=nextNonWhite(tokens,i).toLowerCase();
    boolean process=isJavaIdentifier(token) && isPossiblyClassName(last,next);
    last=token.toLowerCase();
    if (process) {
      String importedClassName=getImportedClass(token,factory);
      if (importedClassName != null) {
        String[] implementors=factory.getImplementors(importedClassName);
        token="$clazz" + count++ + "$";
        if (implementors != null) {
          placeholders.add(token);
          replacements.add(implementors);
        }
      }
    }
    templateQuery.append(token);
  }
  String[] results=StringHelper.multiply(templateQuery.toString(),placeholders.iterator(),replacements.iterator());
  if (results.length == 0) {
    LOG.noPersistentClassesFound(query);
  }
  return results;
}
