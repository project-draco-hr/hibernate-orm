{
  Join join=new Join();
  join.setPersistentClass(persistentClass);
  String schema;
  String catalog;
  String table;
  String realTable;
  UniqueConstraint[] uniqueConstraintsAnn;
  if (secondaryTable != null) {
    schema=secondaryTable.schema();
    catalog=secondaryTable.catalog();
    table=secondaryTable.name();
    realTable=mappings.getNamingStrategy().tableName(table);
    uniqueConstraintsAnn=secondaryTable.uniqueConstraints();
  }
 else   if (joinTable != null) {
    schema=joinTable.schema();
    catalog=joinTable.catalog();
    table=joinTable.name();
    realTable=mappings.getNamingStrategy().tableName(table);
    uniqueConstraintsAnn=joinTable.uniqueConstraints();
  }
 else {
    throw new AssertionFailure("Both JoinTable and SecondaryTable are null");
  }
  List uniqueConstraints=new ArrayList(uniqueConstraintsAnn == null ? 0 : uniqueConstraintsAnn.length);
  if (uniqueConstraintsAnn != null && uniqueConstraintsAnn.length != 0) {
    for (    UniqueConstraint uc : uniqueConstraintsAnn) {
      uniqueConstraints.add(uc.columnNames());
    }
  }
  Table tableMapping=TableBinder.fillTable(schema,catalog,realTable,table,false,uniqueConstraints,null,null,mappings);
  join.setTable(tableMapping);
  Object joinColumns=null;
  if (secondaryTable != null) {
    joinColumns=secondaryTable.pkJoinColumns();
  }
 else   if (joinTable != null) {
    joinColumns=joinTable.joinColumns();
  }
  log.info("Adding secondary table to entity {} -> {}",persistentClass.getEntityName(),join.getTable().getName());
  org.hibernate.annotations.Table matchingTable=findMatchingComplimentTableAnnotation(join);
  if (matchingTable != null) {
    join.setSequentialSelect(FetchMode.JOIN != matchingTable.fetch());
    join.setInverse(matchingTable.inverse());
    join.setOptional(matchingTable.optional());
    if (!BinderHelper.isDefault(matchingTable.sqlInsert().sql())) {
      join.setCustomSQLInsert(matchingTable.sqlInsert().sql().trim(),matchingTable.sqlInsert().callable(),ExecuteUpdateResultCheckStyle.parse(matchingTable.sqlInsert().check().toString().toLowerCase()));
    }
    if (!BinderHelper.isDefault(matchingTable.sqlUpdate().sql())) {
      join.setCustomSQLUpdate(matchingTable.sqlUpdate().sql().trim(),matchingTable.sqlUpdate().callable(),ExecuteUpdateResultCheckStyle.parse(matchingTable.sqlUpdate().check().toString().toLowerCase()));
    }
    if (!BinderHelper.isDefault(matchingTable.sqlDelete().sql())) {
      join.setCustomSQLDelete(matchingTable.sqlDelete().sql().trim(),matchingTable.sqlDelete().callable(),ExecuteUpdateResultCheckStyle.parse(matchingTable.sqlDelete().check().toString().toLowerCase()));
    }
  }
 else {
    join.setSequentialSelect(false);
    join.setInverse(false);
    join.setOptional(true);
  }
  if (noDelayInPkColumnCreation) {
    createPrimaryColumnsToSecondaryTable(joinColumns,propertyHolder,join);
  }
 else {
    secondaryTables.put(realTable,join);
    secondaryTableJoins.put(realTable,joinColumns);
  }
  return join;
}
