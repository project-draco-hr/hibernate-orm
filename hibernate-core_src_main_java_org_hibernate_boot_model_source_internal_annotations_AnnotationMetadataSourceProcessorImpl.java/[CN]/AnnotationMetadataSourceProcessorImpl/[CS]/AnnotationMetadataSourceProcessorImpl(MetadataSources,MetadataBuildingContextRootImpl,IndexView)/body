{
  this.rootMetadataBuildingContext=rootMetadataBuildingContext;
  this.jandexView=jandexView;
  this.reflectionManager=rootMetadataBuildingContext.getBuildingOptions().getReflectionManager();
  if (CollectionHelper.isNotEmpty(sources.getAnnotatedPackages())) {
    annotatedPackages.addAll(sources.getAnnotatedPackages());
  }
  final AttributeConverterManager attributeConverterManager=new AttributeConverterManager(rootMetadataBuildingContext);
  final JPAMetadataProvider jpaMetadataProvider=(JPAMetadataProvider)((MetadataProviderInjector)reflectionManager).getMetadataProvider();
  for (  Binding xmlBinding : sources.getXmlBindings()) {
    if (!org.dom4j.Document.class.isInstance(xmlBinding.getRoot())) {
      continue;
    }
    org.dom4j.Document dom4jDocument=(Document)xmlBinding.getRoot();
    final List<String> classNames=jpaMetadataProvider.getXMLContext().addDocument(dom4jDocument);
    for (    String className : classNames) {
      xClasses.add(toXClass(className,reflectionManager));
    }
  }
  jpaMetadataProvider.getXMLContext().applyDiscoveredAttributeConverters(attributeConverterManager);
  final ClassLoaderService cls=rootMetadataBuildingContext.getBuildingOptions().getServiceRegistry().getService(ClassLoaderService.class);
  for (  String className : sources.getAnnotatedClassNames()) {
    final Class clazz=cls.classForName(className);
    final XClass xClass=reflectionManager.toXClass(clazz);
    if (xClass.isAnnotationPresent(Converter.class)) {
      attributeConverterManager.addAttributeConverter(clazz);
    }
 else {
      xClasses.add(xClass);
    }
  }
  for (  Class annotateClass : sources.getAnnotatedClasses()) {
    final XClass xClass=reflectionManager.toXClass(annotateClass);
    if (xClass.isAnnotationPresent(Converter.class)) {
      attributeConverterManager.addAttributeConverter(annotateClass);
    }
 else {
      xClasses.add(xClass);
    }
  }
}
