{
  EntityManager em=entityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  Customer c1=new Customer();
  c1.setId("c1");
  c1.setAge(18);
  c1.setName("Bob");
  em.persist(c1);
  em.getTransaction().commit();
  em.close();
  em=entityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  final CriteriaBuilder builder=em.getCriteriaBuilder();
  CriteriaQuery<Tuple> criteria=builder.createTupleQuery();
  Root<Customer> customerRoot=criteria.from(Customer.class);
  criteria.multiselect(customerRoot.get(Customer_.name),customerRoot.get(Customer_.age));
  List<Tuple> results=em.createQuery(criteria).getResultList();
  assertEquals(1,results.size());
  Tuple tuple=results.get(0);
  try {
    tuple.get(99);
    fail("99 is invalid index");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    tuple.get(99,String.class);
    fail("99 is invalid index");
  }
 catch (  IllegalArgumentException expected) {
  }
  tuple.get(0,String.class);
  tuple.get(1,Integer.class);
  try {
    tuple.get(0,java.util.Date.class);
    fail("Date is invalid type");
  }
 catch (  IllegalArgumentException expected) {
  }
  em.getTransaction().commit();
  em.close();
  em=entityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  em.createQuery("delete Customer").executeUpdate();
  em.getTransaction().commit();
  em.close();
}
