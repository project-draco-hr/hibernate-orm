{
  jpaqlQuery.append("select ");
  if (isDistinct()) {
    jpaqlQuery.append("distinct ");
  }
  if (getSelection() == null) {
    final Root root=getRoots().iterator().next();
    jpaqlQuery.append(((Renderable)root).renderProjection(renderingContext));
  }
 else {
    jpaqlQuery.append(((Renderable)getSelection()).renderProjection(renderingContext));
  }
  jpaqlQuery.append(" from ");
  String sep="";
  for (  Root root : getRoots()) {
    ((TableExpressionMapper)root).prepareAlias(renderingContext);
    jpaqlQuery.append(sep);
    jpaqlQuery.append(((TableExpressionMapper)root).renderTableExpression(renderingContext));
    sep=", ";
  }
  for (  Root root : getRoots()) {
    renderJoins(jpaqlQuery,renderingContext,root.getJoins());
    renderFetches(jpaqlQuery,renderingContext,root.getFetches());
  }
  if (getRestriction() != null) {
    jpaqlQuery.append(" where ").append(((Renderable)getRestriction()).render(renderingContext));
  }
  if (!getGroupings().isEmpty()) {
    jpaqlQuery.append(" group by ");
    sep="";
    for (    Expression grouping : getGroupings()) {
      jpaqlQuery.append(sep).append(((Renderable)grouping).render(renderingContext));
      sep=", ";
    }
    if (getHaving() != null) {
      jpaqlQuery.append(" having ").append(((Renderable)getHaving()).render(renderingContext));
    }
  }
}
