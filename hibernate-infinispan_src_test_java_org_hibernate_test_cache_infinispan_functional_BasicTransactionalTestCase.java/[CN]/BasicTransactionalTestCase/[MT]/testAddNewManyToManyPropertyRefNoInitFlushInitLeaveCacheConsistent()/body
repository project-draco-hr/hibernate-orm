{
  Statistics stats=sessionFactory().getStatistics();
  stats.clear();
  SecondLevelCacheStatistics cStats=stats.getSecondLevelCacheStatistics(Item.class.getName() + ".items");
  OtherItem otherItem=null;
  Transaction txn=null;
  Session s=null;
  beginTx();
  try {
    s=openSession();
    txn=s.beginTransaction();
    otherItem=new OtherItem();
    otherItem.setName("steve");
    s.save(otherItem);
    txn.commit();
    s.close();
  }
 catch (  Exception e) {
    setRollbackOnlyTx(e);
  }
 finally {
    commitOrRollbackTx();
  }
  Item item=new Item();
  item.setName("element");
  item.setDescription("element Item");
  beginTx();
  try {
    s=openSession();
    txn=s.beginTransaction();
    otherItem=(OtherItem)s.get(OtherItem.class,otherItem.getId());
    assertFalse(Hibernate.isInitialized(otherItem.getBagOfItems()));
    otherItem.addItemToBag(item);
    assertFalse(Hibernate.isInitialized(otherItem.getBagOfItems()));
    s.persist(item);
    s.flush();
    Hibernate.initialize(otherItem.getBagOfItems());
    setRollbackOnlyTx();
  }
 catch (  Exception e) {
    setRollbackOnlyTxExpected(e);
  }
 finally {
    commitOrRollbackTx();
    if (s != null && s.isOpen()) {
      try {
        s.close();
      }
 catch (      Throwable ignore) {
      }
    }
  }
  beginTx();
  try {
    s=openSession();
    txn=s.beginTransaction();
    otherItem=(OtherItem)s.get(OtherItem.class,otherItem.getId());
    Hibernate.initialize(otherItem.getBagOfItems());
    assertTrue(otherItem.getBagOfItems().isEmpty());
    s.delete(otherItem);
    txn.commit();
    s.close();
  }
 catch (  Exception e) {
    setRollbackOnlyTx(e);
  }
 finally {
    commitOrRollbackTx();
  }
}
