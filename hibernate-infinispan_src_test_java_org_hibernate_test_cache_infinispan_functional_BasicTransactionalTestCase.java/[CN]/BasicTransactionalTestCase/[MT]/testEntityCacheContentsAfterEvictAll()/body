{
  final List<Citizen> citizens=saveSomeCitizens();
  withTx(tm,new Callable<Void>(){
    @Override public Void call() throws Exception {
      Session s=openSession();
      Transaction tx=s.beginTransaction();
      Cache cache=s.getSessionFactory().getCache();
      Statistics stats=sessionFactory().getStatistics();
      SecondLevelCacheStatistics slcStats=stats.getSecondLevelCacheStatistics(Citizen.class.getName());
      assertTrue("2lc entity cache is expected to contain Citizen id = " + citizens.get(0).getId(),cache.containsEntity(Citizen.class,citizens.get(0).getId()));
      assertTrue("2lc entity cache is expected to contain Citizen id = " + citizens.get(1).getId(),cache.containsEntity(Citizen.class,citizens.get(1).getId()));
      assertEquals(2,slcStats.getPutCount());
      cache.evictEntityRegions();
      assertEquals(0,slcStats.getElementCountInMemory());
      assertFalse("2lc entity cache is expected to not contain Citizen id = " + citizens.get(0).getId(),cache.containsEntity(Citizen.class,citizens.get(0).getId()));
      assertFalse("2lc entity cache is expected to not contain Citizen id = " + citizens.get(1).getId(),cache.containsEntity(Citizen.class,citizens.get(1).getId()));
      Citizen citizen=(Citizen)s.load(Citizen.class,citizens.get(0).getId());
      assertNotNull(citizen);
      assertNotNull(citizen.getFirstname());
      assertEquals(1,slcStats.getMissCount());
      assertEquals(3,slcStats.getPutCount());
      assertEquals(1,slcStats.getElementCountInMemory());
      assertTrue("2lc entity cache is expected to contain Citizen id = " + citizens.get(0).getId(),cache.containsEntity(Citizen.class,citizens.get(0).getId()));
      tx.rollback();
      s.close();
      return null;
    }
  }
);
}
