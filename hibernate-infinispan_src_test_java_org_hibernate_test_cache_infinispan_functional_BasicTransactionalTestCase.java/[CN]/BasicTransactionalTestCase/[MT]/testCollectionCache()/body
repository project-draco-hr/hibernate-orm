{
  final Statistics stats=sessionFactory().getStatistics();
  stats.clear();
  final Item item=new Item("chris","Chris's Item");
  final Item another=new Item("another","Owned Item");
  item.addItem(another);
  withTx(tm,new Callable<Void>(){
    @Override public Void call() throws Exception {
      Session s=openSession();
      s.getTransaction().begin();
      s.persist(item);
      s.persist(another);
      s.getTransaction().commit();
      s.close();
      return null;
    }
  }
);
  withTx(tm,new Callable<Void>(){
    @Override public Void call() throws Exception {
      Session s=openSession();
      Item loaded=(Item)s.load(Item.class,item.getId());
      assertEquals(1,loaded.getItems().size());
      s.close();
      return null;
    }
  }
);
  withTx(tm,new Callable<Void>(){
    @Override public Void call() throws Exception {
      Session s=openSession();
      SecondLevelCacheStatistics cStats=stats.getSecondLevelCacheStatistics(Item.class.getName() + ".items");
      Item loadedWithCachedCollection=(Item)s.load(Item.class,item.getId());
      stats.logSummary();
      assertEquals(item.getName(),loadedWithCachedCollection.getName());
      assertEquals(item.getItems().size(),loadedWithCachedCollection.getItems().size());
      assertEquals(1,cStats.getHitCount());
      Map cacheEntries=cStats.getEntries();
      assertEquals(1,cacheEntries.size());
      s.close();
      return null;
    }
  }
);
}
