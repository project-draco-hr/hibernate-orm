{
  final Element relIdMapping=new DefaultElement("properties");
  final Element origIdMapping=new DefaultElement("composite-id");
  final Property idProp=pc.getIdentifierProperty();
  final Component idMapper=pc.getIdentifierMapper();
  if (idMapper == null && idProp == null) {
    return null;
  }
  SimpleIdMapperBuilder mapper;
  if (idMapper != null) {
    final Class componentClass=ReflectionTools.loadClass(((Component)pc.getIdentifier()).getComponentClassName(),mainGenerator.getClassLoaderService());
    mapper=new MultipleIdMapper(componentClass);
    if (!addIdProperties(relIdMapping,(Iterator<Property>)idMapper.getPropertyIterator(),mapper,false,audited)) {
      return null;
    }
    if (!addIdProperties(origIdMapping,(Iterator<Property>)idMapper.getPropertyIterator(),null,true,audited)) {
      return null;
    }
  }
 else   if (idProp.isComposite()) {
    final Component idComponent=(Component)idProp.getValue();
    final Class embeddableClass=ReflectionTools.loadClass(idComponent.getComponentClassName(),mainGenerator.getClassLoaderService());
    mapper=new EmbeddedIdMapper(getIdPropertyData(idProp),embeddableClass);
    if (!addIdProperties(relIdMapping,(Iterator<Property>)idComponent.getPropertyIterator(),mapper,false,audited)) {
      return null;
    }
    if (!addIdProperties(origIdMapping,(Iterator<Property>)idComponent.getPropertyIterator(),null,true,audited)) {
      return null;
    }
  }
 else {
    mapper=new SingleIdMapper();
    mainGenerator.getBasicMetadataGenerator().addBasic(relIdMapping,getIdPersistentPropertyAuditingData(idProp),idProp.getValue(),mapper,true,false);
    mainGenerator.getBasicMetadataGenerator().addBasic(origIdMapping,getIdPersistentPropertyAuditingData(idProp),idProp.getValue(),null,true,true);
  }
  origIdMapping.addAttribute("name",mainGenerator.getVerEntCfg().getOriginalIdPropName());
  mainGenerator.addRevisionInfoRelation(origIdMapping);
  return new IdMappingData(mapper,origIdMapping,relIdMapping);
}
