{
  clearCounts();
  Contract c=new Contract(null,"gavin","phone");
  ContractVariation cv1=new ContractVariation(1,c);
  cv1.setText("expensive");
  ContractVariation cv2=new ContractVariation(2,c);
  cv2.setText("more expensive");
  Party party=new Party("party1");
  c.addParty(party);
  Session s=openSession();
  Transaction t=s.beginTransaction();
  s.persist(c);
  t.commit();
  s.close();
  assertInsertCount(4);
  assertUpdateCount(0);
  clearCounts();
  party=(Party)c.getParties().iterator().next();
  party.setContract(null);
  s=openSession();
  t=s.beginTransaction();
  s.update(party);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  party=(Party)s.get(Party.class,party.getId());
  assertNotNull(party.getContract());
  t.commit();
  s.close();
  assertUpdateCount(0);
  clearCounts();
  s=openSession();
  t=s.beginTransaction();
  c=(Contract)s.createCriteria(Contract.class).uniqueResult();
  assertEquals(c.getCustomerName(),"gavin");
  assertEquals(c.getVariations().size(),2);
  Iterator it=c.getVariations().iterator();
  cv1=(ContractVariation)it.next();
  assertEquals(cv1.getText(),"expensive");
  cv2=(ContractVariation)it.next();
  assertEquals(cv2.getText(),"more expensive");
  assertEquals(1,c.getParties().size());
  party=(Party)c.getParties().iterator().next();
  assertEquals("party1",party.getName());
  assertSame(c,party.getContract());
  s.delete(c);
  assertEquals(s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult(),new Long(0));
  assertEquals(s.createCriteria(ContractVariation.class).setProjection(Projections.rowCount()).uniqueResult(),new Long(0));
  t.commit();
  s.close();
  assertUpdateCount(0);
  assertDeleteCount(4);
}
