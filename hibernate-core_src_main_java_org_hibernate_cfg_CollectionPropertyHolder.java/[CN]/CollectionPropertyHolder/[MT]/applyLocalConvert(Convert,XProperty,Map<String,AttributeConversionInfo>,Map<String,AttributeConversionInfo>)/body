{
  final AttributeConversionInfo info=new AttributeConversionInfo(convertAnnotation,collectionProperty);
  if (collection.isMap()) {
    boolean specCompliant=StringHelper.isNotEmpty(info.getAttributeName()) && (info.getAttributeName().startsWith("key") || info.getAttributeName().startsWith("value"));
    if (!specCompliant) {
      log.nonCompliantMapConversion(collection.getRole());
    }
  }
  if (StringHelper.isEmpty(info.getAttributeName())) {
    if (canElementBeConverted && canKeyBeConverted) {
      throw new IllegalStateException("@Convert placed on Map attribute [" + collection.getRole() + "] must define attributeName of 'key' or 'value'");
    }
 else     if (canKeyBeConverted) {
      keyAttributeConversionInfoMap.put("",info);
    }
 else     if (canElementBeConverted) {
      elementAttributeConversionInfoMap.put("",info);
    }
  }
 else {
    final String keyPath;
    final String elementPath;
    if (canElementBeConverted && canKeyBeConverted) {
      keyPath=removePrefix(info.getAttributeName(),"key");
      elementPath=removePrefix(info.getAttributeName(),"value");
      if (keyPath == null && elementPath == null) {
        throw new IllegalStateException("@Convert placed on Map attribute [" + collection.getRole() + "] must define attributeName of 'key' or 'value'");
      }
    }
 else     if (canKeyBeConverted) {
      keyPath=removePrefix(info.getAttributeName(),"key",info.getAttributeName());
      elementPath=null;
    }
 else {
      keyPath=null;
      elementPath=removePrefix(info.getAttributeName(),"value",info.getAttributeName());
    }
    if (keyPath != null) {
      keyAttributeConversionInfoMap.put(keyPath,info);
    }
 else     if (elementPath != null) {
      elementAttributeConversionInfoMap.put(elementPath,info);
    }
 else {
      throw new IllegalStateException(String.format(Locale.ROOT,"Could not determine how to apply @Convert(attributeName='%s') to collection [%s]",info.getAttributeName(),collection.getRole()));
    }
  }
}
