{
  File defaultPar=buildDefaultPar();
  File nestedEar=buildNestedEar(defaultPar);
  File nestedEarDir=buildNestedEarDir(defaultPar);
  addPackageToClasspath(nestedEar);
  String jarFileName=nestedEar.toURL().toExternalForm() + "!/defaultpar.par";
  Filter[] filters=getFilters();
  JarVisitor jarVisitor=new JarProtocolVisitor(new URL(jarFileName),filters,"");
  Set entries=jarVisitor.getMatchingEntries()[1];
  assertEquals(3,entries.size());
  Entry entry=new Entry(org.hibernate.jpa.test.pack.defaultpar.ApplicationServer.class.getName(),null);
  assertTrue(entries.contains(entry));
  entry=new Entry(Version.class.getName(),null);
  assertTrue(entries.contains(entry));
  assertNull(((Entry)entries.iterator().next()).getInputStream());
  assertEquals(2,jarVisitor.getMatchingEntries()[2].size());
  for (  Entry localEntry : (Set<Entry>)jarVisitor.getMatchingEntries()[2]) {
    assertNotNull(localEntry.getInputStream());
    localEntry.getInputStream().close();
  }
  jarFileName=nestedEarDir.toURL().toExternalForm() + "!/defaultpar.par";
  filters=getFilters();
  jarVisitor=new JarProtocolVisitor(new URL(jarFileName),filters,"");
  entries=jarVisitor.getMatchingEntries()[1];
  assertEquals(3,entries.size());
  entry=new Entry(org.hibernate.jpa.test.pack.defaultpar.ApplicationServer.class.getName(),null);
  assertTrue(entries.contains(entry));
  entry=new Entry(Version.class.getName(),null);
  assertTrue(entries.contains(entry));
  assertNull(((Entry)entries.iterator().next()).getInputStream());
  assertEquals(2,jarVisitor.getMatchingEntries()[2].size());
  for (  Entry localEntry : (Set<Entry>)jarVisitor.getMatchingEntries()[2]) {
    assertNotNull(localEntry.getInputStream());
    localEntry.getInputStream().close();
  }
}
