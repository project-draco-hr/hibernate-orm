{
  Session s=openSession();
  Transaction t=s.beginTransaction();
  Baz baz=new Baz();
  s.save(baz);
  baz.setDefaults();
  Map topGlarchez=new HashMap();
  baz.setTopGlarchez(topGlarchez);
  Glarch g1=new Glarch();
  g1.setName("g1");
  s.save(g1);
  Glarch g2=new Glarch();
  g2.setName("g2");
  s.save(g2);
  g1.setProxyArray(new GlarchProxy[]{g2});
  topGlarchez.put(new Character('1'),g1);
  topGlarchez.put(new Character('2'),g2);
  Foo foo1=new Foo();
  Foo foo2=new Foo();
  s.save(foo1);
  s.save(foo2);
  baz.getFooSet().add(foo1);
  baz.getFooSet().add(foo2);
  baz.setFooArray(new FooProxy[]{foo1});
  LockMode lockMode=supportsLockingNullableSideOfJoin(getDialect()) ? LockMode.UPGRADE : LockMode.READ;
  Criteria crit=s.createCriteria(Baz.class);
  crit.createCriteria("topGlarchez").add(Restrictions.isNotNull("name")).createCriteria("proxyArray").add(Restrictions.eqProperty("name","name")).add(Restrictions.eq("name","g2")).add(Restrictions.gt("x",new Integer(-666)));
  crit.createCriteria("fooSet").add(Restrictions.isNull("null")).add(Restrictions.eq("string","a string")).add(Restrictions.lt("integer",new Integer(-665)));
  crit.createCriteria("fooArray").add(Restrictions.eq("string","a string")).setLockMode(lockMode);
  List list=crit.list();
  assertTrue(list.size() == 2);
  s.createCriteria(Glarch.class).setLockMode(LockMode.UPGRADE).list();
  s.createCriteria(Glarch.class).setLockMode(Criteria.ROOT_ALIAS,LockMode.UPGRADE).list();
  g2.setName(null);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  list=s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list();
  assertEquals(list.size(),0);
  list=s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list();
  assertEquals(new HashSet(list).size(),1);
  list=s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet",2)).list();
  assertEquals(new HashSet(list).size(),1);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  crit=s.createCriteria(Baz.class).setLockMode(lockMode);
  crit.createCriteria("topGlarchez").add(Restrictions.gt("x",new Integer(-666)));
  crit.createCriteria("fooSet").add(Restrictions.isNull("null"));
  list=crit.list();
  assertTrue(list.size() == 4);
  baz=(Baz)crit.uniqueResult();
  assertTrue(Hibernate.isInitialized(baz.getTopGlarchez()));
  assertTrue(!Hibernate.isInitialized(baz.getFooSet()));
  list=s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name","xxx")).list();
  assertTrue(list.size() == 0);
  list=s.createCriteria(Baz.class).createAlias("fooSet","foo").createAlias("foo.foo","foo2").setLockMode("foo2",lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name","xxx")).list();
  assertTrue(list.size() == 0);
  t.commit();
  s.close();
  s=openSession();
  t=s.beginTransaction();
  crit=s.createCriteria(Baz.class);
  crit.createCriteria("topGlarchez").add(Restrictions.isNotNull("name"));
  crit.createCriteria("fooSet").add(Restrictions.isNull("null"));
  list=crit.list();
  assertTrue(list.size() == 2);
  baz=(Baz)crit.uniqueResult();
  assertTrue(Hibernate.isInitialized(baz.getTopGlarchez()));
  assertTrue(!Hibernate.isInitialized(baz.getFooSet()));
  s.createCriteria(Child.class).setFetchMode("parent",FetchMode.JOIN).list();
  doDelete(s,"from Glarch g");
  s.delete(s.get(Foo.class,foo1.getKey()));
  s.delete(s.get(Foo.class,foo2.getKey()));
  s.delete(baz);
  t.commit();
  s.close();
}
