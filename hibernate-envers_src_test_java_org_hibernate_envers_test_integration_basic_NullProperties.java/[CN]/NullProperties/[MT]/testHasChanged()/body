{
  List list=getAuditReader().createQuery().forRevisionsOfEntity(BasicTestEntity1.class,false,true).add(AuditEntity.property("str1").hasChanged()).add(AuditEntity.id().eq(id1)).getResultList();
  assertEquals(2,list.size());
  assertEquals(TestTools.makeList(1,3),extractRevisionNumbers(list));
  list=getAuditReader().createQuery().forRevisionsOfEntity(BasicTestEntity1.class,false,true).add(AuditEntity.property("long1").hasChanged()).add(AuditEntity.id().eq(id1)).getResultList();
  assertEquals(1,list.size());
  assertEquals(TestTools.makeList(1),extractRevisionNumbers(list));
  list=getAuditReader().createQuery().forRevisionsOfEntity(BasicTestEntity1.class,false,true).add(AuditEntity.property("str1").hasChanged()).add(AuditEntity.id().eq(id2)).getResultList();
  assertEquals(1,list.size());
  assertEquals(TestTools.makeList(4),extractRevisionNumbers(list));
  list=getAuditReader().createQuery().forRevisionsOfEntity(BasicTestEntity1.class,false,true).add(AuditEntity.property("long1").hasChanged()).add(AuditEntity.id().eq(id2)).getResultList();
  assertEquals(1,list.size());
  assertEquals(TestTools.makeList(2),extractRevisionNumbers(list));
  list=getAuditReader().createQuery().forRevisionsOfEntity(BasicTestEntity1.class,false,true).add(AuditEntity.property("str1").hasChanged()).add(AuditEntity.property("long1").hasChanged()).getResultList();
  assertEquals(1,list.size());
  assertEquals(TestTools.makeList(1),extractRevisionNumbers(list));
}
