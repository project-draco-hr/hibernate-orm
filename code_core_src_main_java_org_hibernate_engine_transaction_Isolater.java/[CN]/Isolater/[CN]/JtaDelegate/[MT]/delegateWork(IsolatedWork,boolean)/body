{
  TransactionManager transactionManager=session.getFactory().getTransactionManager();
  Transaction surroundingTransaction=null;
  Connection connection=null;
  boolean caughtException=false;
  try {
    surroundingTransaction=transactionManager.suspend();
    if (log.isDebugEnabled()) {
      log.debug("surrounding JTA transaction suspended [" + surroundingTransaction + "]");
    }
    if (transacted) {
      transactionManager.begin();
    }
    connection=session.getBatcher().openConnection();
    work.doWork(connection);
    session.getBatcher().closeConnection(connection);
    if (transacted) {
      transactionManager.commit();
    }
  }
 catch (  Throwable t) {
    caughtException=true;
    try {
      if (connection != null && !connection.isClosed()) {
        session.getBatcher().closeConnection(connection);
      }
    }
 catch (    Throwable ignore) {
      log.trace("unable to release connection on exception [" + ignore + "]");
    }
    if (transacted) {
      try {
        transactionManager.rollback();
      }
 catch (      Throwable ignore) {
        log.trace("unable to rollback new transaction on exception [" + ignore + "]");
      }
    }
    if (t instanceof HibernateException) {
      throw (HibernateException)t;
    }
 else {
      throw new HibernateException("error performing isolated work",t);
    }
  }
 finally {
    if (surroundingTransaction != null) {
      try {
        transactionManager.resume(surroundingTransaction);
        if (log.isDebugEnabled()) {
          log.debug("surrounding JTA transaction resumed [" + surroundingTransaction + "]");
        }
      }
 catch (      Throwable t) {
        if (!caughtException) {
          throw new HibernateException("unable to resume previously suspended transaction",t);
        }
      }
    }
  }
}
