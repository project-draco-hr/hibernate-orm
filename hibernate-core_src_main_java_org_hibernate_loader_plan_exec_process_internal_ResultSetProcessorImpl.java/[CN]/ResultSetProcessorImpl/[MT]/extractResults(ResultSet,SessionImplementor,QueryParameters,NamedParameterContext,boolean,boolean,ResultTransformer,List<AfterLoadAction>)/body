{
  handlePotentiallyEmptyCollectionRootReturns(loadPlan,queryParameters.getCollectionKeys(),resultSet,session);
  final int maxRows;
  final RowSelection selection=queryParameters.getRowSelection();
  if (LimitHelper.hasMaxRows(selection)) {
    maxRows=selection.getMaxRows();
    LOG.tracef("Limiting ResultSet processing to just %s rows",maxRows);
  }
 else {
    maxRows=Integer.MAX_VALUE;
  }
  final boolean shouldUseOptionalEntityInstance=true;
  final boolean forceFetchLazyAttributes=false;
  final ResultSetProcessingContextImpl context=new ResultSetProcessingContextImpl(resultSet,session,loadPlan,readOnly,shouldUseOptionalEntityInstance,forceFetchLazyAttributes,returnProxies,queryParameters,namedParameterContext,hadSubselectFetches);
  final List loadResults=new ArrayList();
  LOG.trace("Processing result set");
  int count;
  for (count=0; count < maxRows && resultSet.next(); count++) {
    LOG.debugf("Starting ResultSet row #%s",count);
    Object logicalRow=rowReader.readRow(resultSet,context);
    loadResults.add(logicalRow);
    context.finishUpRow();
  }
  LOG.tracev("Done processing result set ({0} rows)",count);
  rowReader.finishUp(context,afterLoadActionList);
  context.wrapUp();
  session.getPersistenceContext().initializeNonLazyCollections();
  return loadResults;
}
