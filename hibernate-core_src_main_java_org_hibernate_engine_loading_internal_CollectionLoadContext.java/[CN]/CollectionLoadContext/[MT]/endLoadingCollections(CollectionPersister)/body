{
  final SharedSessionContractImplementor session=getLoadContext().getPersistenceContext().getSession();
  if (!loadContexts.hasLoadingCollectionEntries() && localLoadingCollectionKeys.isEmpty()) {
    return;
  }
  List<LoadingCollectionEntry> matches=null;
  final Iterator itr=localLoadingCollectionKeys.iterator();
  while (itr.hasNext()) {
    final CollectionKey collectionKey=(CollectionKey)itr.next();
    final LoadingCollectionEntry lce=loadContexts.locateLoadingCollectionEntry(collectionKey);
    if (lce == null) {
      LOG.loadingCollectionKeyNotFound(collectionKey);
    }
 else     if (lce.getResultSet() == resultSet && lce.getPersister() == persister) {
      if (matches == null) {
        matches=new ArrayList<>();
      }
      matches.add(lce);
      if (lce.getCollection().getOwner() == null) {
        session.getPersistenceContext().addUnownedCollection(new CollectionKey(persister,lce.getKey(),persister.getOwnerEntityPersister().getEntityMetamodel().getEntityMode()),lce.getCollection());
      }
      LOG.tracev("Removing collection load entry [{0}]",lce);
      loadContexts.unregisterLoadingCollectionXRef(collectionKey);
      itr.remove();
    }
  }
  endLoadingCollections(persister,matches);
  if (localLoadingCollectionKeys.isEmpty()) {
    loadContexts.cleanup(resultSet);
  }
}
