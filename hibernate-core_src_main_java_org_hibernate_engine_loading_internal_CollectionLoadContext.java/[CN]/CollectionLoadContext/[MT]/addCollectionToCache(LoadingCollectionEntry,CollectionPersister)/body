{
  final SessionImplementor session=getLoadContext().getPersistenceContext().getSession();
  final SessionFactoryImplementor factory=session.getFactory();
  final boolean debugEnabled=LOG.isDebugEnabled();
  if (debugEnabled) {
    LOG.debugf("Caching collection: %s",MessageHelper.collectionInfoString(persister,lce.getCollection(),lce.getKey(),session));
  }
  if (!session.getEnabledFilters().isEmpty() && persister.isAffectedByEnabledFilters(session)) {
    if (debugEnabled) {
      LOG.debug("Refusing to add to cache due to enabled filters");
    }
    return;
  }
  final Object version;
  if (persister.isVersioned()) {
    Object collectionOwner=getLoadContext().getPersistenceContext().getCollectionOwner(lce.getKey(),persister);
    if (collectionOwner == null) {
      if (lce.getCollection() != null) {
        final Object linkedOwner=lce.getCollection().getOwner();
        if (linkedOwner != null) {
          final Serializable ownerKey=persister.getOwnerEntityPersister().getIdentifier(linkedOwner,session);
          collectionOwner=getLoadContext().getPersistenceContext().getCollectionOwner(ownerKey,persister);
        }
      }
      if (collectionOwner == null) {
        throw new HibernateException("Unable to resolve owner of loading collection [" + MessageHelper.collectionInfoString(persister,lce.getCollection(),lce.getKey(),session) + "] for second level caching");
      }
    }
    version=getLoadContext().getPersistenceContext().getEntry(collectionOwner).getVersion();
  }
 else {
    version=null;
  }
  final CollectionCacheEntry entry=new CollectionCacheEntry(lce.getCollection(),persister);
  final CacheKey cacheKey=session.generateCacheKey(lce.getKey(),persister.getKeyType(),persister.getRole());
  boolean isPutFromLoad=true;
  if (persister.getElementType().isAssociationType()) {
    for (    Serializable id : entry.getState()) {
      EntityPersister entityPersister=((QueryableCollection)persister).getElementPersister();
      if (session.getPersistenceContext().wasInsertedDuringTransaction(entityPersister,id)) {
        isPutFromLoad=false;
        break;
      }
    }
  }
  if (isPutFromLoad) {
    try {
      session.getEventListenerManager().cachePutStart();
      final boolean put=persister.getCacheAccessStrategy().putFromLoad(cacheKey,persister.getCacheEntryStructure().structure(entry),session.getTimestamp(),version,factory.getSettings().isMinimalPutsEnabled() && session.getCacheMode() != CacheMode.REFRESH);
      if (put && factory.getStatistics().isStatisticsEnabled()) {
        factory.getStatisticsImplementor().secondLevelCachePut(persister.getCacheAccessStrategy().getRegion().getName());
      }
    }
  finally {
      session.getEventListenerManager().cachePutEnd();
    }
  }
}
