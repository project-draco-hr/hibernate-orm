{
  String targetText=null;
  boolean script=true;
  boolean export=true;
  String actionText=null;
  boolean drop=false;
  boolean create=false;
  CommandLineArgs parsedArgs=new CommandLineArgs();
  for (  String arg : args) {
    if (arg.startsWith("--")) {
      if (arg.equals("--quiet")) {
        script=false;
      }
 else       if (arg.equals("--text")) {
        export=false;
      }
 else       if (arg.equals("--drop")) {
        drop=true;
      }
 else       if (arg.equals("--create")) {
        create=true;
      }
 else       if (arg.startsWith("--action=")) {
        actionText=arg.substring(9);
      }
 else       if (arg.startsWith("--target=")) {
        targetText=arg.substring(9);
      }
 else       if (arg.equals("--schemas")) {
        parsedArgs.manageNamespaces=true;
      }
 else       if (arg.equals("--haltonerror")) {
        parsedArgs.halt=true;
      }
 else       if (arg.startsWith("--output=")) {
        parsedArgs.outputFile=arg.substring(9);
      }
 else       if (arg.startsWith("--import=")) {
        parsedArgs.importFile=arg.substring(9);
      }
 else       if (arg.startsWith("--properties=")) {
        parsedArgs.propertiesFile=arg.substring(13);
      }
 else       if (arg.equals("--format")) {
        parsedArgs.format=true;
      }
 else       if (arg.startsWith("--delimiter=")) {
        parsedArgs.delimiter=arg.substring(12);
      }
 else       if (arg.startsWith("--config=")) {
        parsedArgs.cfgXmlFile=arg.substring(9);
      }
 else       if (arg.startsWith("--naming=")) {
        DeprecationLogger.DEPRECATION_LOGGER.logDeprecatedNamingStrategyArgument();
      }
 else       if (arg.startsWith("--implicit-naming=")) {
        parsedArgs.implicitNamingStrategyImplName=arg.substring(18);
      }
 else       if (arg.startsWith("--physical-naming=")) {
        parsedArgs.physicalNamingStrategyImplName=arg.substring(18);
      }
    }
 else {
      if (arg.endsWith(".jar")) {
        parsedArgs.jarFiles.add(arg);
      }
 else {
        parsedArgs.hbmXmlFiles.add(arg);
      }
    }
  }
  if (actionText == null) {
    parsedArgs.action=Action.interpret(drop,create);
  }
 else {
    if (drop || create) {
      LOG.warn("--drop or --create was used; prefer --action=none|create|drop|drop-and-create instead");
    }
    parsedArgs.action=Action.parseCommandLineOption(actionText);
  }
  if (targetText == null) {
    parsedArgs.targetTypes=TargetTypeHelper.parseLegacyCommandLineOptions(script,export,parsedArgs.outputFile);
  }
 else {
    if (!script || !export) {
      LOG.warn("--text or --quiet was used; prefer --target=none|(stdout|database|script)*");
    }
    parsedArgs.targetTypes=TargetTypeHelper.parseCommandLineOptions(targetText);
  }
  return parsedArgs;
}
