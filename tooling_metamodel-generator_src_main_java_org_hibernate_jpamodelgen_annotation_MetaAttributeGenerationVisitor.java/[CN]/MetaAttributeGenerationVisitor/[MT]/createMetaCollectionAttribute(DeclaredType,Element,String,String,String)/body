{
  if (TypeUtils.containsAnnotation(element,Constants.ELEMENT_COLLECTION)) {
    String explicitTargetEntity=getTargetEntity(element.getAnnotationMirrors());
    TypeMirror collectionElementType=TypeUtils.getCollectionElementType(declaredType,fqNameOfReturnType,explicitTargetEntity,context);
    final TypeElement collectionElement=(TypeElement)context.getTypeUtils().asElement(collectionElementType);
    AccessTypeInformation accessTypeInfo=context.getAccessTypeInfo(collectionElement.getQualifiedName().toString());
    if (accessTypeInfo == null) {
      AccessType explicitAccessType=TypeUtils.determineAnnotationSpecifiedAccessType(collectionElement);
      accessTypeInfo=new AccessTypeInformation(collectionElement.getQualifiedName().toString(),explicitAccessType,entity.getEntityAccessTypeInfo().getAccessType());
      context.addAccessTypeInformation(collectionElement.getQualifiedName().toString(),accessTypeInfo);
    }
 else {
      accessTypeInfo.setDefaultAccessType(entity.getEntityAccessTypeInfo().getAccessType());
    }
  }
  if (collection.equals("javax.persistence.metamodel.MapAttribute")) {
    return createAnnotationMetaAttributeForMap(declaredType,element,collection,targetEntity);
  }
 else {
    return new AnnotationMetaCollection(entity,element,collection,getElementType(declaredType,targetEntity));
  }
}
