{
  EntityPersister ep=(EntityPersister)sessionFactory().getClassMetadata(Message.class);
  MetadataDrivenModelGraphVisitor.visitEntity(new AssociationVisitationStrategy(){
    private int depth=0;
    @Override public void start(){
      System.out.println(">> Start");
    }
    @Override public void finish(){
      System.out.println("<< Finish");
    }
    @Override public void startingEntity(    EntityDefinition entityDefinition){
      System.out.println(String.format("%s Starting entity (%s)",StringHelper.repeat(">>",++depth),entityDefinition.toString()));
    }
    @Override public void finishingEntity(    EntityDefinition entityDefinition){
      System.out.println(String.format("%s Finishing entity (%s)",StringHelper.repeat("<<",depth--),entityDefinition.toString()));
    }
    @Override public void startingEntityIdentifier(    EntityIdentifierDefinition entityIdentifierDefinition){
    }
    @Override public void finishingEntityIdentifier(    EntityIdentifierDefinition entityIdentifierDefinition){
    }
    @Override public void startingCollection(    CollectionDefinition collectionDefinition){
      System.out.println(String.format("%s Starting collection (%s)",StringHelper.repeat(">>",++depth),collectionDefinition.toString()));
    }
    @Override public void finishingCollection(    CollectionDefinition collectionDefinition){
      System.out.println(String.format("%s Finishing collection (%s)",StringHelper.repeat(">>",depth--),collectionDefinition.toString()));
    }
    @Override public void startingCollectionIndex(    CollectionIndexDefinition collectionIndexDefinition){
    }
    @Override public void finishingCollectionIndex(    CollectionIndexDefinition collectionIndexDefinition){
    }
    @Override public void startingCollectionElements(    CollectionElementDefinition elementDefinition){
    }
    @Override public void finishingCollectionElements(    CollectionElementDefinition elementDefinition){
    }
    @Override public void startingComposite(    CompositionDefinition compositionDefinition){
      System.out.println(String.format("%s Starting composite (%s)",StringHelper.repeat(">>",++depth),compositionDefinition.toString()));
    }
    @Override public void finishingComposite(    CompositionDefinition compositionDefinition){
      System.out.println(String.format("%s Finishing composite (%s)",StringHelper.repeat(">>",depth--),compositionDefinition.toString()));
    }
    @Override public void startingCompositeCollectionElement(    CompositeCollectionElementDefinition compositionElementDefinition){
      System.out.println(String.format("%s Starting composite (%s)",StringHelper.repeat(">>",++depth),compositionElementDefinition.toString()));
    }
    @Override public void finishingCompositeCollectionElement(    CompositeCollectionElementDefinition compositionElementDefinition){
      System.out.println(String.format("%s Finishing composite (%s)",StringHelper.repeat(">>",depth--),compositionElementDefinition.toString()));
    }
    @Override public boolean startingAttribute(    AttributeDefinition attributeDefinition){
      System.out.println(String.format("%s Handling attribute (%s)",StringHelper.repeat(">>",depth + 1),attributeDefinition.toString()));
      return true;
    }
    @Override public void finishingAttribute(    AttributeDefinition attributeDefinition){
    }
    @Override public void foundAny(    AssociationAttributeDefinition attributeDefinition,    AnyMappingDefinition anyDefinition){
    }
  }
,ep);
}
