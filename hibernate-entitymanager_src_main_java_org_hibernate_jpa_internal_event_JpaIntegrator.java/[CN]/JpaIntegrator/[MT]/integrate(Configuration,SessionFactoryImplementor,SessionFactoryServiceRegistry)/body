{
  final EventListenerRegistry eventListenerRegistry=serviceRegistry.getService(EventListenerRegistry.class);
  boolean isSecurityEnabled=configuration.getProperties().containsKey(AvailableSettings.JACC_ENABLED);
  eventListenerRegistry.addDuplicationStrategy(JPA_DUPLICATION_STRATEGY);
  eventListenerRegistry.addDuplicationStrategy(JACC_DUPLICATION_STRATEGY);
  eventListenerRegistry.setListeners(EventType.AUTO_FLUSH,JpaAutoFlushEventListener.INSTANCE);
  eventListenerRegistry.setListeners(EventType.DELETE,new JpaDeleteEventListener());
  eventListenerRegistry.setListeners(EventType.FLUSH_ENTITY,new JpaFlushEntityEventListener());
  eventListenerRegistry.setListeners(EventType.FLUSH,JpaFlushEventListener.INSTANCE);
  eventListenerRegistry.setListeners(EventType.MERGE,new JpaMergeEventListener());
  eventListenerRegistry.setListeners(EventType.PERSIST,new JpaPersistEventListener());
  eventListenerRegistry.setListeners(EventType.PERSIST_ONFLUSH,new JpaPersistOnFlushEventListener());
  eventListenerRegistry.setListeners(EventType.SAVE,new JpaSaveEventListener());
  eventListenerRegistry.setListeners(EventType.SAVE_UPDATE,new JpaSaveOrUpdateEventListener());
  if (isSecurityEnabled) {
    final String jaccContextId=configuration.getProperty(Environment.JACC_CONTEXTID);
    eventListenerRegistry.prependListeners(EventType.PRE_DELETE,new JACCPreDeleteEventListener(jaccContextId));
    eventListenerRegistry.prependListeners(EventType.PRE_INSERT,new JACCPreInsertEventListener(jaccContextId));
    eventListenerRegistry.prependListeners(EventType.PRE_UPDATE,new JACCPreUpdateEventListener(jaccContextId));
    eventListenerRegistry.prependListeners(EventType.PRE_LOAD,new JACCPreLoadEventListener(jaccContextId));
  }
  eventListenerRegistry.prependListeners(EventType.POST_DELETE,new JpaPostDeleteEventListener());
  eventListenerRegistry.prependListeners(EventType.POST_INSERT,new JpaPostInsertEventListener());
  eventListenerRegistry.prependListeners(EventType.POST_LOAD,new JpaPostLoadEventListener());
  eventListenerRegistry.prependListeners(EventType.POST_UPDATE,new JpaPostUpdateEventListener());
  for (  Map.Entry<?,?> entry : configuration.getProperties().entrySet()) {
    if (!String.class.isInstance(entry.getKey())) {
      continue;
    }
    final String propertyName=(String)entry.getKey();
    if (!propertyName.startsWith(AvailableSettings.EVENT_LISTENER_PREFIX)) {
      continue;
    }
    final String eventTypeName=propertyName.substring(AvailableSettings.EVENT_LISTENER_PREFIX.length() + 1);
    final EventType eventType=EventType.resolveEventTypeByName(eventTypeName);
    final EventListenerGroup eventListenerGroup=eventListenerRegistry.getEventListenerGroup(eventType);
    for (    String listenerImpl : ((String)entry.getValue()).split(" ,")) {
      eventListenerGroup.appendListener(instantiate(listenerImpl,serviceRegistry));
    }
  }
  final EntityCallbackHandler callbackHandler=new EntityCallbackHandler();
  Iterator classes=configuration.getClassMappings();
  ReflectionManager reflectionManager=configuration.getReflectionManager();
  while (classes.hasNext()) {
    PersistentClass clazz=(PersistentClass)classes.next();
    if (clazz.getClassName() == null) {
      continue;
    }
    try {
      callbackHandler.add(reflectionManager.classForName(clazz.getClassName(),this.getClass()),reflectionManager);
    }
 catch (    ClassNotFoundException e) {
      throw new MappingException("entity class not found: " + clazz.getNodeName(),e);
    }
  }
  for (  EventType eventType : EventType.values()) {
    final EventListenerGroup eventListenerGroup=eventListenerRegistry.getEventListenerGroup(eventType);
    for (    Object listener : eventListenerGroup.listeners()) {
      if (CallbackHandlerConsumer.class.isInstance(listener)) {
        ((CallbackHandlerConsumer)listener).setCallbackHandler(callbackHandler);
      }
    }
  }
}
