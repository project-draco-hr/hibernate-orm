{
  boolean hasMainOutputParameter=sqlString.indexOf("call") > 0 && sqlString.indexOf("?") < sqlString.indexOf("call") && sqlString.indexOf("=") < sqlString.indexOf("call");
  boolean foundMainOutputParam=false;
  int stringLength=sqlString.length();
  boolean inQuote=false;
  for (int indx=0; indx < stringLength; indx++) {
    char c=sqlString.charAt(indx);
    if (inQuote) {
      if ('\'' == c) {
        inQuote=false;
      }
      recognizer.other(c);
    }
 else     if ('\'' == c) {
      inQuote=true;
      recognizer.other(c);
    }
 else {
      if (c == ':') {
        int right=StringHelper.firstIndexOfChar(sqlString,ParserHelper.HQL_SEPARATORS,indx + 1);
        int chopLocation=right < 0 ? sqlString.length() : right;
        String param=sqlString.substring(indx + 1,chopLocation);
        if (StringHelper.isEmpty(param)) {
          throw new QueryException("Space is not allowed after parameter prefix ':' '" + sqlString + "'");
        }
        recognizer.namedParameter(param,indx);
        indx=chopLocation - 1;
      }
 else       if (c == '?') {
        if (indx < stringLength - 1 && Character.isDigit(sqlString.charAt(indx + 1))) {
          int right=StringHelper.firstIndexOfChar(sqlString,ParserHelper.HQL_SEPARATORS,indx + 1);
          int chopLocation=right < 0 ? sqlString.length() : right;
          String param=sqlString.substring(indx + 1,chopLocation);
          try {
            new Integer(param);
          }
 catch (          NumberFormatException e) {
            throw new QueryException("JPA-style positional param was not an integral ordinal");
          }
          recognizer.jpaPositionalParameter(param,indx);
          indx=chopLocation - 1;
        }
 else {
          if (hasMainOutputParameter && !foundMainOutputParam) {
            foundMainOutputParam=true;
            recognizer.outParameter(indx);
          }
 else {
            recognizer.ordinalParameter(indx);
          }
        }
      }
 else {
        recognizer.other(c);
      }
    }
  }
}
