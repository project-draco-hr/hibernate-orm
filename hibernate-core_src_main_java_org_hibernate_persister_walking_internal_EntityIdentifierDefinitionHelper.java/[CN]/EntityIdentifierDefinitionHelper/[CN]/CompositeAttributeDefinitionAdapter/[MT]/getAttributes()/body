{
  return new Iterable<AttributeDefinition>(){
    @Override public Iterator<AttributeDefinition> iterator(){
      final ComponentType componentType=(ComponentType)getType();
      return new Iterator<AttributeDefinition>(){
        private final int numberOfAttributes=componentType.getSubtypes().length;
        private int currentSubAttributeNumber=0;
        private int currentColumnPosition=0;
        @Override public boolean hasNext(){
          return currentSubAttributeNumber < numberOfAttributes;
        }
        @Override public AttributeDefinition next(){
          final int subAttributeNumber=currentSubAttributeNumber;
          currentSubAttributeNumber++;
          final AttributeSource source=getSource();
          final String name=componentType.getPropertyNames()[subAttributeNumber];
          final Type type=componentType.getSubtypes()[subAttributeNumber];
          final int columnPosition=currentColumnPosition;
          currentColumnPosition+=type.getColumnSpan(getEntityPersister().getFactory());
          if (type.isAssociationType()) {
            final AssociationType aType=(AssociationType)type;
            final Joinable joinable=aType.getAssociatedJoinable(getEntityPersister().getFactory());
            return new AssociationAttributeDefinition(){
              @Override public AssociationKey getAssociationKey(){
                return new AssociationKey(getEntityPersister().getTableName(),getLHSColumnNames(aType,-1,columnPosition,getEntityPersister(),getEntityPersister().getFactory()));
              }
              @Override public boolean isCollection(){
                return false;
              }
              @Override public EntityDefinition toEntityDefinition(){
                return (EntityPersister)joinable;
              }
              @Override public CollectionDefinition toCollectionDefinition(){
                throw new WalkingException("A collection cannot be mapped to a composite ID sub-attribute.");
              }
              @Override public FetchStrategy determineFetchPlan(              LoadQueryInfluencers loadQueryInfluencers,              PropertyPath propertyPath){
                return new FetchStrategy(FetchTiming.IMMEDIATE,FetchStyle.JOIN);
              }
              @Override public CascadeStyle determineCascadeStyle(){
                return CascadeStyles.NONE;
              }
              @Override public HydratedCompoundValueHandler getHydratedCompoundValueExtractor(){
                return null;
              }
              @Override public String getName(){
                return name;
              }
              @Override public Type getType(){
                return type;
              }
              @Override public AttributeSource getSource(){
                return source;
              }
            }
;
          }
 else           if (type.isComponentType()) {
            return new CompositionDefinition(){
              @Override public String getName(){
                return name;
              }
              @Override public Type getType(){
                return type;
              }
              @Override public AttributeSource getSource(){
                return source;
              }
              @Override public Iterable<AttributeDefinition> getAttributes(){
                return null;
              }
            }
;
          }
 else {
            return new AttributeDefinition(){
              @Override public String getName(){
                return name;
              }
              @Override public Type getType(){
                return type;
              }
              @Override public AttributeSource getSource(){
                return source;
              }
            }
;
          }
        }
        @Override public void remove(){
          throw new UnsupportedOperationException("Remove operation not supported here");
        }
      }
;
    }
  }
;
}
