{
  EntityManager em=getEntityManager();
  SetRefEdEntity refEdEntity1=new SetRefEdEntity(1,"Demo Data 1");
  SetRefIngEntity refIngEntity1=new SetRefIngEntity(2,"Example Data 1",refEdEntity1);
  em.getTransaction().begin();
  em.persist(refEdEntity1);
  em.persist(refIngEntity1);
  em.getTransaction().commit();
  em.getTransaction().begin();
  refEdEntity1=em.find(SetRefEdEntity.class,1);
  refIngEntity1=em.find(SetRefIngEntity.class,2);
  em.remove(refIngEntity1);
  em.remove(refEdEntity1);
  em.getTransaction().commit();
  SetRefEdEntity refEdEntity2=new SetRefEdEntity(3,"Demo Data 2");
  SetRefIngEntity refIngEntity2=new SetRefIngEntity(4,"Example Data 2",refEdEntity2);
  em.getTransaction().begin();
  em.persist(refEdEntity2);
  em.persist(refIngEntity2);
  em.getTransaction().commit();
  em.getTransaction().begin();
  refIngEntity2=em.find(SetRefIngEntity.class,4);
  em.remove(refIngEntity2);
  em.getTransaction().commit();
  em.getTransaction().begin();
  refEdEntity2=em.find(SetRefEdEntity.class,3);
  em.remove(refEdEntity2);
  em.getTransaction().commit();
  SetOwningEntity setOwningEntity1=new SetOwningEntity(5,"Demo Data 1");
  SetOwnedEntity setOwnedEntity1=new SetOwnedEntity(6,"Example Data 1");
  Set<SetOwningEntity> owning=new HashSet<SetOwningEntity>();
  Set<SetOwnedEntity> owned=new HashSet<SetOwnedEntity>();
  owning.add(setOwningEntity1);
  owned.add(setOwnedEntity1);
  setOwningEntity1.setReferences(owned);
  setOwnedEntity1.setReferencing(owning);
  em.getTransaction().begin();
  em.persist(setOwnedEntity1);
  em.persist(setOwningEntity1);
  em.getTransaction().commit();
  em.getTransaction().begin();
  setOwnedEntity1=em.find(SetOwnedEntity.class,6);
  setOwningEntity1=em.find(SetOwningEntity.class,5);
  em.remove(setOwningEntity1);
  em.remove(setOwnedEntity1);
  em.getTransaction().commit();
  SetOwningEntity setOwningEntity2=new SetOwningEntity(7,"Demo Data 2");
  SetOwnedEntity setOwnedEntity2=new SetOwnedEntity(8,"Example Data 2");
  owning=new HashSet<SetOwningEntity>();
  owned=new HashSet<SetOwnedEntity>();
  owning.add(setOwningEntity2);
  owned.add(setOwnedEntity2);
  setOwningEntity2.setReferences(owned);
  setOwnedEntity2.setReferencing(owning);
  em.getTransaction().begin();
  em.persist(setOwnedEntity2);
  em.persist(setOwningEntity2);
  em.getTransaction().commit();
  em.getTransaction().begin();
  setOwningEntity2=em.find(SetOwningEntity.class,7);
  em.remove(setOwningEntity2);
  em.getTransaction().commit();
  em.getTransaction().begin();
  setOwnedEntity2=em.find(SetOwnedEntity.class,8);
  em.remove(setOwnedEntity2);
  em.getTransaction().commit();
  StringSetEntity stringSetEntity=new StringSetEntity();
  stringSetEntity.getStrings().add("string 1");
  stringSetEntity.getStrings().add("string 2");
  em.getTransaction().begin();
  em.persist(stringSetEntity);
  em.getTransaction().commit();
  stringSetId=stringSetEntity.getId();
  em.getTransaction().begin();
  stringSetEntity=em.find(StringSetEntity.class,stringSetEntity.getId());
  em.remove(stringSetEntity);
  em.getTransaction().commit();
  em.getTransaction().begin();
  unversionedEntity1=new UnversionedStrTestEntity("string 1");
  unversionedEntity2=new UnversionedStrTestEntity("string 2");
  M2MIndexedListTargetNotAuditedEntity relationNotAuditedEntity=new M2MIndexedListTargetNotAuditedEntity(1,"Parent");
  relationNotAuditedEntity.getReferences().add(unversionedEntity1);
  relationNotAuditedEntity.getReferences().add(unversionedEntity2);
  em.persist(unversionedEntity1);
  em.persist(unversionedEntity2);
  em.persist(relationNotAuditedEntity);
  em.getTransaction().commit();
  em.getTransaction().begin();
  relationNotAuditedEntity=em.find(M2MIndexedListTargetNotAuditedEntity.class,relationNotAuditedEntity.getId());
  em.remove(relationNotAuditedEntity);
  em.getTransaction().commit();
  stringEntity1=new StrTestPrivSeqEntity("Value 1");
  stringEntity2=new StrTestPrivSeqEntity("Value 2");
  intEntity1=new IntTestPrivSeqEntity(1);
  intEntity2=new IntTestPrivSeqEntity(2);
  TernaryMapEntity mapEntity=new TernaryMapEntity();
  mapEntity.getMap().put(intEntity1,stringEntity1);
  mapEntity.getMap().put(intEntity2,stringEntity2);
  em.getTransaction().begin();
  em.persist(stringEntity1);
  em.persist(stringEntity2);
  em.persist(intEntity1);
  em.persist(intEntity2);
  em.persist(mapEntity);
  em.getTransaction().commit();
  ternaryMapId=mapEntity.getId();
  em.getTransaction().begin();
  intEntity2=em.find(IntTestPrivSeqEntity.class,intEntity2.getId());
  intEntity2.setNumber(3);
  intEntity2=em.merge(intEntity2);
  stringEntity2=em.find(StrTestPrivSeqEntity.class,stringEntity2.getId());
  stringEntity2.setStr("Value 3");
  stringEntity2=em.merge(stringEntity2);
  em.getTransaction().commit();
  em.getTransaction().begin();
  mapEntity=em.find(TernaryMapEntity.class,mapEntity.getId());
  em.remove(mapEntity);
  em.getTransaction().commit();
  CollectionRefEdEntity collEd1=new CollectionRefEdEntity(1,"data_ed_1");
  CollectionRefIngEntity collIng1=new CollectionRefIngEntity(2,"data_ing_1",collEd1);
  collEd1.setReffering(new ArrayList<CollectionRefIngEntity>());
  collEd1.getReffering().add(collIng1);
  em.getTransaction().begin();
  em.persist(collEd1);
  em.persist(collIng1);
  em.getTransaction().commit();
  em.getTransaction().begin();
  collIng1=em.find(CollectionRefIngEntity.class,collIng1.getId());
  collIng1.setData("modified data_ing_1");
  collIng1=em.merge(collIng1);
  em.getTransaction().commit();
  em.getTransaction().begin();
  collEd1=em.find(CollectionRefEdEntity.class,collEd1.getId());
  collIng1=em.find(CollectionRefIngEntity.class,collIng1.getId());
  em.remove(collIng1);
  em.remove(collEd1);
  em.getTransaction().commit();
  ListOwnedEntity listEd1=new ListOwnedEntity(1,"data_ed_1");
  ListOwningEntity listIng1=new ListOwningEntity(2,"data_ing_1");
  listEd1.setReferencing(new ArrayList<ListOwningEntity>());
  listIng1.setReferences(new ArrayList<ListOwnedEntity>());
  listEd1.getReferencing().add(listIng1);
  listIng1.getReferences().add(listEd1);
  em.getTransaction().begin();
  em.persist(listEd1);
  em.persist(listIng1);
  em.getTransaction().commit();
  em.getTransaction().begin();
  listIng1=em.find(ListOwningEntity.class,listIng1.getId());
  listIng1.setData("modified data_ing_1");
  listIng1=em.merge(listIng1);
  em.getTransaction().commit();
  em.getTransaction().begin();
  listIng1=em.find(ListOwningEntity.class,listIng1.getId());
  listEd1=em.find(ListOwnedEntity.class,listEd1.getId());
  em.remove(listIng1);
  em.remove(listEd1);
  em.getTransaction().commit();
  em.close();
}
