{
  String jaxpFile=props.getProperty(Environment.PROXOOL_XML);
  String propFile=props.getProperty(Environment.PROXOOL_PROPERTIES);
  String externalConfig=props.getProperty(Environment.PROXOOL_EXISTING_POOL);
  proxoolAlias=props.getProperty(Environment.PROXOOL_POOL_ALIAS);
  if ("true".equals(externalConfig)) {
    if (!StringHelper.isNotEmpty(proxoolAlias)) {
      String msg=LOG.unableToConfigureProxoolProviderToUseExistingInMemoryPool(Environment.PROXOOL_POOL_ALIAS);
      LOG.error(msg);
      throw new HibernateException(msg);
    }
    proxoolAlias=PROXOOL_JDBC_STEM + proxoolAlias;
    existingPool=true;
    LOG.configuringProxoolProviderUsingExistingPool(proxoolAlias);
  }
 else   if (StringHelper.isNotEmpty(jaxpFile)) {
    LOG.configuringProxoolProviderUsingJaxpConfigurator(jaxpFile);
    if (!StringHelper.isNotEmpty(proxoolAlias)) {
      String msg=LOG.unableToConfigureProxoolProviderToUseJaxp(Environment.PROXOOL_POOL_ALIAS);
      LOG.error(msg);
      throw new HibernateException(msg);
    }
    try {
      JAXPConfigurator.configure(ConfigHelper.getConfigStreamReader(jaxpFile),false);
    }
 catch (    ProxoolException e) {
      String msg=LOG.unableToLoadJaxpConfiguratorFile(jaxpFile);
      LOG.error(msg,e);
      throw new HibernateException(msg,e);
    }
    proxoolAlias=PROXOOL_JDBC_STEM + proxoolAlias;
    LOG.configuringProxoolProviderToUsePoolAlias(proxoolAlias);
  }
 else   if (StringHelper.isNotEmpty(propFile)) {
    LOG.configuringProxoolProviderUsingPropertiesFile(propFile);
    if (!StringHelper.isNotEmpty(proxoolAlias)) {
      String msg=LOG.unableToConfigureProxoolProviderToUsePropertiesFile(Environment.PROXOOL_POOL_ALIAS);
      LOG.error(msg);
      throw new HibernateException(msg);
    }
    try {
      PropertyConfigurator.configure(ConfigHelper.getConfigProperties(propFile));
    }
 catch (    ProxoolException e) {
      String msg=LOG.unableToLoadPropertyConfiguratorFile(propFile);
      LOG.error(msg,e);
      throw new HibernateException(msg,e);
    }
    proxoolAlias=PROXOOL_JDBC_STEM + proxoolAlias;
    LOG.configuringProxoolProviderToUsePoolAlias(proxoolAlias);
  }
  isolation=ConfigurationHelper.getInteger(Environment.ISOLATION,props);
  if (isolation != null)   LOG.jdbcIsolationLevel(Environment.isolationLevelToString(isolation.intValue()));
  autocommit=ConfigurationHelper.getBoolean(Environment.AUTOCOMMIT,props);
  LOG.autoCommmitMode(autocommit);
}
