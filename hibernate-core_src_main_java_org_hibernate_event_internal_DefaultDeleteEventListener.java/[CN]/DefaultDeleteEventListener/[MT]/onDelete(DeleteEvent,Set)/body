{
  final EventSource source=event.getSession();
  final PersistenceContext persistenceContext=source.getPersistenceContext();
  Object entity=persistenceContext.unproxyAndReassociate(event.getObject());
  EntityEntry entityEntry=persistenceContext.getEntry(entity);
  final EntityPersister persister;
  final Serializable id;
  final Object version;
  if (entityEntry == null) {
    LOG.trace("Entity was not persistent in delete processing");
    persister=source.getEntityPersister(event.getEntityName(),entity);
    if (ForeignKeys.isTransient(persister.getEntityName(),entity,null,source)) {
      deleteTransientEntity(source,entity,event.isCascadeDeleteEnabled(),persister,transientEntities);
      return;
    }
    performDetachedEntityDeletionCheck(event);
    id=persister.getIdentifier(entity,source);
    if (id == null) {
      throw new TransientObjectException("the detached instance passed to delete() had a null identifier");
    }
    final EntityKey key=source.generateEntityKey(id,persister);
    persistenceContext.checkUniqueness(key,entity);
    new OnUpdateVisitor(source,id,entity).process(entity,persister);
    version=persister.getVersion(entity);
    entityEntry=persistenceContext.addEntity(entity,(persister.isMutable() ? Status.MANAGED : Status.READ_ONLY),persister.getPropertyValues(entity),key,version,LockMode.NONE,true,persister,false,false);
  }
 else {
    LOG.trace("Deleting a persistent instance");
    if (entityEntry.getStatus() == Status.DELETED || entityEntry.getStatus() == Status.GONE) {
      LOG.trace("Object was already deleted");
      return;
    }
    persister=entityEntry.getPersister();
    id=entityEntry.getId();
    version=entityEntry.getVersion();
  }
  if (invokeDeleteLifecycle(source,entity,persister)) {
    return;
  }
  deleteEntity(source,entity,entityEntry,event.isCascadeDeleteEnabled(),persister,transientEntities);
  if (source.getFactory().getSettings().isIdentifierRollbackEnabled()) {
    persister.resetIdentifier(entity,id,version,source);
  }
}
