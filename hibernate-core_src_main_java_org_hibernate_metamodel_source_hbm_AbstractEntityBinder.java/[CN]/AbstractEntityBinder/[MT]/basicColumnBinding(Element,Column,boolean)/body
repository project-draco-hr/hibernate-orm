{
  Attribute lengthNode=node.attribute("length");
  if (lengthNode != null) {
    column.getSize().setLength(Integer.parseInt(lengthNode.getValue()));
  }
  Attribute scalNode=node.attribute("scale");
  if (scalNode != null) {
    column.getSize().setScale(Integer.parseInt(scalNode.getValue()));
  }
  Attribute precNode=node.attribute("precision");
  if (precNode != null) {
    column.getSize().setPrecision(Integer.parseInt(precNode.getValue()));
  }
  Attribute nullNode=node.attribute("not-null");
  column.setNullable(nullNode == null ? isNullable : nullNode.getValue().equals("false"));
  Attribute unqNode=node.attribute("unique");
  if (unqNode != null) {
    column.setUnique(unqNode.getValue().equals("true"));
  }
  column.setCheckCondition(node.attributeValue("check"));
  column.setDefaultValue(node.attributeValue("default"));
  Attribute typeNode=node.attribute("sql-type");
  if (typeNode != null)   column.setSqlType(typeNode.getValue());
  String customWrite=node.attributeValue("write");
  if (customWrite != null && !customWrite.matches("[^?]*\\?[^?]*")) {
    throw new MappingException("write expression must contain exactly one value placeholder ('?') character");
  }
  column.setWriteFragment(customWrite);
  column.setReadFragment(node.attributeValue("read"));
  Element comment=node.element("comment");
  if (comment != null) {
    column.setComment(comment.getTextTrim());
  }
}
