{
  final UniqueKeyBinder propertyUniqueKeyBinder=new UniqueKeyBinder(propertyElement.attribute("unique-key"),table);
  final IndexBinder propertyIndexBinder=new IndexBinder(propertyElement.attribute("index"),table);
  final Attribute columnAttribute=propertyElement.attribute("column");
  if (columnAttribute == null) {
    SimpleValue value=null;
    Tuple tuple=null;
    final Iterator valueElements=propertyElement.elementIterator();
    while (valueElements.hasNext()) {
      if (value != null) {
        if (tuple == null) {
          tuple=table.createTuple("[" + propertyPath + "]");
        }
        tuple.addValue(value);
      }
      final Element valueElement=(Element)valueElements.next();
      if ("column".equals(valueElement.getName())) {
        final Element columnElement=valueElement;
        final String explicitName=columnElement.attributeValue("name");
        final String logicalColumnName=getNamingStrategy().logicalColumnName(explicitName,propertyPath);
        final String columnName=getNamingStrategy().columnName(explicitName);
        Column column=table.createColumn(columnName);
        value=column;
        basicColumnBinding(columnElement,column,isNullableByDefault);
        propertyUniqueKeyBinder.bindColumn(column);
        propertyIndexBinder.bindColumn(column);
        new UniqueKeyBinder(columnElement.attribute("unique-key"),table).bindColumn(column);
        new IndexBinder(columnElement.attribute("index"),table).bindColumn(column);
      }
 else       if ("formula".equals(valueElement.getName())) {
        value=table.createDerivedValue(valueElement.getTextTrim());
      }
    }
    if (tuple != null) {
      return tuple;
    }
 else     if (value != null) {
      return value;
    }
 else     if (autoColumnCreation) {
      final String columnName=getNamingStrategy().propertyToColumnName(propertyPath);
      final String logicalColumnName=getNamingStrategy().logicalColumnName(null,propertyPath);
      Column column=table.createColumn(columnName);
      basicColumnBinding(propertyElement,column,isNullableByDefault);
      propertyUniqueKeyBinder.bindColumn(column);
      propertyIndexBinder.bindColumn(column);
      return column;
    }
  }
  if (propertyElement.elementIterator("column").hasNext()) {
    throw new MappingException("column attribute may not be used together with <column> subelement");
  }
  if (propertyElement.elementIterator("formula").hasNext()) {
    throw new MappingException("column attribute may not be used together with <formula> subelement");
  }
  final String explicitName=columnAttribute.getValue();
  final String logicalColumnName=getNamingStrategy().logicalColumnName(explicitName,propertyPath);
  final String columnName=getNamingStrategy().columnName(explicitName);
  Column column=table.createColumn(columnName);
  basicColumnBinding(propertyElement,column,isNullableByDefault);
  propertyUniqueKeyBinder.bindColumn(column);
  propertyIndexBinder.bindColumn(column);
  return column;
}
