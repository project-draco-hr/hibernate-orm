{
  ClassLoader cl=new ClassLoader(){
  }
;
  Class<?> addressClass=EnhancerTestUtils.enhanceAndDecompile(Address.class,cl);
  Class<?> customerInventoryClass=EnhancerTestUtils.enhanceAndDecompile(CustomerInventory.class,cl);
  Class<?> supplierComponentPKCtClass=EnhancerTestUtils.enhanceAndDecompile(SupplierComponentPK.class,cl);
  Class<?> entityClass=EnhancerTestUtils.enhanceAndDecompile(entityClassToEnhance,cl);
  Object entityInstance=entityClass.newInstance();
  assertTyping(ManagedEntity.class,entityInstance);
  Method setter=entityClass.getMethod(EnhancerConstants.ENTITY_ENTRY_SETTER_NAME,EntityEntry.class);
  Method getter=entityClass.getMethod(EnhancerConstants.ENTITY_ENTRY_GETTER_NAME);
  assertNull(getter.invoke(entityInstance));
  setter.invoke(entityInstance,EnhancerTestUtils.makeEntityEntry());
  assertNotNull(getter.invoke(entityInstance));
  setter.invoke(entityInstance,new Object[]{null});
  assertNull(getter.invoke(entityInstance));
  Method entityInstanceGetter=entityClass.getMethod(EnhancerConstants.ENTITY_INSTANCE_GETTER_NAME);
  assertSame(entityInstance,entityInstanceGetter.invoke(entityInstance));
  Method previousGetter=entityClass.getMethod(EnhancerConstants.PREVIOUS_GETTER_NAME);
  Method previousSetter=entityClass.getMethod(EnhancerConstants.PREVIOUS_SETTER_NAME,ManagedEntity.class);
  previousSetter.invoke(entityInstance,entityInstance);
  assertSame(entityInstance,previousGetter.invoke(entityInstance));
  Method nextGetter=entityClass.getMethod(EnhancerConstants.PREVIOUS_GETTER_NAME);
  Method nextSetter=entityClass.getMethod(EnhancerConstants.PREVIOUS_SETTER_NAME,ManagedEntity.class);
  nextSetter.invoke(entityInstance,entityInstance);
  assertSame(entityInstance,nextGetter.invoke(entityInstance));
  assertNull(entityClass.getMethod(EnhancerConstants.INTERCEPTOR_GETTER_NAME).invoke(entityInstance));
  entityClass.getMethod("getId").invoke(entityInstance);
  Method interceptorSetter=entityClass.getMethod(EnhancerConstants.INTERCEPTOR_SETTER_NAME,PersistentAttributeInterceptor.class);
  interceptorSetter.invoke(entityInstance,new EnhancerTestUtils.LocalPersistentAttributeInterceptor());
  assertNotNull(entityClass.getMethod(EnhancerConstants.INTERCEPTOR_GETTER_NAME).invoke(entityInstance));
  entityClass.getMethod("getId").invoke(entityInstance);
  entityClass.getMethod("setId",Integer.class).invoke(entityInstance,entityClass.getMethod("getId").invoke(entityInstance));
  entityClass.getMethod("setId",Integer.class).invoke(entityInstance,1);
  EnhancerTestUtils.checkDirtyTracking(entityInstance,"id");
  entityClass.getMethod("setFirstName",String.class).invoke(entityInstance,"Erik");
  entityClass.getMethod("setLastName",String.class).invoke(entityInstance,"Mykland");
  EnhancerTestUtils.checkDirtyTracking(entityInstance,"id","firstName","lastName");
  EnhancerTestUtils.clearDirtyTracking(entityInstance);
  Object address=addressClass.newInstance();
  entityClass.getMethod("setAddress",addressClass).invoke(entityInstance,address);
  addressClass.getMethod("setCity",String.class).invoke(address,"Arendal");
  EnhancerTestUtils.checkDirtyTracking(entityInstance,"address","address.city");
  EnhancerTestUtils.clearDirtyTracking(entityInstance);
  Object address2=addressClass.newInstance();
  entityClass.getMethod("setAddress",addressClass).invoke(entityInstance,address2);
  addressClass.getMethod("setStreet1",String.class).invoke(address,"Heggedalveien");
  EnhancerTestUtils.checkDirtyTracking(entityInstance,"address");
}
