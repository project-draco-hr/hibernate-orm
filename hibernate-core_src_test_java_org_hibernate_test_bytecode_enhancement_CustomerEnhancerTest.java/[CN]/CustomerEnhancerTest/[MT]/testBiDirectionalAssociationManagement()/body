{
  ClassLoader cl=new ClassLoader(){
  }
;
  Class<?> userClass=EnhancerTestUtils.enhanceAndDecompile(User.class,cl);
  Class<?> groupClass=EnhancerTestUtils.enhanceAndDecompile(Group.class,cl);
  Class<?> customerClass=EnhancerTestUtils.enhanceAndDecompile(Customer.class,cl);
  Class<?> customerInventoryClass=EnhancerTestUtils.enhanceAndDecompile(CustomerInventory.class,cl);
  Object userInstance=userClass.newInstance();
  assertTyping(ManagedEntity.class,userInstance);
  Object groupInstance=groupClass.newInstance();
  assertTyping(ManagedEntity.class,groupInstance);
  Object customerInstance=customerClass.newInstance();
  assertTyping(ManagedEntity.class,customerInstance);
  Object customerInventoryInstance=customerInventoryClass.newInstance();
  assertTyping(ManagedEntity.class,customerInventoryInstance);
  Method interceptorSetter=userClass.getMethod(EnhancerConstants.INTERCEPTOR_SETTER_NAME,PersistentAttributeInterceptor.class);
  interceptorSetter.invoke(userInstance,new EnhancerTestUtils.LocalPersistentAttributeInterceptor());
  userClass.getMethod("setLogin",String.class).invoke(userInstance,UUID.randomUUID().toString());
  customerClass.getMethod("setUser",userClass).invoke(customerInstance,userInstance);
  assertEquals(customerInstance,userClass.getMethod("getCustomer").invoke(userInstance));
  EnhancerTestUtils.checkDirtyTracking(userInstance,"login","customer");
  Object anotherUser=userClass.newInstance();
  userClass.getMethod("setLogin",String.class).invoke(anotherUser,UUID.randomUUID().toString());
  customerClass.getMethod("setUser",userClass).invoke(customerInstance,anotherUser);
  assertEquals(null,userClass.getMethod("getCustomer").invoke(userInstance));
  assertEquals(customerInstance,userClass.getMethod("getCustomer").invoke(anotherUser));
  userClass.getMethod("setCustomer",customerClass).invoke(userInstance,customerClass.newInstance());
  assertEquals(userInstance,customerClass.getMethod("getUser").invoke(userClass.getMethod("getCustomer").invoke(userInstance)));
  assertTrue(((Collection<?>)customerClass.getMethod("getInventories").invoke(customerInstance)).isEmpty());
  customerInventoryClass.getMethod("setCustomer",customerClass).invoke(customerInventoryInstance,customerInstance);
  Collection<?> inventories=(Collection<?>)customerClass.getMethod("getInventories").invoke(customerInstance);
  assertTrue(inventories.size() == 1);
  assertTrue(inventories.contains(customerInventoryInstance));
  Object anotherCustomer=customerClass.newInstance();
  customerInventoryClass.getMethod("setCustomer",customerClass).invoke(customerInventoryInstance,anotherCustomer);
  assertTrue(((Collection<?>)customerClass.getMethod("getInventories").invoke(customerInstance)).isEmpty());
  customerClass.getMethod("addInventory",customerInventoryClass).invoke(customerInstance,customerInventoryInstance);
  assertTrue(customerInventoryClass.getMethod("getCustomer").invoke(customerInventoryInstance) == customerInstance);
  inventories=(Collection<?>)customerClass.getMethod("getInventories").invoke(customerInstance);
  assertTrue(inventories.size() == 1);
  customerClass.getMethod("addInventory",customerInventoryClass).invoke(customerInstance,customerInventoryClass.newInstance());
  assertTrue(((Collection<?>)customerClass.getMethod("getInventories").invoke(customerInstance)).size() == 2);
  Object anotherGroup=groupClass.newInstance();
  userClass.getMethod("addGroup",groupClass).invoke(userInstance,groupInstance);
  userClass.getMethod("addGroup",groupClass).invoke(userInstance,anotherGroup);
  userClass.getMethod("addGroup",groupClass).invoke(anotherUser,groupInstance);
  assertTrue(((Collection<?>)groupClass.getMethod("getUsers").invoke(groupInstance)).size() == 2);
  groupClass.getMethod("setUsers",Set.class).invoke(groupInstance,new HashSet());
  assertTrue(((Collection<?>)userClass.getMethod("getGroups").invoke(userInstance)).size() == 1);
}
