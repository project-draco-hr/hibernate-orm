{
  if (e instanceof StaleStateException) {
    PersistenceException converted=wrapStaleStateException((StaleStateException)e);
    handlePersistenceException(converted);
    return converted;
  }
 else   if (e instanceof org.hibernate.OptimisticLockException) {
    PersistenceException converted=wrapLockException(e,lockOptions);
    handlePersistenceException(converted);
    return converted;
  }
 else   if (e instanceof org.hibernate.PessimisticLockException) {
    PersistenceException converted=wrapLockException(e,lockOptions);
    handlePersistenceException(converted);
    return converted;
  }
 else   if (e instanceof org.hibernate.QueryTimeoutException) {
    QueryTimeoutException converted=new QueryTimeoutException(e.getMessage(),e);
    handlePersistenceException(converted);
    return converted;
  }
 else   if (e instanceof ObjectNotFoundException) {
    EntityNotFoundException converted=new EntityNotFoundException(e.getMessage());
    handlePersistenceException(converted);
    return converted;
  }
 else   if (e instanceof org.hibernate.NonUniqueResultException) {
    NonUniqueResultException converted=new NonUniqueResultException(e.getMessage());
    handlePersistenceException(converted);
    return converted;
  }
 else   if (e instanceof UnresolvableObjectException) {
    EntityNotFoundException converted=new EntityNotFoundException(e.getMessage());
    handlePersistenceException(converted);
    return converted;
  }
 else   if (e instanceof QueryException) {
    return new IllegalArgumentException(e);
  }
 else   if (e instanceof TransientObjectException) {
    try {
      markAsRollback();
    }
 catch (    Exception ne) {
      LOG.unableToMarkForRollbackOnTransientObjectException(ne);
    }
    return new IllegalStateException(e);
  }
 else {
    PersistenceException converted=new PersistenceException(e);
    handlePersistenceException(converted);
    return converted;
  }
}
