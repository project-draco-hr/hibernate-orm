{
  if (transactionType != PersistenceUnitTransactionType.JTA) {
    if (!ignoreNotJoining) {
      LOG.callingJoinTransactionOnNonJtaEntityManager();
    }
    return;
  }
  final SessionImplementor session=(SessionImplementor)getSession();
  final TransactionCoordinator transactionCoordinator=session.getTransactionCoordinator();
  final TransactionImplementor transaction=transactionCoordinator.getTransaction();
  transaction.markForJoin();
  transactionCoordinator.pulse();
  LOG.debug("Looking for a JTA transaction to join");
  if (!transactionCoordinator.isTransactionJoinable()) {
    LOG.unableToJoinTransaction(Environment.TRANSACTION_STRATEGY);
  }
  try {
    if (transaction.getJoinStatus() == JoinStatus.JOINED) {
      LOG.debug("Transaction already joined");
      return;
    }
    transaction.join();
    if (transaction.getJoinStatus() == JoinStatus.NOT_JOINED) {
      if (ignoreNotJoining) {
        LOG.debug("No JTA transaction found");
        return;
      }
 else {
        throw new TransactionRequiredException("No active JTA transaction on joinTransaction call");
      }
    }
 else     if (transaction.getJoinStatus() == JoinStatus.MARKED_FOR_JOINED) {
      throw new AssertionFailure("Transaction MARKED_FOR_JOINED after isOpen() call");
    }
    SynchronizationCallbackCoordinator callbackCoordinator=transactionCoordinator.getSynchronizationCallbackCoordinator();
    callbackCoordinator.setManagedFlushChecker(new ManagedFlushCheckerImpl());
    callbackCoordinator.setExceptionMapper(new CallbackExceptionMapperImpl());
    callbackCoordinator.setAfterCompletionAction(new AfterCompletionActionImpl(session,transactionType));
  }
 catch (  HibernateException he) {
    throw convert(he);
  }
}
