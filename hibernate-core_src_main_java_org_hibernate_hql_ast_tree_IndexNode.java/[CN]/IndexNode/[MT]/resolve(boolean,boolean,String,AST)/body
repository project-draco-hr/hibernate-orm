{
  if (isResolved()) {
    return;
  }
  FromReferenceNode collectionNode=(FromReferenceNode)getFirstChild();
  SessionFactoryHelper sessionFactoryHelper=getSessionFactoryHelper();
  collectionNode.resolveIndex(this);
  Type type=collectionNode.getDataType();
  if (!type.isCollectionType()) {
    throw new SemanticException("The [] operator cannot be applied to type " + type.toString());
  }
  String collectionRole=((CollectionType)type).getRole();
  QueryableCollection queryableCollection=sessionFactoryHelper.requireQueryableCollection(collectionRole);
  if (!queryableCollection.hasIndex()) {
    throw new QueryException("unindexed fromElement before []: " + collectionNode.getPath());
  }
  FromElement fromElement=collectionNode.getFromElement();
  String elementTable=fromElement.getTableAlias();
  FromClause fromClause=fromElement.getFromClause();
  String path=collectionNode.getPath();
  FromElement elem=fromClause.findCollectionJoin(path);
  if (elem == null) {
    FromElementFactory factory=new FromElementFactory(fromClause,fromElement,path);
    elem=factory.createCollectionElementsJoin(queryableCollection,elementTable);
    LOG.noFromElementFound(path,elem);
  }
 else   LOG.fromElementFound(path);
  setFromElement(fromElement);
  AST selector=collectionNode.getNextSibling();
  if (selector == null) {
    throw new QueryException("No index value!");
  }
  String collectionTableAlias=elementTable;
  if (elem.getCollectionTableAlias() != null) {
    collectionTableAlias=elem.getCollectionTableAlias();
  }
  JoinSequence joinSequence=fromElement.getJoinSequence();
  String[] indexCols=queryableCollection.getIndexColumnNames();
  if (indexCols.length != 1) {
    throw new QueryException("composite-index appears in []: " + collectionNode.getPath());
  }
  SqlGenerator gen=new SqlGenerator(getSessionFactoryHelper().getFactory());
  try {
    gen.simpleExpr(selector);
  }
 catch (  RecognitionException e) {
    throw new QueryException(e.getMessage(),e);
  }
  String selectorExpression=gen.getSQL();
  joinSequence.addCondition(collectionTableAlias + '.' + indexCols[0]+ " = "+ selectorExpression);
  List paramSpecs=gen.getCollectedParameters();
  if (paramSpecs != null) {
switch (paramSpecs.size()) {
case 0:
      break;
case 1:
    ParameterSpecification paramSpec=(ParameterSpecification)paramSpecs.get(0);
  paramSpec.setExpectedType(queryableCollection.getIndexType());
fromElement.setIndexCollectionSelectorParamSpec(paramSpec);
break;
default :
fromElement.setIndexCollectionSelectorParamSpec(new AggregatedIndexCollectionSelectorParameterSpecifications(paramSpecs));
break;
}
}
String[] elementColumns=queryableCollection.getElementColumnNames(elementTable);
setText(elementColumns[0]);
setResolved();
}
