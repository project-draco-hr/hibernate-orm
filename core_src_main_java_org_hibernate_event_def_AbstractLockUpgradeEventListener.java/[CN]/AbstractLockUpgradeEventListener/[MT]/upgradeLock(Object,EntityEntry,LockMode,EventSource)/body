{
  if (requestedLockMode.greaterThan(entry.getLockMode())) {
    if (entry.getStatus() != Status.MANAGED) {
      throw new ObjectDeletedException("attempted to lock a deleted instance",entry.getId(),entry.getPersister().getEntityName());
    }
    final EntityPersister persister=entry.getPersister();
    if (log.isTraceEnabled())     log.trace("locking " + MessageHelper.infoString(persister,entry.getId(),source.getFactory()) + " in mode: "+ requestedLockMode);
    final SoftLock lock;
    final CacheKey ck;
    if (persister.hasCache()) {
      ck=new CacheKey(entry.getId(),persister.getIdentifierType(),persister.getRootEntityName(),source.getEntityMode(),source.getFactory());
      lock=persister.getCacheAccessStrategy().lockItem(ck,entry.getVersion());
    }
 else {
      ck=null;
      lock=null;
    }
    try {
      if (persister.isVersioned() && (requestedLockMode == LockMode.FORCE || requestedLockMode == LockMode.PESSIMISTIC_FORCE_INCREMENT)) {
        Object nextVersion=persister.forceVersionIncrement(entry.getId(),entry.getVersion(),source);
        entry.forceLocked(object,nextVersion);
      }
 else       if (requestedLockMode == LockMode.OPTIMISTIC_FORCE_INCREMENT) {
        if (!persister.isVersioned()) {
          throw new OptimisticLockException("force: Version column is not mapped for " + entry.getPersister().getEntityName(),object);
        }
        EntityIncrementVersionProcess incrementVersion=new EntityIncrementVersionProcess(object,entry);
        source.getActionQueue().registerProcess(incrementVersion);
      }
 else       if (requestedLockMode == LockMode.OPTIMISTIC) {
        if (!persister.isVersioned()) {
          throw new OptimisticLockException("Version column is not mapped for " + entry.getPersister().getEntityName(),object);
        }
        EntityVerifyVersionProcess verifyVersion=new EntityVerifyVersionProcess(object,entry);
        source.getActionQueue().registerProcess(verifyVersion);
      }
 else {
        persister.lock(entry.getId(),entry.getVersion(),object,requestedLockMode,source);
      }
      entry.setLockMode(requestedLockMode);
    }
  finally {
      if (persister.hasCache()) {
        persister.getCacheAccessStrategy().unlockItem(ck,lock);
      }
    }
  }
}
