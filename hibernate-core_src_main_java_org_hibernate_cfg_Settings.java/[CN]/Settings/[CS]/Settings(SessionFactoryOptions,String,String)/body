{
  this.sessionFactoryOptions=sessionFactoryOptions;
  this.defaultCatalogName=defaultCatalogName;
  this.defaultSchemaName=defaultSchemaName;
  final boolean debugEnabled=LOG.isDebugEnabled();
  if (debugEnabled) {
    LOG.debugf("SessionFactory name : %s",sessionFactoryOptions.getSessionFactoryName());
    LOG.debugf("Automatic flush during beforeCompletion(): %s",enabledDisabled(sessionFactoryOptions.isFlushBeforeCompletionEnabled()));
    LOG.debugf("Automatic session close at end of transaction: %s",enabledDisabled(sessionFactoryOptions.isAutoCloseSessionEnabled()));
    LOG.debugf("Statistics: %s",enabledDisabled(sessionFactoryOptions.isStatisticsEnabled()));
    LOG.debugf("Deleted entity synthetic identifier rollback: %s",enabledDisabled(sessionFactoryOptions.isIdentifierRollbackEnabled()));
    LOG.debugf("Default entity-mode: %s",sessionFactoryOptions.getDefaultEntityMode());
    LOG.debugf("Check Nullability in Core (should be disabled when Bean Validation is on): %s",enabledDisabled(sessionFactoryOptions.isCheckNullability()));
    LOG.debugf("Allow initialization of lazy state outside session : %s",enabledDisabled(sessionFactoryOptions.isInitializeLazyStateOutsideTransactionsEnabled()));
    LOG.debugf("Using BatchFetchStyle : " + sessionFactoryOptions.getBatchFetchStyle().name());
    LOG.debugf("Default batch fetch size: %s",sessionFactoryOptions.getDefaultBatchFetchSize());
    LOG.debugf("Maximum outer join fetch depth: %s",sessionFactoryOptions.getMaximumFetchDepth());
    LOG.debugf("Default null ordering: %s",sessionFactoryOptions.getDefaultNullPrecedence());
    LOG.debugf("Order SQL updates by primary key: %s",enabledDisabled(sessionFactoryOptions.isOrderUpdatesEnabled()));
    LOG.debugf("Order SQL inserts for batching: %s",enabledDisabled(sessionFactoryOptions.isOrderInsertsEnabled()));
    LOG.debugf("multi-tenancy strategy : %s",sessionFactoryOptions.getMultiTenancyStrategy());
    LOG.debugf("JTA Track by Thread: %s",enabledDisabled(sessionFactoryOptions.isJtaTrackByThread()));
    LOG.debugf("Query language substitutions: %s",sessionFactoryOptions.getQuerySubstitutions());
    LOG.debugf("JPA query language strict compliance: %s",enabledDisabled(sessionFactoryOptions.isStrictJpaQueryLanguageCompliance()));
    LOG.debugf("Named query checking : %s",enabledDisabled(sessionFactoryOptions.isNamedQueryStartupCheckingEnabled()));
    LOG.debugf("Second-level cache: %s",enabledDisabled(sessionFactoryOptions.isSecondLevelCacheEnabled()));
    LOG.debugf("Second-level query cache: %s",enabledDisabled(sessionFactoryOptions.isQueryCacheEnabled()));
    LOG.debugf("Second-level query cache factory: %s",sessionFactoryOptions.getQueryCacheFactory());
    LOG.debugf("Second-level cache region prefix: %s",sessionFactoryOptions.getCacheRegionPrefix());
    LOG.debugf("Optimize second-level cache for minimal puts: %s",enabledDisabled(sessionFactoryOptions.isMinimalPutsEnabled()));
    LOG.debugf("Structured second-level cache entries: %s",enabledDisabled(sessionFactoryOptions.isStructuredCacheEntriesEnabled()));
    LOG.debugf("Second-level cache direct-reference entries: %s",enabledDisabled(sessionFactoryOptions.isDirectReferenceCacheEntriesEnabled()));
    LOG.debugf("Automatic eviction of collection cache: %s",enabledDisabled(sessionFactoryOptions.isAutoEvictCollectionCache()));
    LOG.debugf("JDBC batch size: %s",sessionFactoryOptions.getJdbcBatchSize());
    LOG.debugf("JDBC batch updates for versioned data: %s",enabledDisabled(sessionFactoryOptions.isJdbcBatchVersionedData()));
    LOG.debugf("Scrollable result sets: %s",enabledDisabled(sessionFactoryOptions.isScrollableResultSetsEnabled()));
    LOG.debugf("Wrap result sets: %s",enabledDisabled(sessionFactoryOptions.isWrapResultSetsEnabled()));
    LOG.debugf("JDBC3 getGeneratedKeys(): %s",enabledDisabled(sessionFactoryOptions.isGetGeneratedKeysEnabled()));
    LOG.debugf("JDBC result set fetch size: %s",sessionFactoryOptions.getJdbcFetchSize());
    LOG.debugf("Connection release mode: %s",sessionFactoryOptions.getConnectionReleaseMode());
    LOG.debugf("Generate SQL with comments: %s",enabledDisabled(sessionFactoryOptions.isCommentsEnabled()));
  }
}
