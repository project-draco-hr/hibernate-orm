{
  EntityManager entityManager=createEntityManager();
  entityManager.getTransaction().begin();
  try {
    Session session=entityManager.unwrap(Session.class);
    Long phoneCount=session.doReturningWork(new ReturningWork<Long>(){
      @Override public Long execute(      Connection connection) throws SQLException {
        CallableStatement function=null;
        try {
          function=connection.prepareCall("{ ? = call sp_count_phones(?) }");
          function.registerOutParameter("phoneCount",Types.BIGINT);
          function.setLong("personId",1L);
          function.execute();
          return function.getLong(1);
        }
  finally {
          if (function != null) {
            function.close();
          }
        }
      }
    }
);
    assertEquals(Long.valueOf(2),phoneCount);
  }
 catch (  Exception e) {
    assertEquals(SQLFeatureNotSupportedException.class,e.getCause().getClass());
  }
 finally {
    entityManager.getTransaction().rollback();
    entityManager.close();
  }
}
