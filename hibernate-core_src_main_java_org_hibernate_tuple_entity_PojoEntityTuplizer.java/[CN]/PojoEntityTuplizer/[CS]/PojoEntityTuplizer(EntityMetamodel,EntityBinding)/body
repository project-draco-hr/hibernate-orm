{
  super(entityMetamodel,mappedEntity);
  this.mappedClass=mappedEntity.getEntity().getClassReference();
  this.proxyInterface=mappedEntity.getProxyInterfaceType().getValue();
  this.lifecycleImplementor=Lifecycle.class.isAssignableFrom(mappedClass);
  this.isInstrumented=entityMetamodel.isInstrumented();
  for (  AttributeBinding property : mappedEntity.getAttributeBindingClosure()) {
    if (property.isLazy()) {
      lazyPropertyNames.add(property.getAttribute().getName());
    }
  }
  String[] getterNames=new String[propertySpan];
  String[] setterNames=new String[propertySpan];
  Class[] propTypes=new Class[propertySpan];
  for (int i=0; i < propertySpan; i++) {
    getterNames[i]=getters[i].getMethodName();
    setterNames[i]=setters[i].getMethodName();
    propTypes[i]=getters[i].getReturnType();
  }
  if (hasCustomAccessors || !Environment.useReflectionOptimizer()) {
    optimizer=null;
  }
 else {
    optimizer=Environment.getBytecodeProvider().getReflectionOptimizer(mappedClass,getterNames,setterNames,propTypes);
  }
}
