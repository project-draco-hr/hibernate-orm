{
  Set<Class> proxyInterfaces=new java.util.LinkedHashSet<Class>();
  Class mappedClass=persistentClass.getMappedClass();
  Class proxyInterface=persistentClass.getProxyInterface();
  if (proxyInterface != null && !mappedClass.equals(proxyInterface)) {
    if (!proxyInterface.isInterface()) {
      throw new MappingException("proxy must be either an interface, or the class itself: " + getEntityName());
    }
    proxyInterfaces.add(proxyInterface);
  }
  if (mappedClass.isInterface()) {
    proxyInterfaces.add(mappedClass);
  }
  Iterator subclasses=persistentClass.getSubclassIterator();
  while (subclasses.hasNext()) {
    final Subclass subclass=(Subclass)subclasses.next();
    final Class subclassProxy=subclass.getProxyInterface();
    final Class subclassClass=subclass.getMappedClass();
    if (subclassProxy != null && !subclassClass.equals(subclassProxy)) {
      if (!subclassProxy.isInterface()) {
        throw new MappingException("proxy must be either an interface, or the class itself: " + subclass.getEntityName());
      }
      proxyInterfaces.add(subclassProxy);
    }
  }
  proxyInterfaces.add(HibernateProxy.class);
  Iterator properties=persistentClass.getPropertyIterator();
  Class clazz=persistentClass.getMappedClass();
  while (properties.hasNext()) {
    Property property=(Property)properties.next();
    Method method=property.getGetter(clazz).getMethod();
    if (method != null && Modifier.isFinal(method.getModifiers())) {
      LOG.gettersOfLazyClassesCannotBeFinal(persistentClass.getEntityName(),property.getName());
    }
    method=property.getSetter(clazz).getMethod();
    if (method != null && Modifier.isFinal(method.getModifiers())) {
      LOG.settersOfLazyClassesCannotBeFinal(persistentClass.getEntityName(),property.getName());
    }
  }
  Method idGetterMethod=idGetter == null ? null : idGetter.getMethod();
  Method idSetterMethod=idSetter == null ? null : idSetter.getMethod();
  Method proxyGetIdentifierMethod=idGetterMethod == null || proxyInterface == null ? null : ReflectHelper.getMethod(proxyInterface,idGetterMethod);
  Method proxySetIdentifierMethod=idSetterMethod == null || proxyInterface == null ? null : ReflectHelper.getMethod(proxyInterface,idSetterMethod);
  ProxyFactory pf=buildProxyFactoryInternal(persistentClass,idGetter,idSetter);
  try {
    pf.postInstantiate(getEntityName(),mappedClass,proxyInterfaces,proxyGetIdentifierMethod,proxySetIdentifierMethod,persistentClass.hasEmbeddedIdentifier() ? (CompositeType)persistentClass.getIdentifier().getType() : null);
  }
 catch (  HibernateException he) {
    LOG.unableToCreateProxyFactory(getEntityName(),he);
    pf=null;
  }
  return pf;
}
