{
  final QueryJoinFragment joinFragment=new QueryJoinFragment(factory.getDialect(),useThetaStyle);
  Iterator<Join> iter;
  Join first;
  Joinable last;
  if (rootJoinable != null) {
    joinFragment.addCrossJoin(rootJoinable.getTableName(),rootAlias);
    final String filterCondition=rootJoinable.filterFragment(rootAlias,enabledFilters,treatAsDeclarations);
    joinFragment.setHasFilterCondition(joinFragment.addCondition(filterCondition));
    addSubclassJoins(joinFragment,rootAlias,rootJoinable,true,includeAllSubclassJoins,treatAsDeclarations);
    last=rootJoinable;
  }
 else   if (withClauseFragment != null && joins.size() > 1 && withClauseFragment.contains(withClauseJoinAlias) && (first=(iter=joins.iterator()).next()).joinType == JoinType.LEFT_OUTER_JOIN) {
    final QueryJoinFragment subqueryJoinFragment=new QueryJoinFragment(factory.getDialect(),useThetaStyle);
    subqueryJoinFragment.addFromFragmentString("(select ");
    subqueryJoinFragment.addFromFragmentString(first.getAlias());
    subqueryJoinFragment.addFromFragmentString(".*");
    Pattern p=Pattern.compile(Pattern.quote(withClauseJoinAlias + ".") + "([a-zA-Z0-9_]+)");
    Matcher matcher=p.matcher(withClauseFragment);
    StringBuilder withClauseSb=new StringBuilder(withClauseFragment.length());
    withClauseSb.append(" and ");
    int start=0;
    int aliasNumber=0;
    while (matcher.find()) {
      final String column=matcher.group(1);
      final String alias="_" + aliasNumber + "_"+ column;
      withClauseSb.append(withClauseFragment,start,matcher.start());
      withClauseSb.append(first.getAlias());
      withClauseSb.append('.');
      withClauseSb.append(alias);
      subqueryJoinFragment.addFromFragmentString(", ");
      subqueryJoinFragment.addFromFragmentString(withClauseJoinAlias);
      subqueryJoinFragment.addFromFragmentString(".");
      subqueryJoinFragment.addFromFragmentString(column);
      subqueryJoinFragment.addFromFragmentString(" as ");
      subqueryJoinFragment.addFromFragmentString(alias);
      start=matcher.end();
      aliasNumber++;
    }
    withClauseSb.append(withClauseFragment,start,withClauseFragment.length());
    subqueryJoinFragment.addFromFragmentString(" from ");
    subqueryJoinFragment.addFromFragmentString(first.joinable.getTableName());
    subqueryJoinFragment.addFromFragmentString(" ");
    subqueryJoinFragment.addFromFragmentString(first.getAlias());
    JoinSequence subSequence=new JoinSequence(factory);
    while (iter.hasNext()) {
      Join join=iter.next();
      subSequence.joins.add(join);
    }
    JoinFragment subFragment=subSequence.toJoinFragment(enabledFilters,false,true,null,null);
    subqueryJoinFragment.addFragment(subFragment);
    subqueryJoinFragment.addFromFragmentString(")");
    joinFragment.addJoin(subqueryJoinFragment.toFromFragmentString(),first.getAlias(),first.getLHSColumns(),JoinHelper.getRHSColumnNames(first.getAssociationType(),factory),first.joinType,withClauseSb.toString());
    for (    Join join : joins) {
      if (join != first) {
        joinFragment.addJoin(join.getJoinable().getTableName(),join.getAlias(),join.getLHSColumns(),JoinHelper.getRHSColumnNames(join.getAssociationType(),factory),join.joinType,"");
      }
      addSubclassJoins(joinFragment,join.getAlias(),join.getJoinable(),join.joinType == JoinType.INNER_JOIN,includeAllSubclassJoins,treatAsDeclarations);
    }
    return joinFragment;
  }
 else {
    last=null;
  }
  for (  Join join : joins) {
    final String on=join.getAssociationType().getOnCondition(join.getAlias(),factory,enabledFilters,treatAsDeclarations);
    String condition;
    if (last != null && isManyToManyRoot(last) && ((QueryableCollection)last).getElementType() == join.getAssociationType()) {
      final String manyToManyFilter=((QueryableCollection)last).getManyToManyFilterFragment(join.getAlias(),enabledFilters);
      condition="".equals(manyToManyFilter) ? on : "".equals(on) ? manyToManyFilter : on + " and " + manyToManyFilter;
    }
 else {
      condition=on;
    }
    if (withClauseFragment != null && !isManyToManyRoot(join.joinable)) {
      condition+=" and " + withClauseFragment;
    }
    joinFragment.addJoin(join.getJoinable().getTableName(),join.getAlias(),join.getLHSColumns(),JoinHelper.getRHSColumnNames(join.getAssociationType(),factory),join.joinType,condition);
    if (renderSubclassJoins) {
      addSubclassJoins(joinFragment,join.getAlias(),join.getJoinable(),join.joinType == JoinType.INNER_JOIN,includeAllSubclassJoins,treatAsDeclarations);
    }
    last=join.getJoinable();
  }
  if (next != null) {
    joinFragment.addFragment(next.toJoinFragment(enabledFilters,includeAllSubclassJoins));
  }
  joinFragment.addCondition(conditions.toString());
  if (isFromPart) {
    joinFragment.clearWherePart();
  }
  return joinFragment;
}
