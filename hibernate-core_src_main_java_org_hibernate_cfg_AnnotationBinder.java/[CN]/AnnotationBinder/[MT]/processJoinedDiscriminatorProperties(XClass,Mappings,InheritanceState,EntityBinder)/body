{
  if (clazzToProcess.isAnnotationPresent(DiscriminatorFormula.class)) {
    throw new MappingException("@DiscriminatorFormula on joined inheritance not supported at this time");
  }
  final DiscriminatorValue discriminatorValueAnnotation=clazzToProcess.getAnnotation(DiscriminatorValue.class);
  final String discriminatorValue=discriminatorValueAnnotation != null ? clazzToProcess.getAnnotation(DiscriminatorValue.class).value() : null;
  entityBinder.setDiscriminatorValue(discriminatorValue);
  final DiscriminatorColumn discriminatorColumnAnnotation=clazzToProcess.getAnnotation(DiscriminatorColumn.class);
  if (!inheritanceState.hasParents()) {
    final boolean generateDiscriminatorColumn;
    if (discriminatorColumnAnnotation != null) {
      if (mappings.ignoreExplicitDiscriminatorColumnForJoinedInheritance()) {
        LOG.debugf("Ignoring explicit DiscriminatorColumn annotation on ",clazzToProcess.getName());
        generateDiscriminatorColumn=false;
      }
 else {
        LOG.applyingExplicitDiscriminatorColumnForJoined(clazzToProcess.getName(),AvailableSettings.IGNORE_EXPLICIT_DISCRIMINATOR_COLUMNS_FOR_JOINED_SUBCLASS);
        generateDiscriminatorColumn=true;
      }
    }
 else {
      if (mappings.useImplicitDiscriminatorColumnForJoinedInheritance()) {
        LOG.debug("Applying implicit DiscriminatorColumn using DiscriminatorColumn defaults");
        generateDiscriminatorColumn=true;
      }
 else {
        LOG.debug("Ignoring implicit (absent) DiscriminatorColumn");
        generateDiscriminatorColumn=false;
      }
    }
    if (generateDiscriminatorColumn) {
      final DiscriminatorType discriminatorType=discriminatorColumnAnnotation != null ? discriminatorColumnAnnotation.discriminatorType() : DiscriminatorType.STRING;
      return Ejb3DiscriminatorColumn.buildDiscriminatorColumn(discriminatorType,discriminatorColumnAnnotation,null,mappings);
    }
  }
 else {
    if (discriminatorColumnAnnotation != null) {
      LOG.invalidDiscriminatorAnnotation(clazzToProcess.getName());
    }
  }
  return null;
}
