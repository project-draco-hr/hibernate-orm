{
  if (ann == null) {
    return null;
  }
  IdentifierGeneratorDefinition.Builder definitionBuilder=new IdentifierGeneratorDefinition.Builder();
  if (context.getMappingDefaults().getImplicitSchemaName() != null) {
    definitionBuilder.addParam(PersistentIdentifierGenerator.SCHEMA,context.getMappingDefaults().getImplicitSchemaName());
  }
  if (context.getMappingDefaults().getImplicitCatalogName() != null) {
    definitionBuilder.addParam(PersistentIdentifierGenerator.CATALOG,context.getMappingDefaults().getImplicitCatalogName());
  }
  if (ann instanceof TableGenerator) {
    context.getBuildingOptions().getIdGenerationTypeInterpreter().interpretTableGenerator((TableGenerator)ann,definitionBuilder);
    if (LOG.isTraceEnabled()) {
      LOG.tracev("Add table generator with name: {0}",definitionBuilder.getName());
    }
  }
 else   if (ann instanceof SequenceGenerator) {
    context.getBuildingOptions().getIdGenerationTypeInterpreter().interpretSequenceGenerator((SequenceGenerator)ann,definitionBuilder);
    if (LOG.isTraceEnabled()) {
      LOG.tracev("Add sequence generator with name: {0}",definitionBuilder.getName());
    }
  }
 else   if (ann instanceof GenericGenerator) {
    GenericGenerator genGen=(GenericGenerator)ann;
    definitionBuilder.setName(genGen.name());
    definitionBuilder.setStrategy(genGen.strategy());
    Parameter[] params=genGen.parameters();
    for (    Parameter parameter : params) {
      definitionBuilder.addParam(parameter.name(),parameter.value());
    }
    if (LOG.isTraceEnabled()) {
      LOG.tracev("Add generic generator with name: {0}",definitionBuilder.getName());
    }
  }
 else {
    throw new AssertionFailure("Unknown Generator annotation: " + ann);
  }
  return definitionBuilder.build();
}
