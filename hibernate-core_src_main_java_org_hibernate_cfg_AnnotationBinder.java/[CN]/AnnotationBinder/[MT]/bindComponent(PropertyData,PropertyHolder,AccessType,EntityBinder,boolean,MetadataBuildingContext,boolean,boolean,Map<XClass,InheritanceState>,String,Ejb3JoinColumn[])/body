{
  Component comp;
  if (referencedEntityName != null) {
    comp=createComponent(propertyHolder,inferredData,isComponentEmbedded,isIdentifierMapper,buildingContext);
    SecondPass sp=new CopyIdentifierComponentSecondPass(comp,referencedEntityName,columns,buildingContext);
    buildingContext.getMetadataCollector().addSecondPass(sp);
  }
 else {
    comp=fillComponent(propertyHolder,inferredData,propertyAccessor,!isId,entityBinder,isComponentEmbedded,isIdentifierMapper,false,buildingContext,inheritanceStatePerClass);
  }
  if (isId) {
    comp.setKey(true);
    if (propertyHolder.getPersistentClass().getIdentifier() != null) {
      throw new AnnotationException(comp.getComponentClassName() + " must not have @Id properties when used as an @EmbeddedId: " + BinderHelper.getPath(propertyHolder,inferredData));
    }
    if (referencedEntityName == null && comp.getPropertySpan() == 0) {
      throw new AnnotationException(comp.getComponentClassName() + " has no persistent id property: " + BinderHelper.getPath(propertyHolder,inferredData));
    }
  }
  XProperty property=inferredData.getProperty();
  setupComponentTuplizer(property,comp);
  PropertyBinder binder=new PropertyBinder();
  binder.setDeclaringClass(inferredData.getDeclaringClass());
  binder.setName(inferredData.getPropertyName());
  binder.setValue(comp);
  binder.setProperty(inferredData.getProperty());
  binder.setAccessType(inferredData.getDefaultAccess());
  binder.setEmbedded(isComponentEmbedded);
  binder.setHolder(propertyHolder);
  binder.setId(isId);
  binder.setEntityBinder(entityBinder);
  binder.setInheritanceStatePerClass(inheritanceStatePerClass);
  binder.setBuildingContext(buildingContext);
  binder.makePropertyAndBind();
  return binder;
}
