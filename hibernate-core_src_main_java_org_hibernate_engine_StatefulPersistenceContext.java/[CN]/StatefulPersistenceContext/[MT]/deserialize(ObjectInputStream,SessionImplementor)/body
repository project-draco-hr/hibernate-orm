{
  LOG.deserializingPersistentContext();
  StatefulPersistenceContext rtn=new StatefulPersistenceContext(session);
  try {
    rtn.defaultReadOnly=ois.readBoolean();
    rtn.hasNonReadOnlyEntities=ois.readBoolean();
    int count=ois.readInt();
    LOG.deserializingEntitiesByKey(count);
    rtn.entitiesByKey=new HashMap(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      rtn.entitiesByKey.put(EntityKey.deserialize(ois,session),ois.readObject());
    }
    count=ois.readInt();
    LOG.deserializingEntitiesByUniqueKey(count);
    rtn.entitiesByUniqueKey=new HashMap(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      rtn.entitiesByUniqueKey.put(EntityUniqueKey.deserialize(ois,session),ois.readObject());
    }
    count=ois.readInt();
    LOG.deserializingProxiesByKey(count);
    rtn.proxiesByKey=new ReferenceMap(AbstractReferenceMap.HARD,AbstractReferenceMap.WEAK,count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count,.75f);
    for (int i=0; i < count; i++) {
      EntityKey ek=EntityKey.deserialize(ois,session);
      Object proxy=ois.readObject();
      if (proxy instanceof HibernateProxy) {
        ((HibernateProxy)proxy).getHibernateLazyInitializer().setSession(session);
        rtn.proxiesByKey.put(ek,proxy);
      }
 else       LOG.encounteredPrunedProxy();
    }
    count=ois.readInt();
    LOG.deserializingEntitySnapshotsByKey(count);
    rtn.entitySnapshotsByKey=new HashMap(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      rtn.entitySnapshotsByKey.put(EntityKey.deserialize(ois,session),ois.readObject());
    }
    count=ois.readInt();
    LOG.deserializingEntityEntries(count);
    rtn.entityEntries=IdentityMap.instantiateSequenced(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      Object entity=ois.readObject();
      EntityEntry entry=EntityEntry.deserialize(ois,session);
      rtn.entityEntries.put(entity,entry);
    }
    count=ois.readInt();
    LOG.deserializingCollectionsByKey(count);
    rtn.collectionsByKey=new HashMap(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      rtn.collectionsByKey.put(CollectionKey.deserialize(ois,session),ois.readObject());
    }
    count=ois.readInt();
    LOG.deserializingCollectionEntries(count);
    rtn.collectionEntries=IdentityMap.instantiateSequenced(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      final PersistentCollection pc=(PersistentCollection)ois.readObject();
      final CollectionEntry ce=CollectionEntry.deserialize(ois,session);
      pc.setCurrentSession(session);
      rtn.collectionEntries.put(pc,ce);
    }
    count=ois.readInt();
    LOG.deserializingArrayHolders(count);
    rtn.arrayHolders=IdentityMap.instantiate(count < INIT_COLL_SIZE ? INIT_COLL_SIZE : count);
    for (int i=0; i < count; i++) {
      rtn.arrayHolders.put(ois.readObject(),ois.readObject());
    }
    count=ois.readInt();
    LOG.deserializingNullifiableEntityKeys(count);
    rtn.nullifiableEntityKeys=new HashSet();
    for (int i=0; i < count; i++) {
      rtn.nullifiableEntityKeys.add(EntityKey.deserialize(ois,session));
    }
  }
 catch (  HibernateException he) {
    throw new InvalidObjectException(he.getMessage());
  }
  return rtn;
}
