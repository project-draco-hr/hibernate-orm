{
  final AggregatedCollectionEventListener listener=collectionListenerIntegrator.getListener();
  Session s=openSession();
  s.beginTransaction();
  Character paul=new Character(1,"Paul Atreides");
  s.save(paul);
  s.getTransaction().commit();
  s.close();
  assertEquals(2,listener.getEventEntryList().size());
  checkListener(0,PreCollectionRecreateEvent.class,paul,Collections.EMPTY_LIST);
  checkListener(1,PostCollectionRecreateEvent.class,paul,Collections.EMPTY_LIST);
  listener.reset();
  s=openSession();
  s.beginTransaction();
  Character paulo=new Character(2,"Paulo Atreides");
  s.save(paulo);
  s.getTransaction().commit();
  s.close();
  assertEquals(2,listener.getEventEntryList().size());
  checkListener(0,PreCollectionRecreateEvent.class,paulo,Collections.EMPTY_LIST);
  checkListener(1,PostCollectionRecreateEvent.class,paulo,Collections.EMPTY_LIST);
  listener.reset();
  s=openSession();
  s.beginTransaction();
  Alias alias1=new Alias(1,"Paul Muad'Dib");
  s.save(alias1);
  s.getTransaction().commit();
  s.close();
  assertEquals(2,listener.getEventEntryList().size());
  checkListener(0,PreCollectionRecreateEvent.class,alias1,Collections.EMPTY_LIST);
  checkListener(1,PostCollectionRecreateEvent.class,alias1,Collections.EMPTY_LIST);
  listener.reset();
  s=openSession();
  s.beginTransaction();
  Alias alias2=new Alias(2,"Usul");
  s.save(alias2);
  s.getTransaction().commit();
  s.close();
  assertEquals(2,listener.getEventEntryList().size());
  checkListener(0,PreCollectionRecreateEvent.class,alias2,Collections.EMPTY_LIST);
  checkListener(1,PostCollectionRecreateEvent.class,alias2,Collections.EMPTY_LIST);
  listener.reset();
  paul.associateAlias(alias1);
  paul.associateAlias(alias2);
  paulo.associateAlias(alias1);
  paulo.associateAlias(alias2);
  s=openSession();
  s.beginTransaction();
  s.merge(alias1);
  assertEquals(0,listener.getEventEntryList().size());
  s.flush();
  assertEquals(8,listener.getEventEntryList().size());
  checkListener(0,PreCollectionUpdateEvent.class,alias1,Collections.EMPTY_LIST);
  checkListener(1,PostCollectionUpdateEvent.class,alias1,alias1.getCharacters());
  checkListener(2,PreCollectionUpdateEvent.class,paul,Collections.EMPTY_LIST);
  checkListener(3,PostCollectionUpdateEvent.class,paul,paul.getAliases());
  checkListener(4,PreCollectionUpdateEvent.class,alias2,Collections.EMPTY_LIST);
  checkListener(5,PostCollectionUpdateEvent.class,alias2,alias2.getCharacters());
  checkListener(6,PreCollectionUpdateEvent.class,paulo,Collections.EMPTY_LIST);
  checkListener(7,PostCollectionUpdateEvent.class,paulo,paul.getAliases());
  List<Character> alias1CharactersSnapshot=copy(alias1.getCharacters());
  List<Character> alias2CharactersSnapshot=copy(alias2.getCharacters());
  listener.reset();
  s.merge(alias2);
  assertEquals(0,listener.getEventEntryList().size());
  s.flush();
  assertEquals(8,listener.getEventEntryList().size());
  checkListener(0,PreCollectionUpdateEvent.class,alias1,alias1CharactersSnapshot);
  checkListener(1,PostCollectionUpdateEvent.class,alias1,alias1CharactersSnapshot);
  checkListener(4,PreCollectionUpdateEvent.class,alias2,alias2CharactersSnapshot);
  checkListener(5,PostCollectionUpdateEvent.class,alias2,alias2.getCharacters());
  s.getTransaction().commit();
  s.close();
}
