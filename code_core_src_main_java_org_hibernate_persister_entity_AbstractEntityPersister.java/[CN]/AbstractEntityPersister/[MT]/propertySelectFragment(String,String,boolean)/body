{
  SelectFragment select=new SelectFragment().setSuffix(suffix).setUsedAliases(getIdentifierAliases());
  int[] columnTableNumbers=getSubclassColumnTableNumberClosure();
  String[] columnAliases=getSubclassColumnAliasClosure();
  String[] columns=getSubclassColumnClosure();
  for (int i=0; i < getSubclassColumnClosure().length; i++) {
    boolean selectable=(allProperties || !subclassColumnLazyClosure[i]) && !isSubclassTableSequentialSelect(columnTableNumbers[i]) && subclassColumnSelectableClosure[i];
    if (selectable) {
      String subalias=generateTableAlias(name,columnTableNumbers[i]);
      select.addColumn(subalias,columns[i],columnAliases[i]);
    }
  }
  int[] formulaTableNumbers=getSubclassFormulaTableNumberClosure();
  String[] formulaTemplates=getSubclassFormulaTemplateClosure();
  String[] formulaAliases=getSubclassFormulaAliasClosure();
  for (int i=0; i < getSubclassFormulaTemplateClosure().length; i++) {
    boolean selectable=(allProperties || !subclassFormulaLazyClosure[i]) && !isSubclassTableSequentialSelect(formulaTableNumbers[i]);
    if (selectable) {
      String subalias=generateTableAlias(name,formulaTableNumbers[i]);
      select.addFormula(subalias,formulaTemplates[i],formulaAliases[i]);
    }
  }
  if (entityMetamodel.hasSubclasses()) {
    addDiscriminatorToSelect(select,name,suffix);
  }
  if (hasRowId()) {
    select.addColumn(name,rowIdName,ROWID_ALIAS);
  }
  return select.toFragmentString();
}
