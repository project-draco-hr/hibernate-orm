{
  this.sessionFactory=sessionFactory;
  this.persister=persister;
  name=entityBinding.getEntity().getName();
  rootName=entityBinding.getHierarchyDetails().getRootEntityBinding().getEntity().getName();
  entityType=sessionFactory.getTypeResolver().getTypeFactory().manyToOne(name);
  identifierAttribute=PropertyFactory.buildIdentifierProperty(entityBinding,sessionFactory.getIdentifierGenerator(rootName));
  versioned=entityBinding.isVersioned();
  boolean hasPojoRepresentation=false;
  Class<?> mappedClass=null;
  Class<?> proxyInterfaceClass=null;
  if (entityBinding.getEntity().getClassReferenceUnresolved() != null) {
    hasPojoRepresentation=true;
    mappedClass=entityBinding.getEntity().getClassReference();
    proxyInterfaceClass=entityBinding.getProxyInterfaceType().getValue();
  }
  instrumentationMetadata=Environment.getBytecodeProvider().getEntityInstrumentationMetadata(mappedClass);
  boolean hasLazy=false;
  BasicAttributeBinding rootEntityIdentifier=entityBinding.getHierarchyDetails().getEntityIdentifier().getValueBinding();
  propertySpan=rootEntityIdentifier == null ? entityBinding.getAttributeBindingClosureSpan() : entityBinding.getAttributeBindingClosureSpan() - 1;
  properties=new NonIdentifierAttribute[propertySpan];
  List naturalIdNumbers=new ArrayList();
  propertyNames=new String[propertySpan];
  propertyTypes=new Type[propertySpan];
  propertyUpdateability=new boolean[propertySpan];
  propertyInsertability=new boolean[propertySpan];
  nonlazyPropertyUpdateability=new boolean[propertySpan];
  propertyCheckability=new boolean[propertySpan];
  propertyNullability=new boolean[propertySpan];
  propertyVersionability=new boolean[propertySpan];
  propertyLaziness=new boolean[propertySpan];
  cascadeStyles=new CascadeStyle[propertySpan];
  this.hasPreInsertGeneratedValues=false;
  this.hasPreUpdateGeneratedValues=false;
  this.hasInsertGeneratedValues=false;
  this.hasUpdateGeneratedValues=false;
  this.inMemoryValueGenerationStrategies=new InMemoryValueGenerationStrategy[propertySpan];
  Arrays.fill(this.inMemoryValueGenerationStrategies,NoInMemoryValueGenerationStrategy.INSTANCE);
  this.inDatabaseValueGenerationStrategies=new InDatabaseValueGenerationStrategy[propertySpan];
  Arrays.fill(this.inDatabaseValueGenerationStrategies,NoInDatabaseValueGenerationStrategy.INSTANCE);
  int i=0;
  int tempVersionProperty=NO_VERSION_INDX;
  boolean foundCascade=false;
  boolean foundCollection=false;
  boolean foundMutable=false;
  boolean foundNonIdentifierPropertyNamedId=false;
  boolean foundInsertGeneratedValue=false;
  boolean foundUpdateGeneratedValue=false;
  boolean foundUpdateableNaturalIdProperty=false;
  for (  AttributeBinding attributeBinding : entityBinding.getAttributeBindingClosure()) {
    if (attributeBinding == rootEntityIdentifier) {
      continue;
    }
    if (attributeBinding == entityBinding.getHierarchyDetails().getVersioningAttributeBinding()) {
      tempVersionProperty=i;
      properties[i]=PropertyFactory.buildVersionProperty(persister,entityBinding.getHierarchyDetails().getVersioningAttributeBinding(),instrumentationMetadata.isInstrumented());
    }
 else {
      properties[i]=PropertyFactory.buildStandardProperty(attributeBinding,instrumentationMetadata.isInstrumented());
    }
    if ("id".equals(attributeBinding.getAttribute().getName())) {
      foundNonIdentifierPropertyNamedId=true;
    }
    boolean lazy=attributeBinding.isLazy() && instrumentationMetadata.isInstrumented();
    if (lazy)     hasLazy=true;
    propertyLaziness[i]=lazy;
    propertyNames[i]=properties[i].getName();
    propertyTypes[i]=properties[i].getType();
    propertyNullability[i]=properties[i].isNullable();
    propertyUpdateability[i]=properties[i].isUpdateable();
    propertyInsertability[i]=properties[i].isInsertable();
    propertyVersionability[i]=properties[i].isVersionable();
    nonlazyPropertyUpdateability[i]=properties[i].isUpdateable() && !lazy;
    propertyCheckability[i]=propertyUpdateability[i] || (propertyTypes[i].isAssociationType() && ((AssociationType)propertyTypes[i]).isAlwaysDirtyChecked());
    cascadeStyles[i]=properties[i].getCascadeStyle();
    if (properties[i].isLazy()) {
      hasLazy=true;
    }
    if (properties[i].getCascadeStyle() != CascadeStyles.NONE) {
      foundCascade=true;
    }
    if (indicatesCollection(properties[i].getType())) {
      foundCollection=true;
    }
    if (propertyTypes[i].isMutable() && propertyCheckability[i]) {
      foundMutable=true;
    }
    mapPropertyToIndex(attributeBinding.getAttribute(),i);
    i++;
  }
  if (naturalIdNumbers.size() == 0) {
    naturalIdPropertyNumbers=null;
    hasImmutableNaturalId=false;
    hasCacheableNaturalId=false;
  }
 else {
    naturalIdPropertyNumbers=ArrayHelper.toIntArray(naturalIdNumbers);
    hasImmutableNaturalId=!foundUpdateableNaturalIdProperty;
    hasCacheableNaturalId=false;
  }
  hasCascades=foundCascade;
  hasNonIdentifierPropertyNamedId=foundNonIdentifierPropertyNamedId;
  versionPropertyIndex=tempVersionProperty;
  hasLazyProperties=hasLazy;
  if (hasLazyProperties) {
    LOG.lazyPropertyFetchingAvailable(name);
  }
  lazy=entityBinding.isLazy() && (!hasPojoRepresentation || !ReflectHelper.isFinalClass(proxyInterfaceClass));
  mutable=entityBinding.isMutable();
  if (entityBinding.isAbstract() == null) {
    isAbstract=hasPojoRepresentation && ReflectHelper.isAbstractClass(mappedClass);
  }
 else {
    isAbstract=entityBinding.isAbstract().booleanValue();
    if (!isAbstract && hasPojoRepresentation && ReflectHelper.isAbstractClass(mappedClass)) {
      LOG.entityMappedAsNonAbstract(name);
    }
  }
  selectBeforeUpdate=entityBinding.isSelectBeforeUpdate();
  dynamicUpdate=entityBinding.isDynamicUpdate();
  dynamicInsert=entityBinding.isDynamicInsert();
  hasSubclasses=entityBinding.hasSubEntityBindings();
  polymorphic=entityBinding.isPolymorphic();
  explicitPolymorphism=entityBinding.getHierarchyDetails().isExplicitPolymorphism();
  inherited=!entityBinding.isRoot();
  superclass=inherited ? entityBinding.getEntity().getSuperType().getName() : null;
  optimisticLockStyle=entityBinding.getHierarchyDetails().getOptimisticLockStyle();
  final boolean isAllOrDirty=optimisticLockStyle == OptimisticLockStyle.ALL || optimisticLockStyle == OptimisticLockStyle.DIRTY;
  if (isAllOrDirty && !dynamicUpdate) {
    throw new MappingException("optimistic-lock=all|dirty requires dynamic-update=\"true\": " + name);
  }
  if (versionPropertyIndex != NO_VERSION_INDX && isAllOrDirty) {
    throw new MappingException("version and optimistic-lock=all|dirty are not a valid combination : " + name);
  }
  hasCollections=foundCollection;
  hasMutableProperties=foundMutable;
  for (  EntityBinding subEntityBinding : entityBinding.getPostOrderSubEntityBindingClosure()) {
    subclassEntityNames.add(subEntityBinding.getEntity().getName());
    if (subEntityBinding.getEntity().getClassReference() != null) {
      entityNameByInheritenceClassMap.put(subEntityBinding.getEntity().getClassReference(),subEntityBinding.getEntity().getName());
    }
  }
  subclassEntityNames.add(name);
  if (mappedClass != null) {
    entityNameByInheritenceClassMap.put(mappedClass,name);
  }
  entityMode=hasPojoRepresentation ? EntityMode.POJO : EntityMode.MAP;
  final EntityTuplizerFactory entityTuplizerFactory=sessionFactory.getSettings().getEntityTuplizerFactory();
  Class<? extends EntityTuplizer> tuplizerClass=entityBinding.getCustomEntityTuplizerClass();
  if (tuplizerClass == null) {
    entityTuplizer=entityTuplizerFactory.constructDefaultTuplizer(entityMode,this,entityBinding);
  }
 else {
    entityTuplizer=entityTuplizerFactory.constructTuplizer(tuplizerClass,this,entityBinding);
  }
}
