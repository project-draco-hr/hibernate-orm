{
  CriteriaExecutor criteriaExecutorUnaliased=new CriteriaExecutor(){
    protected Criteria getCriteria(    Session s){
      return s.createCriteria(Student.class,"s").setFetchMode("addresses",FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"));
    }
  }
;
  HqlExecutor hqlExecutorUnaliased=new HqlExecutor(){
    public Query getQuery(    Session s){
      return s.createQuery("from Student s left join fetch s.addresses order by s.studentNumber");
    }
  }
;
  CriteriaExecutor criteriaExecutorAliased1=new CriteriaExecutor(){
    protected Criteria getCriteria(    Session s){
      return s.createCriteria(Student.class,"s").createAlias("s.addresses","a",Criteria.LEFT_JOIN).setFetchMode("addresses",FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"));
    }
  }
;
  CriteriaExecutor criteriaExecutorAliased2=new CriteriaExecutor(){
    protected Criteria getCriteria(    Session s){
      return s.createCriteria(Student.class,"s").createAlias("s.addresses","a",Criteria.LEFT_JOIN).setFetchMode("a",FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"));
    }
  }
;
  CriteriaExecutor criteriaExecutorAliased3=new CriteriaExecutor(){
    protected Criteria getCriteria(    Session s){
      return s.createCriteria(Student.class,"s").createCriteria("s.addresses","a",Criteria.LEFT_JOIN).setFetchMode("addresses",FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"));
    }
  }
;
  CriteriaExecutor criteriaExecutorAliased4=new CriteriaExecutor(){
    protected Criteria getCriteria(    Session s){
      return s.createCriteria(Student.class,"s").createCriteria("s.addresses","a",Criteria.LEFT_JOIN).setFetchMode("a",FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"));
    }
  }
;
  HqlExecutor hqlExecutorAliased=new HqlExecutor(){
    public Query getQuery(    Session s){
      return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber");
    }
  }
;
  ResultChecker checker=new ResultChecker(){
    public void check(    Object results){
      List resultList=(List)results;
      assertEquals(3,resultList.size());
      assertEquals(yogiExpected,resultList.get(0));
      assertSame(resultList.get(0),resultList.get(1));
      assertEquals(shermanExpected,resultList.get(2));
      assertNotNull(((Student)resultList.get(0)).getAddresses());
      assertNotNull(((Student)resultList.get(1)).getAddresses());
      assertNotNull(((Student)resultList.get(2)).getAddresses());
      if (areDynamicNonLazyAssociationsChecked()) {
        assertTrue(Hibernate.isInitialized(((Student)resultList.get(0)).getAddresses()));
        assertEquals(yogiExpected.getAddresses(),((Student)resultList.get(0)).getAddresses());
        assertTrue(((Student)resultList.get(2)).getAddresses().isEmpty());
      }
    }
  }
;
  runTest(hqlExecutorUnaliased,criteriaExecutorUnaliased,checker,false);
  runTest(hqlExecutorAliased,criteriaExecutorAliased1,checker,false);
  runTest(null,criteriaExecutorAliased2,checker,false);
  runTest(null,criteriaExecutorAliased3,checker,false);
  runTest(null,criteriaExecutorAliased4,checker,false);
}
