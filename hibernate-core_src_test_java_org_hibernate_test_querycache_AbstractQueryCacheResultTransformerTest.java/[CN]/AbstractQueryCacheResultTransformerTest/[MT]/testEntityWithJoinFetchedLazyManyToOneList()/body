{
  CriteriaExecutor criteriaExecutorUnaliased=new CriteriaExecutor(){
    protected Criteria getCriteria(    Session s){
      return s.createCriteria(Student.class,"s").setFetchMode("preferredCourse",FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"));
    }
  }
;
  HqlExecutor hqlExecutorUnaliased=new HqlExecutor(){
    public Query getQuery(    Session s){
      return s.createQuery("from Student s left join fetch s.preferredCourse order by s.studentNumber");
    }
  }
;
  CriteriaExecutor criteriaExecutorAliased1=new CriteriaExecutor(){
    protected Criteria getCriteria(    Session s){
      return s.createCriteria(Student.class,"s").createAlias("s.preferredCourse","pCourse",Criteria.LEFT_JOIN).setFetchMode("preferredCourse",FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"));
    }
  }
;
  CriteriaExecutor criteriaExecutorAliased2=new CriteriaExecutor(){
    protected Criteria getCriteria(    Session s){
      return s.createCriteria(Student.class,"s").createAlias("s.preferredCourse","pCourse",Criteria.LEFT_JOIN).setFetchMode("pCourse",FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"));
    }
  }
;
  CriteriaExecutor criteriaExecutorAliased3=new CriteriaExecutor(){
    protected Criteria getCriteria(    Session s){
      return s.createCriteria(Student.class,"s").createCriteria("s.preferredCourse","pCourse",Criteria.LEFT_JOIN).setFetchMode("preferredCourse",FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"));
    }
  }
;
  CriteriaExecutor criteriaExecutorAliased4=new CriteriaExecutor(){
    protected Criteria getCriteria(    Session s){
      return s.createCriteria(Student.class,"s").createCriteria("s.preferredCourse","pCourse",Criteria.LEFT_JOIN).setFetchMode("pCourse",FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"));
    }
  }
;
  HqlExecutor hqlExecutorAliased=new HqlExecutor(){
    public Query getQuery(    Session s){
      return s.createQuery("from Student s left join fetch s.preferredCourse pCourse order by s.studentNumber");
    }
  }
;
  ResultChecker checker=new ResultChecker(){
    public void check(    Object results){
      List resultList=(List)results;
      assertEquals(2,resultList.size());
      assertEquals(yogiExpected,resultList.get(0));
      assertEquals(shermanExpected,resultList.get(1));
      assertEquals(yogiExpected.getPreferredCourse().getCourseCode(),((Student)resultList.get(0)).getPreferredCourse().getCourseCode());
      assertNull(((Student)resultList.get(1)).getPreferredCourse());
    }
  }
;
  runTest(hqlExecutorUnaliased,criteriaExecutorUnaliased,checker,false);
  runTest(hqlExecutorAliased,criteriaExecutorAliased1,checker,false);
  runTest(null,criteriaExecutorAliased2,checker,false);
  runTest(null,criteriaExecutorAliased3,checker,false);
  runTest(null,criteriaExecutorAliased4,checker,false);
}
