{
  EntityMapEnum entityMapEnum=new EntityMapEnum();
  entityMapEnum.ordinalMap.put(Common.A1,"Common.A1");
  Serializable id=save(entityMapEnum);
  EntityMapEnum found=assertFindCriteria(entityMapEnum,"ordinalMap",Common.A1);
  assertFalse(found.ordinalMap.isEmpty());
  delete(id);
  entityMapEnum=new EntityMapEnum();
  entityMapEnum.stringMap.put(Common.B2,"Common.B2");
  id=save(entityMapEnum);
  found=assertFindCriteria(entityMapEnum,"stringMap",Common.B2);
  assertFalse(found.stringMap.isEmpty());
  delete(id);
  entityMapEnum=new EntityMapEnum();
  entityMapEnum.firstLetterMap.put(FirstLetter.A_LETTER,"FirstLetter.A_LETTER");
  id=save(entityMapEnum);
  found=assertFindCriteria(entityMapEnum,"firstLetterMap",FirstLetter.A_LETTER);
  assertFalse(found.firstLetterMap.isEmpty());
  delete(id);
  entityMapEnum=new EntityMapEnum();
  entityMapEnum.lastNumberMap.put(LastNumber.NUMBER_3,"LastNumber.NUMBER_3");
  id=save(entityMapEnum);
  found=assertFindCriteria(entityMapEnum,"lastNumberMap",LastNumber.NUMBER_3);
  assertFalse(found.lastNumberMap.isEmpty());
  delete(id);
  entityMapEnum=new EntityMapEnum();
  entityMapEnum.explicitOverridingImplicitMap.put(LastNumber.NUMBER_2,"LastNumber.NUMBER_2 ");
  id=save(entityMapEnum);
  found=assertFindCriteria(entityMapEnum,"explicitOverridingImplicitMap",LastNumber.NUMBER_2);
  assertFalse(found.explicitOverridingImplicitMap.isEmpty());
  delete(id);
}
