{
  return new AccessCallback(){
    @Override public IntegralDataTypeHolder getNextValue(){
      return session.getTransactionCoordinator().getTransaction().createIsolationDelegate().delegateWork(new AbstractReturningWork<IntegralDataTypeHolder>(){
        @Override public IntegralDataTypeHolder execute(        Connection connection) throws SQLException {
          final SqlStatementLogger statementLogger=session.getFactory().getServiceRegistry().getService(JdbcServices.class).getSqlStatementLogger();
          final IntegralDataTypeHolder value=IdentifierGeneratorHelper.getIntegralDataTypeHolder(numberType);
          int rows;
          do {
            statementLogger.logStatement(selectQuery,FormatStyle.BASIC.getFormatter());
            PreparedStatement selectStatement=connection.prepareStatement(selectQuery);
            try {
              final ResultSet selectRS=selectStatement.executeQuery();
              if (!selectRS.next()) {
                final String err="could not read a hi value - you need to populate the table: " + tableName;
                LOG.error(err);
                throw new IdentifierGenerationException(err);
              }
              value.initialize(selectRS,1);
              selectRS.close();
            }
 catch (            SQLException sqle) {
              LOG.error("could not read a hi value",sqle);
              throw sqle;
            }
 finally {
              selectStatement.close();
            }
            statementLogger.logStatement(updateQuery,FormatStyle.BASIC.getFormatter());
            final PreparedStatement updatePS=connection.prepareStatement(updateQuery);
            try {
              final int increment=applyIncrementSizeToSourceValues ? incrementSize : 1;
              final IntegralDataTypeHolder updateValue=value.copy().add(increment);
              updateValue.bind(updatePS,1);
              value.bind(updatePS,2);
              rows=updatePS.executeUpdate();
            }
 catch (            SQLException e) {
              LOG.unableToUpdateQueryHiValue(tableName,e);
              throw e;
            }
 finally {
              updatePS.close();
            }
          }
 while (rows == 0);
          accessCounter++;
          return value;
        }
      }
,true);
    }
    @Override public String getTenantIdentifier(){
      return session.getTenantIdentifier();
    }
  }
;
}
