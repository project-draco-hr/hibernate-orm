{
  ManyToOneEntity manyToOne=getManyToOneEntity();
  OneToOneEntity oneToOne=getOneToOneEntity();
  ManyToManyEntity manyToManyEntity=getManyToManyEntity();
  AdvancedEntity advancedEntity=getAdvancedEntity(manyToOne,oneToOne,manyToManyEntity);
  Session session=openSession();
  session.getTransaction().begin();
  session.save(manyToOne);
  session.save(oneToOne);
  session.save(manyToManyEntity);
  session.save(advancedEntity);
  session.getTransaction().commit();
  session.getTransaction().begin();
  InternalComponent internalComponent=(InternalComponent)advancedEntity.getDynamicConfiguration().get(INTERNAL_COMPONENT);
  internalComponent.setProperty("new value");
  session.save(advancedEntity);
  session.getTransaction().commit();
  session.getTransaction().begin();
  List<String> internalList=(List)advancedEntity.getDynamicConfiguration().get(INTERNAL_LIST);
  internalList.add("four");
  session.save(advancedEntity);
  session.getTransaction().commit();
  session.getTransaction().begin();
  Map<String,String> map=(Map)advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP);
  map.put("three","3");
  session.save(advancedEntity);
  session.getTransaction().commit();
  session.getTransaction().begin();
  Map<String,ManyToManyEntity> mapWithManyToMany=(Map)advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY);
  ManyToManyEntity manyToManyEntity2=new ManyToManyEntity(2L,"new value");
  mapWithManyToMany.put("entity2",manyToManyEntity2);
  session.save(manyToManyEntity2);
  session.save(advancedEntity);
  session.getTransaction().commit();
  session.getTransaction().begin();
  mapWithManyToMany=(Map)advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY);
  mapWithManyToMany.clear();
  session.save(advancedEntity);
  session.getTransaction().commit();
  session.getTransaction().begin();
  Set<InternalComponent> internalComponentSet=(Set)advancedEntity.getDynamicConfiguration().get(INTERNAL_SET_OF_COMPONENTS);
  internalComponentSet.add(new InternalComponent("drei"));
  session.save(advancedEntity);
  session.getTransaction().commit();
  session.getTransaction().begin();
  advancedEntity.getDynamicConfiguration().put(AGE_USER_TYPE,new Age(19));
  session.save(advancedEntity);
  session.getTransaction().commit();
  AdvancedEntity advancedEntityActual=(AdvancedEntity)session.load(AdvancedEntity.class,1L);
  Assert.assertEquals(advancedEntity,advancedEntityActual);
}
