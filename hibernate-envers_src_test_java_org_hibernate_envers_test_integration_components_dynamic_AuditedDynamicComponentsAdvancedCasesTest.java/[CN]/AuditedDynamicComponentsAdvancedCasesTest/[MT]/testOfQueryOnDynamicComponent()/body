{
  AdvancedEntity entity=getAdvancedEntity(getManyToOneEntity(),getOneToOneEntity(),getManyToManyEntity());
  ManyToOneEntity manyToOneEntity=(ManyToOneEntity)entity.getDynamicConfiguration().get(PROP_MANY_TO_ONE);
  List resultList=getAuditReader().createQuery().forEntitiesAtRevision(AdvancedEntity.class,1).add(AuditEntity.relatedId("dynamicConfiguration_" + PROP_MANY_TO_ONE).eq(manyToOneEntity.getId())).getResultList();
  Assert.assertEquals(entity,resultList.get(0));
  InternalComponent internalComponent=(InternalComponent)entity.getDynamicConfiguration().get(INTERNAL_COMPONENT);
  resultList=getAuditReader().createQuery().forEntitiesAtRevision(AdvancedEntity.class,1).add(AuditEntity.property("dynamicConfiguration_" + INTERNAL_COMPONENT + "_property").eq(internalComponent.getProperty())).getResultList();
  Assert.assertEquals(entity,resultList.get(0));
  try {
    OneToOneEntity oneToOneEntity=(OneToOneEntity)entity.getDynamicConfiguration().get(PROP_ONE_TO_ONE);
    getAuditReader().createQuery().forEntitiesAtRevision(AdvancedEntity.class,1).add(AuditEntity.property("dynamicConfiguration_" + PROP_ONE_TO_ONE).eq(oneToOneEntity)).getResultList();
    Assert.fail();
  }
 catch (  QueryException e) {
  }
catch (  Exception e) {
    Assert.fail();
  }
  try {
    getAuditReader().createQuery().forEntitiesAtRevision(AdvancedEntity.class,1).add(AuditEntity.property("dynamicConfiguration_" + INTERNAL_MAP_WITH_MANY_TO_MANY).eq(entity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY))).getResultList();
    Assert.fail();
  }
 catch (  AuditException e) {
    Assert.assertEquals("This type of relation (org.hibernate.envers.test.integration.components.dynamic.AdvancedEntity.dynamicConfiguration_internalMapWithEntities) isn't supported and can't be used in queries.",e.getMessage());
  }
catch (  Exception e) {
    Assert.fail();
  }
}
