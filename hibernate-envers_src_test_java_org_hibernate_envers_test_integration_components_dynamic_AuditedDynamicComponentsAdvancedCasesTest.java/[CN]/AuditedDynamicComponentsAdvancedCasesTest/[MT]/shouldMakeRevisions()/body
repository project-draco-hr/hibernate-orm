{
  Session session=openSession();
  session.getTransaction().begin();
  ManyToOneEntity manyToOne=getManyToOneEntity();
  OneToOneEntity oneToOne=getOneToOneEntity();
  ManyToManyEntity manyToManyEntity=getManyToManyEntity();
  AdvancedEntity advancedEntity=getAdvancedEntity(manyToOne,oneToOne,manyToManyEntity);
  AdvancedEntity ver1=getAuditReader().find(AdvancedEntity.class,advancedEntity.getId(),1);
  Assert.assertEquals(advancedEntity,ver1);
  InternalComponent internalComponent=(InternalComponent)advancedEntity.getDynamicConfiguration().get(INTERNAL_COMPONENT);
  internalComponent.setProperty("new value");
  AdvancedEntity ver2=getAuditReader().find(AdvancedEntity.class,advancedEntity.getId(),2);
  Assert.assertEquals(advancedEntity,ver2);
  List internalList=(List)advancedEntity.getDynamicConfiguration().get(INTERNAL_LIST);
  internalList.add("four");
  AdvancedEntity ver3=getAuditReader().find(AdvancedEntity.class,advancedEntity.getId(),3);
  Assert.assertEquals(advancedEntity,ver3);
  Map<String,String> map=(Map)advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP);
  map.put("three","3");
  AdvancedEntity ver4=getAuditReader().find(AdvancedEntity.class,advancedEntity.getId(),4);
  Assert.assertEquals(advancedEntity,ver4);
  Map<String,ManyToManyEntity> mapWithManyToMany=(Map)advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY);
  ManyToManyEntity manyToManyEntity2=new ManyToManyEntity(2L,"new value");
  mapWithManyToMany.put("entity2",manyToManyEntity2);
  AdvancedEntity ver5=getAuditReader().find(AdvancedEntity.class,advancedEntity.getId(),5);
  Assert.assertEquals(advancedEntity,ver5);
  mapWithManyToMany=(Map)advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY);
  mapWithManyToMany.clear();
  AdvancedEntity ver6=getAuditReader().find(AdvancedEntity.class,advancedEntity.getId(),6);
  Set<InternalComponent> internalComponentSet=(Set)advancedEntity.getDynamicConfiguration().get(INTERNAL_SET_OF_COMPONENTS);
  internalComponentSet.add(new InternalComponent("drei"));
  AdvancedEntity ver7=getAuditReader().find(AdvancedEntity.class,advancedEntity.getId(),7);
  Assert.assertEquals(advancedEntity,ver7);
  session.getTransaction().commit();
}
