{
  AdvancedEntity advancedEntity=new AdvancedEntity();
  advancedEntity.setId(1L);
  advancedEntity.setNote("Test note");
  advancedEntity.getDynamicConfiguration().put(PROP_BOOLEAN,true);
  advancedEntity.getDynamicConfiguration().put(PROP_INT,19);
  advancedEntity.getDynamicConfiguration().put(PROP_FLOAT,15.9f);
  advancedEntity.getDynamicConfiguration().put(PROP_MANY_TO_ONE,manyToOne);
  advancedEntity.getDynamicConfiguration().put(PROP_ONE_TO_ONE,oneToOne);
  advancedEntity.getDynamicConfiguration().put(INTERNAL_COMPONENT,new InternalComponent("Internal value"));
  advancedEntity.getDynamicConfiguration().put(INTERNAL_LIST,Lists.newArrayList("One","Two","Three"));
  Map<String,String> map=new HashMap<String,String>();
  map.put("one","1");
  map.put("two","2");
  advancedEntity.getDynamicConfiguration().put(INTERNAL_MAP,map);
  Map<String,ManyToManyEntity> mapWithManyToMany=new HashMap<String,ManyToManyEntity>();
  mapWithManyToMany.put("entity1",manyToManyEntity);
  advancedEntity.getDynamicConfiguration().put(INTERNAL_MAP_WITH_MANY_TO_MANY,mapWithManyToMany);
  advancedEntity.getDynamicConfiguration().put(INTERNAL_SET,Sets.newHashSet("Uno","Due"));
  advancedEntity.getDynamicConfiguration().put(INTERNAL_SET_OF_COMPONENTS,Sets.newHashSet(new InternalComponent("Ein"),new InternalComponent("Zwei")));
  return advancedEntity;
}
