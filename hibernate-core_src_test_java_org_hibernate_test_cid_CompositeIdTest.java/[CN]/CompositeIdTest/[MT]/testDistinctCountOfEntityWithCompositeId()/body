{
  final HQLQueryPlan plan=sessionFactory().getQueryPlanCache().getHQLQueryPlan("select count(distinct o) from Order o",false,Collections.EMPTY_MAP);
  assertEquals(1,plan.getTranslators().length);
  final QueryTranslator translator=plan.getTranslators()[0];
  final String generatedSql=translator.getSQLString();
  System.out.println("Generated SQL : " + generatedSql);
  final int countExpressionListStart=generatedSql.indexOf("count(");
  final int countExpressionListEnd=generatedSql.indexOf(")",countExpressionListStart);
  final String countExpressionFragment=generatedSql.substring(countExpressionListStart + 6,countExpressionListEnd + 1);
  assertTrue(countExpressionFragment.startsWith("distinct"));
  assertTrue(countExpressionFragment.contains(","));
  Session s=openSession();
  s.beginTransaction();
  Customer c=new Customer();
  c.setCustomerId("1");
  c.setAddress("123 somewhere");
  c.setName("Brett");
  Order o1=new Order(c);
  o1.setOrderDate(Calendar.getInstance());
  Order o2=new Order(c);
  o2.setOrderDate(Calendar.getInstance());
  s.persist(c);
  s.persist(o1);
  s.persist(o2);
  s.getTransaction().commit();
  s.clear();
  s.beginTransaction();
  try {
    long count=(Long)s.createQuery("select count(distinct o) FROM Order o").uniqueResult();
    if (!getDialect().supportsTupleDistinctCounts()) {
      fail("expected SQLGrammarException");
    }
    assertEquals(2l,count);
  }
 catch (  SQLGrammarException e) {
    if (getDialect().supportsTupleDistinctCounts()) {
      throw e;
    }
  }
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  s.createQuery("delete from Order").executeUpdate();
  s.createQuery("delete from Customer").executeUpdate();
  s.getTransaction().commit();
  s.close();
}
