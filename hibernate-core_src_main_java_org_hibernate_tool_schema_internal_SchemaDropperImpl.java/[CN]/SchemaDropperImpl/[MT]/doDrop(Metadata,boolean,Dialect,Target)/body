{
  final Database database=metadata.getDatabase();
  final JdbcEnvironment jdbcEnvironment=database.getJdbcEnvironment();
  for (  Target target : targets) {
    target.prepare();
  }
  final Set<String> exportIdentifiers=new HashSet<String>(50);
  for (  AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) {
    if (!auxiliaryDatabaseObject.beforeTablesOnCreation()) {
      continue;
    }
    if (!auxiliaryDatabaseObject.appliesToDialect(dialect)) {
      continue;
    }
    applySqlStrings(targets,dialect.getAuxiliaryDatabaseObjectExporter().getSqlDropStrings(auxiliaryDatabaseObject,metadata));
  }
  for (  Namespace namespace : database.getNamespaces()) {
    applyConstraintDropping(targets,namespace,metadata);
    for (    Table table : namespace.getTables()) {
      if (!table.isPhysicalTable()) {
        continue;
      }
      checkExportIdentifier(table,exportIdentifiers);
      applySqlStrings(targets,dialect.getTableExporter().getSqlDropStrings(table,metadata));
    }
    for (    Sequence sequence : namespace.getSequences()) {
      checkExportIdentifier(sequence,exportIdentifiers);
      applySqlStrings(targets,dialect.getSequenceExporter().getSqlDropStrings(sequence,metadata));
    }
  }
  for (  AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) {
    if (auxiliaryDatabaseObject.beforeTablesOnCreation()) {
      continue;
    }
    if (!auxiliaryDatabaseObject.appliesToDialect(dialect)) {
      continue;
    }
    applySqlStrings(targets,auxiliaryDatabaseObject.sqlDropStrings(jdbcEnvironment.getDialect()));
  }
  for (  Namespace namespace : database.getNamespaces()) {
    if (dropSchemas) {
      if (namespace.getName().getSchema() == null) {
        continue;
      }
      applySqlStrings(targets,dialect.getDropSchemaCommand(namespace.getName().getSchema().render(dialect)));
    }
  }
  for (  Target target : targets) {
    target.release();
  }
}
