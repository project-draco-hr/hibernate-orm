{
  final Database database=metadata.getDatabase();
  final JdbcEnvironment jdbcEnvironment=database.getJdbcEnvironment();
  boolean tryToDropCatalogs=false;
  boolean tryToDropSchemas=false;
  if (options.shouldManageNamespaces()) {
    if (dialect.canCreateSchema()) {
      tryToDropSchemas=true;
    }
    if (dialect.canCreateCatalog()) {
      tryToDropCatalogs=true;
    }
  }
  final Set<String> exportIdentifiers=new HashSet<String>(50);
  for (  AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) {
    if (!auxiliaryDatabaseObject.beforeTablesOnCreation()) {
      continue;
    }
    if (!auxiliaryDatabaseObject.appliesToDialect(dialect)) {
      continue;
    }
    applySqlStrings(dialect.getAuxiliaryDatabaseObjectExporter().getSqlDropStrings(auxiliaryDatabaseObject,metadata),formatter,options,targets);
  }
  for (  Namespace namespace : database.getNamespaces()) {
    if (!schemaFilter.includeNamespace(namespace)) {
      continue;
    }
    applyConstraintDropping(namespace,metadata,formatter,options,targets);
    for (    Table table : namespace.getTables()) {
      if (!table.isPhysicalTable()) {
        continue;
      }
      if (!schemaFilter.includeTable(table)) {
        continue;
      }
      checkExportIdentifier(table,exportIdentifiers);
      applySqlStrings(dialect.getTableExporter().getSqlDropStrings(table,metadata),formatter,options,targets);
    }
    for (    Sequence sequence : namespace.getSequences()) {
      if (!schemaFilter.includeSequence(sequence)) {
        continue;
      }
      checkExportIdentifier(sequence,exportIdentifiers);
      applySqlStrings(dialect.getSequenceExporter().getSqlDropStrings(sequence,metadata),formatter,options,targets);
    }
  }
  for (  AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) {
    if (auxiliaryDatabaseObject.beforeTablesOnCreation()) {
      continue;
    }
    if (!auxiliaryDatabaseObject.appliesToDialect(dialect)) {
      continue;
    }
    applySqlStrings(auxiliaryDatabaseObject.sqlDropStrings(jdbcEnvironment.getDialect()),formatter,options,targets);
  }
  if (tryToDropCatalogs || tryToDropSchemas) {
    Set<Identifier> exportedCatalogs=new HashSet<Identifier>();
    for (    Namespace namespace : database.getNamespaces()) {
      if (!schemaFilter.includeNamespace(namespace)) {
        continue;
      }
      if (tryToDropSchemas && namespace.getPhysicalName().getSchema() != null) {
        applySqlStrings(dialect.getDropSchemaCommand(namespace.getPhysicalName().getSchema().render(dialect)),formatter,options,targets);
      }
      if (tryToDropCatalogs) {
        final Identifier catalogLogicalName=namespace.getName().getCatalog();
        final Identifier catalogPhysicalName=namespace.getPhysicalName().getCatalog();
        if (catalogPhysicalName != null && !exportedCatalogs.contains(catalogLogicalName)) {
          applySqlStrings(dialect.getDropCatalogCommand(catalogPhysicalName.render(dialect)),formatter,options,targets);
          exportedCatalogs.add(catalogLogicalName);
        }
      }
    }
  }
}
