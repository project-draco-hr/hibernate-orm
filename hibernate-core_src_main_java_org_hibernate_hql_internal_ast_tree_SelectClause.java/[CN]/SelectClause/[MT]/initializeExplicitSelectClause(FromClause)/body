{
  if (prepared) {
    throw new IllegalStateException("SelectClause was already prepared!");
  }
  ArrayList queryReturnTypeList=new ArrayList();
  SelectExpression[] selectExpressions=collectSelectExpressions();
  if (getParameterPositions().size() > 0 && getWalker().getStatementType() != HqlSqlTokenTypes.INSERT) {
    throw new QueryException("Parameters are only supported in SELECT clauses when used as part of a INSERT INTO DML statement");
  }
  for (  SelectExpression selectExpression : selectExpressions) {
    if (AggregatedSelectExpression.class.isInstance(selectExpression)) {
      aggregatedSelectExpression=(AggregatedSelectExpression)selectExpression;
      queryReturnTypeList.addAll(aggregatedSelectExpression.getAggregatedSelectionTypeList());
      scalarSelect=true;
    }
 else {
      boolean inSubquery=selectExpression instanceof QueryNode && ((QueryNode)selectExpression).getFromClause().getParentFromClause() != null;
      if (getWalker().getStatementType() == HqlSqlTokenTypes.INSERT && inSubquery) {
        if (((QueryNode)selectExpression).getSelectClause().getParameterPositions().size() > 0) {
          throw new QueryException("Use of parameters in subqueries of INSERT INTO DML statements is not supported.");
        }
      }
      Type type=selectExpression.getDataType();
      if (type == null) {
        throw new IllegalStateException("No data type for node: " + selectExpression.getClass().getName() + " "+ new ASTPrinter(SqlTokenTypes.class).showAsString((AST)selectExpression,""));
      }
      if (selectExpression.isScalar()) {
        scalarSelect=true;
      }
      if (isReturnableEntity(selectExpression)) {
        fromElementsForLoad.add(selectExpression.getFromElement());
      }
      queryReturnTypeList.add(type);
    }
  }
  initAliases(selectExpressions);
  if (!getWalker().isShallowQuery()) {
    List fromElements=fromClause.getProjectionList();
    ASTAppender appender=new ASTAppender(getASTFactory(),this);
    int size=fromElements.size();
    Iterator iterator=fromElements.iterator();
    for (int k=0; iterator.hasNext(); k++) {
      FromElement fromElement=(FromElement)iterator.next();
      if (fromElement.isFetch()) {
        FromElement origin=null;
        if (fromElement.getRealOrigin() == null) {
          if (fromElement.getOrigin() == null) {
            throw new QueryException("Unable to determine origin of join fetch [" + fromElement.getDisplayText() + "]");
          }
 else {
            origin=fromElement.getOrigin();
          }
        }
 else {
          origin=fromElement.getRealOrigin();
        }
        if (!fromElementsForLoad.contains(origin)) {
          throw new QueryException("query specified join fetching, but the owner " + "of the fetched association was not present in the select list " + "[" + fromElement.getDisplayText() + "]");
        }
        Type type=fromElement.getSelectType();
        addCollectionFromElement(fromElement);
        if (type != null) {
          boolean collectionOfElements=fromElement.isCollectionOfValuesOrComponents();
          if (!collectionOfElements) {
            fromElement.setIncludeSubclasses(true);
            fromElementsForLoad.add(fromElement);
            String text=fromElement.renderIdentifierSelect(size,k);
            SelectExpressionImpl generatedExpr=(SelectExpressionImpl)appender.append(SqlTokenTypes.SELECT_EXPR,text,false);
            if (generatedExpr != null) {
              generatedExpr.setFromElement(fromElement);
            }
          }
        }
      }
    }
    renderNonScalarSelects(collectSelectExpressions(),fromClause);
  }
  if (scalarSelect || getWalker().isShallowQuery()) {
    renderScalarSelects(selectExpressions,fromClause);
  }
  finishInitialization(queryReturnTypeList);
}
