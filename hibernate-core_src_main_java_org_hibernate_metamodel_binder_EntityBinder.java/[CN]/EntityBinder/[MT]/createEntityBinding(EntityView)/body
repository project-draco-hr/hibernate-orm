{
  final EntityBinding entityBinding=new EntityBinding();
  final Entity entity=new Entity(entityView.getEntityName(),entityView.getSuperType(),bindingContext.makeJavaType(entityView.getClassName()));
  entityBinding.setEntity(entity);
  final TableView baseTableView=entityView.getBaseTable();
  final String schemaName=baseTableView.getExplicitSchemaName() == null ? bindingContext.getMappingDefaults().getSchemaName() : baseTableView.getExplicitSchemaName();
  final String catalogName=baseTableView.getExplicitCatalogName() == null ? bindingContext.getMappingDefaults().getCatalogName() : baseTableView.getExplicitCatalogName();
  final Schema.Name fullSchemaName=new Schema.Name(schemaName,catalogName);
  final Schema schema=bindingContext.getMetadataImplementor().getDatabase().getSchema(fullSchemaName);
  final Identifier tableName=Identifier.toIdentifier(baseTableView.getTableName());
  final Table baseTable=schema.locateOrCreateTable(tableName);
  entityBinding.setBaseTable(baseTable);
  if (entityView.getEntityInheritanceType() != InheritanceType.NO_INHERITANCE) {
    if (entityView.getSuperType() == null) {
      throw new MappingException("Encountered inheritance strategy, but no super type",entityView.getOrigin());
    }
  }
  entityBinding.setRoot(entityView.isRoot());
  entityBinding.setInheritanceType(entityView.getEntityInheritanceType());
  entityBinding.setJpaEntityName(entityView.getJpaEntityName());
  entityBinding.setEntityMode(entityView.getEntityMode());
  if (entityView.getEntityMode() == EntityMode.POJO) {
    if (entityView.getProxyInterfaceName() != null) {
      entityBinding.setProxyInterfaceType(bindingContext.makeJavaType(entityView.getProxyInterfaceName()));
      entityBinding.setLazy(true);
    }
 else     if (entityView.isLazy()) {
      entityBinding.setProxyInterfaceType(entity.getJavaType());
      entityBinding.setLazy(true);
    }
  }
 else {
    entityBinding.setProxyInterfaceType(new JavaType(Map.class));
    entityBinding.setLazy(entityView.isLazy());
  }
  entityBinding.setCustomEntityTuplizerClass(entityView.getCustomEntityTuplizerClass());
  entityBinding.setCustomEntityPersisterClass(entityView.getCustomEntityPersisterClass());
  entityBinding.setCaching(entityView.getCaching());
  entityBinding.setMetaAttributeContext(entityView.getMetaAttributeContext());
  entityBinding.setMutable(entityView.isMutable());
  entityBinding.setExplicitPolymorphism(entityView.isExplicitPolymorphism());
  entityBinding.setWhereFilter(entityView.getWhereFilter());
  entityBinding.setRowId(entityView.getRowId());
  entityBinding.setDynamicUpdate(entityView.isDynamicUpdate());
  entityBinding.setDynamicInsert(entityView.isDynamicInsert());
  entityBinding.setBatchSize(entityView.getBatchSize());
  entityBinding.setSelectBeforeUpdate(entityView.isSelectBeforeUpdate());
  entityBinding.setOptimisticLockMode(entityView.getOptimisticLockMode());
  entityBinding.setAbstract(entityView.isAbstract());
  entityBinding.setCustomLoaderName(entityView.getCustomLoaderName());
  entityBinding.setCustomInsert(entityView.getCustomInsert());
  entityBinding.setCustomUpdate(entityView.getCustomUpdate());
  entityBinding.setCustomDelete(entityView.getCustomDelete());
  if (entityView.getSynchronizedTableNames() != null) {
    entityBinding.addSynchronizedTableNames(entityView.getSynchronizedTableNames());
  }
  return entityBinding;
}
