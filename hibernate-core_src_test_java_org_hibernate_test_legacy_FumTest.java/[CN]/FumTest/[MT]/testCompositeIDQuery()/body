{
  Session s=openSession();
  s.beginTransaction();
  Fum fee=new Fum(fumKey("fee",true));
  fee.setFum("fee");
  s.save(fee);
  Fum fi=new Fum(fumKey("fi",true));
  fi.setFum("fi");
  short fiShort=fi.getId().getShort();
  s.save(fi);
  Fum fo=new Fum(fumKey("fo",true));
  fo.setFum("fo");
  s.save(fo);
  Fum fum=new Fum(fumKey("fum",true));
  fum.setFum("fum");
  s.save(fum);
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  List vList=s.createQuery("from Fum fum where fum.id.string='fo'").list();
  assertTrue("find by composite key query (find fo object)",vList.size() == 1);
  fum=(Fum)vList.get(0);
  assertTrue("find by composite key query (check fo object)",fum.getId().getString().equals("fo"));
  vList=s.createQuery("from Fum fum where fum.id.short = ?").setParameter(0,new Short(fiShort),StandardBasicTypes.SHORT).list();
  assertEquals("find by composite key query (find fi object)",1,vList.size());
  fi=(Fum)vList.get(0);
  assertEquals("find by composite key query (check fi object)","fi",fi.getId().getString());
  s.getTransaction().commit();
  s.close();
  s=openSession();
  s.beginTransaction();
  assertTrue(s.createQuery("select fum.id.short, fum.id.string from Fum fum").iterate().hasNext());
  assertTrue(s.createQuery("select fum.id from Fum fum").iterate().hasNext());
  Query qu=s.createQuery("select fum.fum, fum , fum.fum from Fum fum");
  Type[] types=qu.getReturnTypes();
  assertTrue(types.length == 3);
  for (int k=0; k < types.length; k++) {
    assertTrue(types[k] != null);
  }
  assertTrue(types[0] instanceof StringType);
  assertTrue(types[1] instanceof EntityType);
  assertTrue(types[2] instanceof StringType);
  Iterator iter=qu.iterate();
  int j=0;
  while (iter.hasNext()) {
    j++;
    assertTrue(((Object[])iter.next())[1] instanceof Fum);
  }
  assertTrue("iterate on composite key",j == 8);
  fum=(Fum)s.load(Fum.class,fum.getId());
  s.createFilter(fum.getQuxArray(),"where this.foo is null").list();
  s.createFilter(fum.getQuxArray(),"where this.foo.id = ?").setParameter(0,"fooid",StandardBasicTypes.STRING).list();
  Query f=s.createFilter(fum.getQuxArray(),"where this.foo.id = :fooId");
  f.setString("fooId","abc");
  assertFalse(f.iterate().hasNext());
  iter=s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate();
  int i=0;
  while (iter.hasNext()) {
    fum=(Fum)iter.next();
    s.delete(fum);
    i++;
  }
  assertTrue("iterate on composite key",i == 4);
  s.flush();
  s.createQuery("from Fum fu, Fum fo where fu.fo.id.string = fo.id.string and fo.fum is not null").iterate();
  s.createQuery("from Fumm f1 inner join f1.fum f2").list();
  s.getTransaction().commit();
  s.close();
}
