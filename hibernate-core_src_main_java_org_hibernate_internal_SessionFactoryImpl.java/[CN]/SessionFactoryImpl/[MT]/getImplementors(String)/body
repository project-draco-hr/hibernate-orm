{
  final Class clazz;
  try {
    clazz=serviceRegistry.getService(ClassLoaderService.class).classForName(className);
  }
 catch (  ClassLoadingException cnfe) {
    return new String[]{className};
  }
  ArrayList<String> results=new ArrayList<String>();
  for (  EntityPersister checkPersister : entityPersisters.values()) {
    if (!Queryable.class.isInstance(checkPersister)) {
      continue;
    }
    final Queryable checkQueryable=Queryable.class.cast(checkPersister);
    final String checkQueryableEntityName=checkQueryable.getEntityName();
    final boolean isMappedClass=className.equals(checkQueryableEntityName);
    if (checkQueryable.isExplicitPolymorphism()) {
      if (isMappedClass) {
        return new String[]{className};
      }
    }
 else {
      if (isMappedClass) {
        results.add(checkQueryableEntityName);
      }
 else {
        final Class mappedClass=checkQueryable.getMappedClass();
        if (mappedClass != null && clazz.isAssignableFrom(mappedClass)) {
          final boolean assignableSuperclass;
          if (checkQueryable.isInherited()) {
            Class mappedSuperclass=getEntityPersister(checkQueryable.getMappedSuperclass()).getMappedClass();
            assignableSuperclass=clazz.isAssignableFrom(mappedSuperclass);
          }
 else {
            assignableSuperclass=false;
          }
          if (!assignableSuperclass) {
            results.add(checkQueryableEntityName);
          }
        }
      }
    }
  }
  return results.toArray(new String[results.size()]);
}
