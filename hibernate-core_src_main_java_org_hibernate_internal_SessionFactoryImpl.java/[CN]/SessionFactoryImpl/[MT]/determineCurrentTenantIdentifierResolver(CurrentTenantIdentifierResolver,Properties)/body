{
  if (explicitResolver != null) {
    return explicitResolver;
  }
  final Object value=properties.get(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER);
  if (value == null) {
    return null;
  }
  if (CurrentTenantIdentifierResolver.class.isInstance(value)) {
    return CurrentTenantIdentifierResolver.class.cast(value);
  }
  Class<CurrentTenantIdentifierResolver> implClass;
  if (Class.class.isInstance(value)) {
    implClass=Class.class.cast(value);
  }
 else {
    try {
      implClass=serviceRegistry.getService(ClassLoaderService.class).classForName(value.toString());
    }
 catch (    Exception e) {
      LOG.debugf("Unable to locate CurrentTenantIdentifierResolver implementation class %s",value.toString());
      return null;
    }
  }
  if (implClass != null) {
    try {
      return implClass.newInstance();
    }
 catch (    Exception e) {
      LOG.debugf("Unable to instantiate CurrentTenantIdentifierResolver class %s",implClass.getName());
    }
  }
  return null;
}
