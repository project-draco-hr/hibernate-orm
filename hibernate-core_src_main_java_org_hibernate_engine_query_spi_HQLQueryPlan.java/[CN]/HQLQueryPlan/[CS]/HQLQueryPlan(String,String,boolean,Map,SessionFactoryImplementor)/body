{
  this.sourceQuery=hql;
  this.shallow=shallow;
  Set copy=new HashSet();
  copy.addAll(enabledFilters.keySet());
  this.enabledFilterNames=java.util.Collections.unmodifiableSet(copy);
  final String[] concreteQueryStrings=QuerySplitter.concreteQueries(hql,factory);
  final int length=concreteQueryStrings.length;
  this.translators=new QueryTranslator[length];
  List<String> sqlStringList=new ArrayList<String>();
  Set combinedQuerySpaces=new HashSet();
  final boolean hasCollectionRole=(collectionRole == null);
  final Map querySubstitutions=factory.getSettings().getQuerySubstitutions();
  final QueryTranslatorFactory queryTranslatorFactory=factory.getSettings().getQueryTranslatorFactory();
  for (int i=0; i < length; i++) {
    if (hasCollectionRole) {
      translators[i]=queryTranslatorFactory.createQueryTranslator(hql,concreteQueryStrings[i],enabledFilters,factory);
      translators[i].compile(querySubstitutions,shallow);
    }
 else {
      translators[i]=queryTranslatorFactory.createFilterTranslator(hql,concreteQueryStrings[i],enabledFilters,factory);
      ((FilterTranslator)translators[i]).compile(collectionRole,querySubstitutions,shallow);
    }
    combinedQuerySpaces.addAll(translators[i].getQuerySpaces());
    sqlStringList.addAll(translators[i].collectSqlStrings());
  }
  this.sqlStrings=ArrayHelper.toStringArray(sqlStringList);
  this.querySpaces=combinedQuerySpaces;
  if (length == 0) {
    parameterMetadata=new ParameterMetadata(null,null);
    returnMetadata=null;
  }
 else {
    this.parameterMetadata=buildParameterMetadata(translators[0].getParameterTranslations(),hql);
    if (translators[0].isManipulationStatement()) {
      returnMetadata=null;
    }
 else {
      final Type[] types=(length > 1) ? new Type[translators[0].getReturnTypes().length] : translators[0].getReturnTypes();
      returnMetadata=new ReturnMetadata(translators[0].getReturnAliases(),types);
    }
  }
}
