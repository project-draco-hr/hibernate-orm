{
  Session s=openSession();
  Transaction tx=s.beginTransaction();
  Item item;
  Bid bid;
  item=new Item();
  item.name="ZZZZ";
  s.persist(item);
  bid=new Bid();
  bid.amount=444.44f;
  bid.item=item;
  s.persist(bid);
  item=new Item();
  item.name="AAAA";
  s.persist(item);
  bid=new Bid();
  bid.amount=222.22f;
  bid.item=item;
  s.persist(bid);
  item=new Item();
  item.name="MMMM";
  s.persist(item);
  bid=new Bid();
  bid.amount=999.99f;
  bid.item=item;
  s.persist(bid);
  s.flush();
  Criteria criteria=s.createCriteria(Item.class).addOrder(org.hibernate.criterion.Order.asc("this.name")).createAlias("this.bids","i_bid",JoinType.LEFT_OUTER_JOIN).setProjection(Projections.projectionList().add(Projections.property("this.name"),"item_name").add(Projections.property("i_bid.amount"),"bid_amount")).setResultTransformer(new ResultTransformer(){
    boolean first=true;
    Object[] previous;
    @Override public Object transformTuple(    Object[] tuple,    String[] aliases){
      if (first) {
        first=false;
        previous=tuple;
      }
 else {
        String previousName=(String)previous[0];
        String name=(String)tuple[0];
        Assert.assertTrue("The resultset tuples should be ordered by item name, as specified on the Criteria",previousName.compareTo(name) < 1);
        previous=tuple;
      }
      return tuple;
    }
    @Override public List transformList(    List collection){
      return collection;
    }
  }
);
  List<Object> results=criteria.list();
  tx.rollback();
  s.close();
}
