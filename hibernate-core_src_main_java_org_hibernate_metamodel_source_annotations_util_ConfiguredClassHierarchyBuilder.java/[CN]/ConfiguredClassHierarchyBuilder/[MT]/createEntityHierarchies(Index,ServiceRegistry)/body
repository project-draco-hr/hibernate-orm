{
  ClassLoaderService classLoaderService=serviceRegistry.getService(ClassLoaderService.class);
  Map<ClassInfo,List<ClassInfo>> processedClassInfos=new HashMap<ClassInfo,List<ClassInfo>>();
  for (  ClassInfo info : index.getKnownClasses()) {
    if (!isConfiguredClass(info)) {
      continue;
    }
    if (processedClassInfos.containsKey(info)) {
      continue;
    }
    List<ClassInfo> configuredClassList=new ArrayList<ClassInfo>();
    ClassInfo tmpClassInfo=info;
    Class<?> clazz=classLoaderService.classForName(tmpClassInfo.toString());
    while (clazz != null && !clazz.equals(Object.class)) {
      tmpClassInfo=index.getClassByName(DotName.createSimple(clazz.getName()));
      clazz=clazz.getSuperclass();
      if (tmpClassInfo == null) {
        continue;
      }
      if (existsHierarchyWithClassInfoAsLeaf(processedClassInfos,tmpClassInfo)) {
        List<ClassInfo> classInfoList=processedClassInfos.get(tmpClassInfo);
        for (        ClassInfo tmpInfo : configuredClassList) {
          classInfoList.add(tmpInfo);
          processedClassInfos.put(tmpInfo,classInfoList);
        }
        break;
      }
 else {
        configuredClassList.add(0,tmpClassInfo);
        processedClassInfos.put(tmpClassInfo,configuredClassList);
      }
    }
  }
  AnnotationBindingContext context=new AnnotationBindingContext(index,serviceRegistry);
  Set<ConfiguredClassHierarchy> hierarchies=new HashSet<ConfiguredClassHierarchy>();
  List<List<ClassInfo>> processedList=new ArrayList<List<ClassInfo>>();
  for (  List<ClassInfo> classInfoList : processedClassInfos.values()) {
    if (!processedList.contains(classInfoList)) {
      hierarchies.add(ConfiguredClassHierarchy.create(classInfoList,context));
      processedList.add(classInfoList);
    }
  }
  return hierarchies;
}
